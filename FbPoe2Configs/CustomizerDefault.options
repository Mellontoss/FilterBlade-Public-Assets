Info_OptionVersion("1.1.4n");

DefensiveSearch S10(3, "skip", "hidelayer;normalmagicendgame") { };
DefensiveSearch S10(3, "skip", "hidelayer;raresendgame") { };
DefensiveSearch S10(3, "skip", "hidelayer;outdatedlevelflaska") { };
DefensiveSearch S10(3, "skip", "hidelayer;outdatedlevelflaskb") { };
DefensiveSearch S10(3, "skip", "hidelayer;outdatedlevelflaskc") { };
DefensiveSearch S10(3, "skip", "hidelayer;outdatedlevelflaskd") { };
DefensiveSearch S10(3, "skip", "hidelayer;outdatedlevelflaske") { };
DefensiveSearch S10(3, "skip", "hidelayer;final") { };

// todo: accordion icons

Chapter("chapter") {

    SectionTitle("Basics");

    Section("General Currency", "Chaos", "E") {
        Function CurrencyList($s, $shd = "SHD", $text) { QuickUI($s, $shd, [], $text, ["normalCurrencyPoe2", "O"]); }

        TierListToolBar();

        Description("Drag & Drop items to change their tier.");

        CurrencyList([3.0, "Currency Tier 1", "currency;s"], "S", "S Tier");
        CurrencyList([3.0, "Currency Tier 2", "currency;a"], "S", "A Tier");
        CurrencyList([3.0, "Currency Tier 3", "currency;b"], "SH", "B Tier");
        CurrencyList([3.0, "Currency Tier 4", "currency;c"], "SH", "C Tier");
        CurrencyList([3.0, "Currency Tier 5", "currency;d"], "SH", "D Tier");
        CurrencyList([3.0, "Currency Tier 6", "currency;e"], "SH", "E Tier");
        CurrencyList([3.0, "Currency Supplies 1", "currency;artifactlike"], "SH", "Supplies 1");
        CurrencyList([3.0, "Currency Supplies 2", "currency;supplymagic"], "SH", "Supplies 2");
        CurrencyList([3.0, "Currency Supplies 3", "currency;supplieslow"], "SH", "Supplies 3");

        Conditional("?CurrencyNewTiers") { Show; Class Currency; SetTextColor 210 178 135; SetBackgroundColor 0 0 0 255; SetBorderColor 213 159 100 200; SetFontSize 42; }
        ElementAdder_Tier("?CurrencyNewTiers", "CurrencyList");

        Conditional("?CurrencyNewTiersHidden") { }
        ElementAdder_Tier("?CurrencyNewTiersHidden", null, true, "normalCurrencyPoe2", "OH");

        QuickUI([0.0, "Remaining Currency", "currency;exhide"], "SH", [], "", [], "Remaining Currency, which are not matched by any of the above rules, probably due to unmet filtering requirements.");

        Description("Note that there are also additional rules for currency during the campaign.");
    }

    Section("Other Currency") {

        Section("Campaign") {
            // generated via manualUtil_GenerateOptFileTierListCode(); util function!
            Function CampaignCurrencyFunc($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["AreaLevel"], $text, ["normalCurrencyPoe2", "DO"]); }
            TierListToolBar();

            CampaignCurrencyFunc([0.0, "Campaign Currencies 1", "currency->leveling;rare"], "SH", "Rare");
            CampaignCurrencyFunc([0.0, "Campaign Currencies 2", "currency->leveling;magic"], "SH", "Magic");
            CampaignCurrencyFunc([0.0, "Campaign Currencies 3", "currency->leveling;wisdom"], "SH", "Wisdom");
            CampaignCurrencyFunc([0.0, "Campaign Currencies 4", "currency->leveling;wisdomstart"], "SH", "First Wisdom");

            // new tiers
            Conditional("?CampaignCurrencyNewTier") { }
            ElementAdder_Tier("?CampaignCurrencyNewTier", "CampaignCurrencyFunc");
        }

        Section("Emotions") {
            // generated via manualUtil_GenerateOptFileTierListCode(); util function!
            Function EmotionsFunc($s, $shd = "SHD", $text) { QuickUI($s, $shd, [], $text, ["B:Distilled ;C:Stackable Currency", "O"]); }
            TierListToolBar();

            EmotionsFunc([0.0, "Emotions Tier 1", "currency->emotions;s"], "SH", "S Tier");
            EmotionsFunc([0.0, "Emotions Tier 2", "currency->emotions;a"], "SH", "A Tier");
            EmotionsFunc([0.0, "Emotions Tier 3", "currency->emotions;b"], "SH", "B Tier");
            EmotionsFunc([0.0, "Emotions Tier 4", "currency->emotions;c"], "SH", "C Tier");
            EmotionsFunc([0.0, "Emotions Tier 5", "currency->emotions;d"], "SH", "D Tier");
            EmotionsFunc([0.0, "Emotions Tier 6", "currency->emotions;e"], "SH", "E Tier");

            // new tiers
            Conditional("?EmotionsNewTier") { }
            ElementAdder_Tier("?EmotionsNewTier", "EmotionsFunc");

            // hide tier
            Conditional("?EmotionsNewTiersHidden") { }
            ElementAdder_Tier("?EmotionsNewTiersHidden", null, true, "B:Distilled ;C:Stackable Currency", "OH");

            QuickUI([0.0, "Remaining Emotions", "currency->emotions;exhide"], "SH", [], "", [], "Remaining Emotions, which are not matched by any of the above rules, probably due to unmet filtering requirements.");
        }

        Section("Catalysts") {
            // generated via manualUtil_GenerateOptFileTierListCode(); util function!
            Function CatalystsFunc($s, $shd = "SHD", $text) { QuickUI($s, $shd, [], $text, ["B: Catalyst;C:Stackable Currency", "O"]); }
            TierListToolBar();

            CatalystsFunc([0.0, "Catalysts Tier 1", "currency->catalysts;s"], "SH", "S Tier");
            CatalystsFunc([0.0, "Catalysts Tier 2", "currency->catalysts;a"], "SH", "A Tier");
            CatalystsFunc([0.0, "Catalysts Tier 3", "currency->catalysts;b"], "SH", "B Tier");
            CatalystsFunc([0.0, "Catalysts Tier 4", "currency->catalysts;c"], "SH", "C Tier");
            CatalystsFunc([0.0, "Catalysts Tier 5", "currency->catalysts;d"], "SH", "D Tier");
            CatalystsFunc([0.0, "Catalysts Tier 6", "currency->catalysts;e"], "SH", "E Tier");

            // new tiers
            Conditional("?CatalystsNewTier") { }
            ElementAdder_Tier("?CatalystsNewTier", "CatalystsFunc");

            // hide tier
            Conditional("?CatalystsNewTiersHidden") { }
            ElementAdder_Tier("?CatalystsNewTiersHidden", null, true, "B: Catalyst;C:Stackable Currency", "OH");

            QuickUI([0.0, "Remaining Catalysts", "currency->catalysts;exhide"], "SH", [], "", [], "Remaining Catalysts, which are not matched by any of the above rules, probably due to unmet filtering requirements.");
        }

        Section("Essences") {
            // generated via manualUtil_GenerateOptFileTierListCode(); util function!
            Function EssencesFunc($s, $shd = "SHD", $text) { QuickUI($s, $shd, [], $text, ["B:Essence of ;C:Stackable Currency", "O"]); }
            TierListToolBar();

            EssencesFunc([0.0, "Essences Tier 1", "currency->essence;s"], "SH", "S Tier");
            EssencesFunc([0.0, "Essences Tier 2", "currency->essence;a"], "SH", "A Tier");
            EssencesFunc([0.0, "Essences Tier 3", "currency->essence;b"], "SH", "B Tier");
            EssencesFunc([0.0, "Essences Tier 4", "currency->essence;c"], "SH", "C Tier");
            EssencesFunc([0.0, "Essences Tier 5", "currency->essence;d"], "SH", "D Tier");
            EssencesFunc([0.0, "Essences Tier 6", "currency->essence;e"], "SH", "E Tier");

            // new tiers
            Conditional("?EssencesNewTier") { }
            ElementAdder_Tier("?EssencesNewTier", "EssencesFunc");

            // hide tier
            Conditional("?EssencesNewTiersHidden") { }
            ElementAdder_Tier("?EssencesNewTiersHidden", null, true, "B:Essence of ;C:Stackable Currency", "OH");

            QuickUI([0.0, "Remaining Essences", "currency->essence;exhide"], "SH", [], "", [], "Remaining Essences, which are not matched by any of the above rules, probably due to unmet filtering requirements.");
        }

        Section("Omen") {
            // generated via manualUtil_GenerateOptFileTierListCode(); util function!
            Function OmenFunc($s, $shd = "SHD", $text) { QuickUI($s, $shd, [], $text, ["C:Omen", "O"]); }
            TierListToolBar();

            OmenFunc([0.0, "Omen Tier 1", "currency->omen;s"], "SH", "S Tier");
            OmenFunc([0.0, "Omen Tier 2", "currency->omen;a"], "SH", "A Tier");
            OmenFunc([0.0, "Omen Tier 3", "currency->omen;b"], "SH", "B Tier");
            OmenFunc([0.0, "Omen Tier 4", "currency->omen;c"], "SH", "C Tier");
            OmenFunc([0.0, "Omen Tier 5", "currency->omen;d"], "SH", "D Tier");
            OmenFunc([0.0, "Omen Tier 6", "currency->omen;e"], "SH", "E Tier");

            // new tiers
            Conditional("?OmenNewTier") { }
            ElementAdder_Tier("?OmenNewTier", "OmenFunc");

            // hide tier
            Conditional("?OmenNewTiersHidden") { }
            ElementAdder_Tier("?OmenNewTiersHidden", null, true, "C:Omen", "OH");

            QuickUI([0.0, "Remaining Omen", "currency->omen;exhide"], "SH", [], "", [], "Remaining Omen, which are not matched by any of the above rules, probably due to unmet filtering requirements.");
        }
    }

    Section("Gold") {
        QuickUI([0.0, "Gold Tier 1", "gold;stack3"], "SH", ["StackSize", "AreaLevel"]);
        QuickUI([0.0, "Gold Tier 2", "gold;stack2"], "SH", ["StackSize", "AreaLevel"]);
        QuickUI([0.0, "Gold Tier 3", "gold;stack1"], "SH", ["StackSize", "AreaLevel"]);
        QuickUI([0.0, "Gold Tier 4", "gold;stack1lvl"], "SH", ["StackSize", "AreaLevel"]);
        QuickUI([0.0, "Gold Tier 5", "gold;any"], "SH", ["StackSize", "AreaLevel"]);
    }

    Section("Uniques") {
        // generated via manualUtil_GenerateOptFileTierListCode(); util function!
        Function UniquesFunc($s, $shd = "SHD", $text) { QuickUI($s, $shd, [], $text, ["GearPlusFlasks", "O"]); }
        TierListToolBar();

        Title("Predictable Tiers");
        UniquesFunc([0.0, "Uniques Tier 1", "uniques;t1"], "SH", "Tier 1");
        UniquesFunc([0.0, "Uniques Tier 2", "uniques;t2"], "SH", "Tier 2");
        UniquesFunc([0.0, "Uniques Tier 3", "uniques;t3"], "SH", "Tier 3");
        UniquesFunc([0.0, "Uniques EarlyLeague", "uniques;earlyleague"], "SH", "Early League");
        UniquesFunc([0.0, "Uniques Hideable", "uniques;hideable"], "SH", "Hideable");

        Title("High Variety Tiers");
        UniquesFunc([0.0, "Uniques MultiSpecial High", "uniques;multispecialhigh"], "SH", "Multi Special High");
        UniquesFunc([0.0, "Uniques MultiSpecial", "uniques;multispecial"], "SH", "Multi Special");
        UniquesFunc([0.0, "Uniques Tier 3 Boss", "uniques;t3boss"], "SH", "Tier 3 Boss");

        // new tiers
        Conditional("?UniquesNewTier") { }
        ElementAdder_Tier("?UniquesNewTier", "UniquesFunc");

        // hide tier
        Conditional("?UniquesNewTiersHidden") { }
    }

    Section("Chancing") {
        // generated via manualUtil_GenerateOptFileTierListCode(); util function!
        Function ChancingFunc($s, $shd = "SHD", $text) { QuickUI($s, $shd, [], $text, ["gearPlusFlasks", "OS"]); }
        TierListToolBar();

        // todo: descr.?

        ChancingFunc([0.0, "Chancing bases", "chancing;any"], "SH");

        // new tiers
        Conditional("?ChancingNewTier") { }
        ElementAdder_Tier("?ChancingNewTier", "ChancingFunc");

        // hide tier
        Conditional("?ChancingNewTiersHidden") { }
        ElementAdder_Tier("?ChancingNewTiersHidden", null, true, "gearPlusFlasks", "OH");
    }

    Section("Gems") {
        Title("Max Level");
        QuickUI([0.0, "Gems, Spirit, Level 20 ", "gems->uncut;spirit20"], "SH", ["AreaLevel", "ItemLevel"], "Spirit, Level 20");
        QuickUI([0.0, "Gems, Skill, Level 20 ", "gems->uncut;skill20"], "SH", ["AreaLevel", "ItemLevel"], "Skill, Level 20");
        QuickUI([0.0, "Gems, Spirit, Level 19 ", "gems->uncut;spirit19"], "SH", ["AreaLevel", "ItemLevel"], "Spirit, Level 19");
        QuickUI([0.0, "Gems, Skill, Level 19 ", "gems->uncut;skill19"], "SH", ["AreaLevel", "ItemLevel"], "Skill, Level 19");
        Title("Endgame");
        QuickUI([0.0, "Gems, Spirit, Endgame ", "gems->uncut;otherspiriteg"], "SH", ["AreaLevel", "ItemLevel"], "Spirit");
        QuickUI([0.0, "Gems, Skill, Endgame ", "gems->uncut;otherskilleg"], "SH", ["AreaLevel", "ItemLevel"], "Skill");
        QuickUI([0.0, "Gems, Support, Endgame ", "gems->uncut;othersupporteg"], "SH", ["AreaLevel", "ItemLevel"], "Support");
        Title("Campaign");
        QuickUI([0.0, "Gems, Spirit, Campaign ", "gems->uncut;spiritcampaign"], "SH", ["AreaLevel", "ItemLevel"], "Spirit");
        QuickUI([0.0, "Gems, Skill, Campaign ", "gems->uncut;skillcampaign"], "SH", ["AreaLevel", "ItemLevel"], "Skill");
        QuickUI([0.0, "Gems, Support, Campaign ", "gems->uncut;supportcampaign"], "SH", ["AreaLevel", "ItemLevel"], "Support");
        Title("Misc.");
        QuickUI([0.0, "Cut Gems ", "gems;any"], "SH", ["AreaLevel", "ItemLevel"]);
    }

    Section("Socketable") {

        Description("These items can be socketed into your gear or passive skill tree.");

        Section("Runes") {
            // generated via manualUtil_GenerateOptFileTierListCode(); util function!
            Function RunesFunc($s, $shd = "SHD", $text) { QuickUI($s, $shd, [], $text, ["C:Socketable;B: Rune", "O"]); }
            TierListToolBar();

            RunesFunc([0.0, "Runes Tier 1", "sockets->runes;t1"], "SH", "Tier 1");
            RunesFunc([0.0, "Runes Tier 2", "sockets->runes;t2"], "SH", "Tier 2");
            RunesFunc([0.0, "Runes Tier 3", "sockets->runes;t3"], "SH", "Tier 3");
            RunesFunc([0.0, "Runes Tier 4", "sockets->runes;t4"], "SH", "Tier 4");

            // new tiers
            Conditional("?RunesNewTier") { }
            ElementAdder_Tier("?RunesNewTier", "RunesFunc");

            // hide tier
            Conditional("?RunesNewTiersHidden") { }
            ElementAdder_Tier("?RunesNewTiersHidden", null, true, "C:Socketable;B: Rune", "OH");

            QuickUI([0.0, "Remaining Runes", "sockets->runes;exhide"], "SH", [], "", [], "Remaining Runes, which are not matched by any of the above rules, probably due to unmet filtering requirements.");
            QuickUI([0.0, "Runes during Campaign", "sockets->runes;levelingrunes"], "SH", []);
        }

        Section("Soul Cores") {
            // generated via manualUtil_GenerateOptFileTierListCode(); util function!
            Function SoulCoresFunc($s, $shd = "SHD", $text) { QuickUI($s, $shd, [], $text, ["C:Socketable;B:Soul Core of ", "O"]); }
            TierListToolBar();

            SoulCoresFunc([0.0, "Soul Cores Tier 1", "sockets->cores;s"], "SH", "S Tier");
            SoulCoresFunc([0.0, "Soul Cores Tier 2", "sockets->cores;a"], "SH", "A Tier");
            SoulCoresFunc([0.0, "Soul Cores Tier 3", "sockets->cores;b"], "SH", "B Tier");
            SoulCoresFunc([0.0, "Soul Cores Tier 4", "sockets->cores;c"], "SH", "C Tier");
            SoulCoresFunc([0.0, "Soul Cores Tier 5", "sockets->cores;d"], "SH", "D Tier");
            SoulCoresFunc([0.0, "Soul Cores Tier 6", "sockets->cores;e"], "SH", "E Tier");

            // new tiers
            Conditional("?SoulCoresNewTier") { }
            ElementAdder_Tier("?SoulCoresNewTier", "SoulCoresFunc");

            // hide tier
            Conditional("?SoulCoresNewTiersHidden") { }
            ElementAdder_Tier("?SoulCoresNewTiersHidden", null, true, "C:Socketable;B:Soul Core of ", "OH");

            QuickUI([0.0, "Remaining Soul Cores", "sockets->cores;exhide"], "SH", [], "", [], "Remaining Soul Cores, which are not matched by any of the above rules, probably due to unmet filtering requirements.");
        }

        Section("Jewels") {
            QuickUI([0.0, "Rare Jewels", "jewels->generic;anyrare"], "SH", ["JewelsPoe2", "ItemLevel"]);
            QuickUI([0.0, "Magic Jewels", "jewels->generic;anymagic"], "SH", ["JewelsPoe2", "ItemLevel"]);
            QuickUI([0.0, "Timeless Jewels", "jewels->generic;anytimeless"], "SH", ["Rarity", "JewelsPoe2", "ItemLevel"]);
            QuickUI([0.0, "Corrupted Jewels", "jewels->generic;anycorruptedmod"], "SH", ["Rarity", "JewelsPoe2", "ItemLevel"]);
            QuickUI([0.0, "5-Mod Jewels", "jewels->generic;any5modded"], "SH", ["JewelsPoe2", "ItemLevel"]);
            QuickUI([0.0, "Exotic Bases, very exotic", "exoticbases;superexoticbases"], "SH", ["JewelsPoe2", "ItemLevel"]);
        }
    }

    Section("Highlight specific bases", "Firefly") {

        Description("Quickly highlight bases by adding a custom rule! If you need more power and options, there's a lot more custom rules lower in the customizer");

        Function CondShowBaseQuick ($s, $shd = "SD", $title)
        {
            QuickUI($s, $shd, ["RarityU", "ItemLevel", "Corrupted", "Stats_All"], $title, ["rarityItems", "OS"]);
        }

        Conditional("?CQuickEndgameCustomRule1", ["c3.gear.chancing"]) { Show; BaseType == "Expert Dualstring Bow" "Primed Quiver"; SetBorderColor 200 0 0; SetBackgroundColor 60 0 0; SetFontSize 40; ItemLevel >= 68; Rarity Normal; Corrupted False; Mirrored False; }
        ElementAdder_Tier("?CQuickEndgameCustomRule1", "CondShowBaseQuick");
    }
}

Chapter() {
    SectionTitle("Endgame");

    Section("Add custom Show/Hide rule", "Firefly") {

        Description("Augment the filter with entirely new rules, such as 'hide all belts', 'highlight all gemini claws in a special color', 'hide all evasion type armors, gloves, shields, and boots' or 'show all corrupted rares'.", "Additional Endgame Rules", "This section is designed to be foolproof. It will have no effect on 6 links, leveling items, elder/shaper items, uniques, atlas bases (such as Steel Rings), abyss belts, fishing rods and other special bases. These sections frequently feature the 'strictness' dropdown menu. This tool defines how many rules are overwritten by your custom rules. I recommend playing around with the loot simulator, while switching back and forth to the customizer to get familiar with this section");

        Section("Highlight rares by Base", "Firefly") {
            Function CondShowBase ($s, $shd = "SD", $title)
            {
                QuickUI($s, $shd, ["CondTargetSelection", "ItemLevel", "DropLevel", "Height", "Rarity", "Width", "Stats_RareGear"], $title, ["Gear", "OS"]);
            }

            Description("Give specific BaseTypes more highlighting here.");

            Conditional("?CRareShowBases", ["c4.gear.crafting.all", "c6.rare.jewellery.all", "c6.rare.t1.all", "c6.rare.t2.all", "c6.rare.t3.all", "c6.rare.t4.all", "c6.rare.t5.all"]) { Show; SetBorderColor 200 0 0; SetBackgroundColor 60 0 0; SetFontSize 40; ItemLevel >= 65; Rarity Rare; }
            ElementAdder_Tier("?CRareShowBases", "CondShowBase");
        }

        Section("Highlight rares by Armour Type", "Firefly") {
            Description("Highlight gear by their type, like Evasion or Evasion-EnergyShield items.");

            Conditional("?CRareShowItemTypes", ["c4.gear.crafting.all", "c6.rare.jewellery.all", "c6.rare.t1.all", "c6.rare.t2.all", "c6.rare.t3.all", "c6.rare.t4.all", "c6.rare.t5.all"]) { Show; SetBorderColor 200 0 0; SetFontSize 40; SetBackgroundColor 60 0 0; ItemLevel >= 65; Rarity Rare; Class == "Body Armours" "Gloves" "Boots" "Helmets" "Shields" "Foci"; }

            Function CondShowType ($s, $shd = "SD", $title)
            {
                QuickUI($s, $shd, ["CondTargetSelection", "ItemType", "ArmourClasses", "Rarity", "ItemLevel", "Stats_RareGear"], $title);
            }

            ElementAdder_Tier("?CRareShowItemTypes", "CondShowType");
        }

        Section("Highlight rares by item slot", "Firefly") {

            Function CondShowClass ($s, $shd = "SD", $title)
            {
                QuickUI($s, $shd, ["CondTargetSelection", "AllGearClasses", "ItemLevel", "Rarity", "Height", "Width", "Stats_RareGear"], $title);
            }

            Description("Highlight specific item classes here.");

            Conditional("?CRareShowClasses", ["c4.gear.crafting.all", "c6.rare.jewellery.all", "c6.rare.t1.all", "c6.rare.t2.all", "c6.rare.t3.all", "c6.rare.t4.all", "c6.rare.t5.all"]) { Show; SetBorderColor 200 0 0; SetFontSize 40; SetBackgroundColor 60 0 0; ItemLevel >= 65; Rarity Rare; }
            ElementAdder_Tier("?CRareShowClasses", "CondShowClass");
        }

        Section("Hide rares by Base", "Annulment") {
            Function CondHideBase ($s, $shd = "HD", $title)
            {
                QuickUI($s, $shd, ["CondTargetSelection", "ItemLevel", "Rarity", "Height", "Width", "Stats_RareGear"], $title, ["Gear", "OS"]);
            }

            Conditional("?CRareHideBases", ["c4.gear.crafting.all", "c6.rare.jewellery.all", "c6.rare.t1.all", "c6.rare.t2.all", "c6.rare.t3.all", "c6.rare.t4.all", "c6.rare.t5.all"]) { Hide; SetFontSize 18; ItemLevel >= 65; Rarity Rare; }
            ElementAdder_Tier("?CRareHideBases", "CondHideBase");
        }

        Section("Hide rares by Armour Type", "Annulment") {
            Conditional("?CRareHideItemTypes", ["c4.gear.crafting.all", "c6.rare.jewellery.all", "c6.rare.t1.all", "c6.rare.t2.all", "c6.rare.t3.all", "c6.rare.t4.all", "c6.rare.t5.all"]) { Hide; ItemLevel >= 65; Rarity Rare; Class == "Body Armours" "Gloves" "Boots" "Helmets" "Shields" "Foci"; }

            Function CondHideType ($s, $shd = "HD", $title)
            {
                QuickUI($s, $shd, ["CondTargetSelection", "ItemType", "ArmourClasses", "Rarity", "ItemLevel", "Stats_RareGear"], $title);
            }

            ElementAdder_Tier("?CRareHideItemTypes", "CondHideType");
        }

        Section("Hide rares by item slot", "Annulment") {
            Function CondHideClass ($s, $shd = "HD", $title)
            {
                QuickUI($s, $shd, ["CondTargetSelection", "AllGearClasses", "ItemLevel", "Height", "Width", "Stats_RareGear"], $title);
            }

            Description("Hide uninteresting items, such as bows for melee characters or melee weapons for casters.");

            Conditional("?CRareHideClasses", ["c4.gear.crafting.all", "c6.rare.jewellery.all", "c6.rare.t1.all", "c6.rare.t2.all", "c6.rare.t3.all", "c6.rare.t4.all", "c6.rare.t5.all"]) { Hide; SetFontSize 18; ItemLevel >= 68; Rarity Rare; }
            ElementAdder_Tier("?CRareHideClasses", "CondHideClass");
        }
    }

    Section("Rares & Crafting") {

        Section("Decorators") {
            Title("Rares");
            QuickUI([0.0, "Endgame Rare Decorator, ilvl 80", "decorators->rareeg;ilvl80"], "SH", ["ItemLevel"], "ilvl 80");
            QuickUI([0.0, "Endgame Rare Decorator, large", "decorators->rareeg;largerares"], "SH", [], "large");
            QuickUI([0.0, "Endgame Rare Decorator, medium 1", "decorators->rareeg;mediumrares1"], "SH", [], "medium-sized");
            QuickUI([0.0, "Endgame Rare Decorator, medium 2", "decorators->rareeg;mediumrares2"], "SH", [], "medium-sized");
            QuickUI([0.0, "Endgame Rare Decorator, tiny", "decorators->rareeg;tinyrares"], "SH", [], "tiny");
            QuickUI([0.0, "Endgame Rare Decorator, ilvl 82", "decorators->rareeg;ilvl82"], "SH", ["ItemLevel"], "ilvl 82");
            QuickUI([0.0, "Endgame Rare Decorator, corrupted", "decorators->rareeg;corruptedrares"], "SH", [], "corrupted");
            QuickUI([0.0, "Endgame Rare Decorator, corrupted implicit", "decorators->rareeg;corruptedraresimplicit"], "SH", [], "corrupted implicit");
            QuickUI([0.0, "Endgame Rare Decorator, basic", "decorators->rareeg;basicraredecorator"], "SH", [], "default/global");
            QuickUI([0.0, "Endgame Rare Decorator, ilvl 81 caster", "decorators->rareeg;ilvl81caster"], "SH", ["ItemLevel"], "ilvl 81 caster");
            Title("Normal/Crafting");
            QuickUI([0.0, "Endgame Crafting Decorator, normal 82", "endgame->normalcraft->decorator;normal82"], "SH", ["ItemLevel", "Rarity"], "Ilvl 82");
            QuickUI([0.0, "Endgame Crafting Decorator, normal jewelery", "endgame->normalcraft->decorator;normaldecoratorjwlry"], "SH", ["Rarity"], "Jewellery");
            QuickUI([0.0, "Endgame Crafting Decorator, normal", "endgame->normalcraft->decorator;regulargeardecorator"], "SH", ["Rarity"], "Default/global");
            QuickUI([0.0, "Endgame Crafting Decorator, normal 80", "endgame->normalcraft->decorator;normal80"], "SH", ["ItemLevel", "Rarity"], "Ilvl 80");
            QuickUI([0.0, "Endgame Crafting Decorator, Quality 1", "endgame->normalcraft->decorator;qualitydecorator1"], "SH", ["Rarity", "Quality"], "Quality");
            QuickUI([0.0, "Endgame Crafting Decorator, Quality 2", "endgame->normalcraft->decorator;qualitydecorator2"], "SH", ["Rarity", "Quality"], "Quality");
        }

        Section("Jewellery") {
            Search Amu1(0.0, "Endgame Rare Amulets/Rings Tier 1", "rr->amuring;t1") { }
            Search Amu2(0.0, "Endgame Rare Amulets/Rings Tier 2", "rr->amuring;t2") { }
            Search Amu3(0.0, "Endgame Rare Amulets/Rings Tier 3", "rr->amuring;t3") { }
            Search Belt1(0.0, "Endgame Rare Belts Tier 1", "rr->belts;t1") { }
            Search Belt2(0.0, "Endgame Rare Belts Tier 2", "rr->belts;t2") { }
            Search Belt3(0.0, "Endgame Rare Belts Tier 3", "rr->belts;t3") { }

            Search Amu1(0.0, "Endgame Rings & Amulets T1 Ideal", "endgame->jewellery;ringamut1ideallevel") { }
            Search Amu2(0.0, "Endgame Rings & Amulets T2 Ideal", "endgame->jewellery;ringamut2ideallevel") { }
            Search Amu3(0.0, "Endgame Rings & Amulets T3 Ideal ", "endgame->jewellery;ringamut3ideallevel") { }
            Search Amu1(0.0, "Endgame Rings & Amulets T1 ", "endgame->jewellery;ringamut1") { }
            Search Amu2(0.0, "Endgame Rings & Amulets T2 ", "endgame->jewellery;ringamut2") { }
            Search Amu3(0.0, "Endgame Rings & Amulets T3 ", "endgame->jewellery;ringamut3") { }
            Search Belt1(0.0, "Endgame Belts T1", "endgame->jewellery;beltst1") { }
            Search Belt2(0.0, "Endgame Belts T2", "endgame->jewellery;beltst2") { }
            Search Belt3(0.0, "Endgame Belts T3", "endgame->jewellery;beltst3") { }
            Search Belt1(0.0, "Endgame Belts T1 Ideal", "endgame->jewellery;beltst1ideallevel") { }
            Search Belt2(0.0, "Endgame Belts T2 Ideal", "endgame->jewellery;beltst2ideallevel") { }
            Search Belt3(0.0, "Endgame Belts T3 Ideal", "endgame->jewellery;beltst3ideallevel") { }

            Search Amu1(0.0, "Endgame Rare Amulets/Rings Tier 1 EG", "rr->amuringeg;t1") { }
            Search Amu2(0.0, "Endgame Rare Amulets/Rings Tier 2 EG", "rr->amuringeg;t2") { }
            Search Amu3(0.0, "Endgame Rare Amulets/Rings Tier 3 EG", "rr->amuringeg;t3") { }
            Search Belt1(0.0, "Endgame Rare Belts Tier 1 EG", "rr->beltseg;t1") { }
            Search Belt2(0.0, "Endgame Rare Belts Tier 2 EG", "rr->beltseg;t2") { }
            Search Belt3(0.0, "Endgame Rare Belts Tier 3 EG", "rr->beltseg;t3") { }

            Title("Amulets & Rings");
            QuickUI(0, "SH", ["ItemLevel"], "Tier 1 rare");
            QuickUI(1, "SH", ["ItemLevel"], "Tier 2 rare");
            QuickUI(2, "SH", ["ItemLevel"], "Tier 3 rare");

            QuickUI(6, "SH", ["ItemLevel", "Rarity"], "Tier 1 ideal");
            QuickUI(7, "SH", ["ItemLevel", "Rarity"], "Tier 2 ideal");
            QuickUI(8, "SH", ["ItemLevel", "Rarity"], "Tier 3 ideal");

            QuickUI(9, "SH", ["ItemLevel", "Rarity"], "Tier 1 crafting");
            QuickUI(10, "SH", ["ItemLevel", "Rarity"], "Tier 2 crafting");
            QuickUI(11, "SH", ["ItemLevel", "Rarity"], "Tier 3 crafting");

            QuickUI(18, "SH", ["ItemLevel"], "Tier 1 endgame");
            QuickUI(19, "SH", ["ItemLevel"], "Tier 2 endgame");
            QuickUI(20, "SH", ["ItemLevel"], "Tier 3 endgame");
            Divider();
            Title("Belts");
            QuickUI(3, "SH", ["ItemLevel"], "Tier 1 rare");
            QuickUI(4, "SH", ["ItemLevel"], "Tier 2 rare");
            QuickUI(5, "SH", ["ItemLevel"], "Tier 3 rare");

            QuickUI(12, "SH", ["ItemLevel", "Rarity"], "Tier 1 crafting");
            QuickUI(13, "SH", ["ItemLevel", "Rarity"], "Tier 2 crafting");
            QuickUI(14, "SH", ["ItemLevel", "Rarity"], "Tier 3 crafting");

            QuickUI(15, "SH", ["ItemLevel", "Rarity"], "Tier 1 ideal");
            QuickUI(16, "SH", ["ItemLevel", "Rarity"], "Tier 2 ideal");
            QuickUI(17, "SH", ["ItemLevel", "Rarity"], "Tier 3 ideal");

            QuickUI(21, "SH", ["ItemLevel"], "Tier 1 endgame");
            QuickUI(22, "SH", ["ItemLevel"], "Tier 2 endgame");
            QuickUI(23, "SH", ["ItemLevel"], "Tier 3 endgame");

            Divider();
            Title("Tiering");
            BaseTypeMatrix(false, "Tier 1", Amu1, Belt1, "Tier 2", Amu2, Belt2, "Tier 3", Amu3, Belt3);
        }

        Section("Weapons & Armours") {
            Search R1(0.0, "Endgame Rares Tier 1 Top", "rr;t1_top") { }
            Search R1(0.0, "Endgame Rares Tier 1 Other", "rr;t1_other") { }
            Search R2(0.0, "Endgame Rares Tier 2 Top", "rr;t2_top") { }
            Search R2(0.0, "Endgame Rares Tier 2 A1", "rr;t2_a1") { }
            Search R2(0.0, "Endgame Rares Tier 2 Other", "rr;t2_other") { }
            Search R3(0.0, "Endgame Rares Tier 3 Top", "rr;t3_top") { }
            Search R3(0.0, "Endgame Rares Tier 3 A1", "rr;t3_a1") { }
            Search R3(0.0, "Endgame Rares Tier 3 A2", "rr;t3_a2") { }
            Search R3(0.0, "Endgame Rares Tier 3 Other", "rr;t3_other") { }
            Search R4(0.0, "Endgame Rares Tier 4 A1", "rr;t4_a1") { }
            Search R4(0.0, "Endgame Rares Tier 4 A2", "rr;t4_a2") { }
            Search R4(0.0, "Endgame Rares Tier 4 Other", "rr;t4_other") { }
            Search R5(0.0, "Endgame Rares Tier 5 A1", "rr;t5_a1") { }
            Search R5(0.0, "Endgame Rares Tier 5 A2", "rr;t5_a2") { }
            Search R5(0.0, "Endgame Rares Tier 5 Other", "rr;t5_other") { }

            Search R1(0.0, "Endgame Crafting Tier 1, ideal", "endgame->normalcraft->any;t1ideallevel") { }
            Search R1(0.0, "Endgame Crafting Tier 1", "endgame->normalcraft->any;t1") { }
            Search R2(0.0, "Endgame Crafting Tier 2, ideal", "endgame->normalcraft->any;t2ideallevel") { }
            Search R3(0.0, "Endgame Crafting Tier 3, ideal", "endgame->normalcraft->any;t3ideallevel") { }
            Search R2(0.0, "Endgame Crafting Tier 2, onLevel", "endgame->normalcraft->any;t2onlevel") { }
            Search R3(0.0, "Endgame Crafting Tier 3, onLevel", "endgame->normalcraft->any;t3onlevel") { }

            BaseTypeMatrix(true, "Tier 1", R1, "Tier 2", R2, "Tier 3", R3, "Tier 4", R4);

            Title("Rares");
            QuickUI(0, "SH", ["ItemLevel"]);
            QuickUI(1, "SH", ["ItemLevel"]);
            QuickUI(2, "SH", ["ItemLevel"]);
            QuickUI(3, "SH", ["ItemLevel"]);
            QuickUI(4, "SH", ["ItemLevel"]);
            QuickUI(5, "SH", ["ItemLevel"]);
            QuickUI(6, "SH", ["ItemLevel"]);
            QuickUI(7, "SH", ["ItemLevel"]);
            QuickUI(8, "SH", ["ItemLevel"]);
            QuickUI(9, "SH", ["ItemLevel"]);
            QuickUI(10, "SH", ["ItemLevel"]);
            QuickUI(11, "SH", ["ItemLevel"]);
            QuickUI(12, "SH", ["ItemLevel"]);
            QuickUI(13, "SH", ["ItemLevel"]);
            QuickUI(14, "SH", ["ItemLevel"]);

            Divider();
            Title("Crafting");
            QuickUI(15, "SH", ["ItemLevel", "Rarity"]);
            QuickUI(16, "SH", ["ItemLevel", "Rarity"]);
            QuickUI(17, "SH", ["ItemLevel", "Rarity"]);
            QuickUI(18, "SH", ["ItemLevel", "Rarity"]);
            QuickUI(19, "SH", ["ItemLevel", "Rarity"]);
            QuickUI(20, "SH", ["ItemLevel", "Rarity"]);
        }

        Section("Special Bases") {
            QuickUI([0.0, "Exotic Bases, high level", "exoticbases;commonexoticbaseshigh"], "SH", ["Rarity", "ItemLevel", "Identified"]);
            QuickUI([0.0, "Exotic Bases", "exoticbases;commonexoticbases"], "SH", ["Rarity", "ItemLevel", "Identified"]);
        }

        Section("Optional rules") {
            QuickUI([0.0, "Endgame Crafting, Caster", "endgame->normalcraft->any;minionsceptresoptional"], "SD", ["ItemLevel", "CasterWeaponClasses", "Rarity"], "", ["gear", "SAO"]);
        }
    }

    Section("Flasks & Charms") {
        Section("Flasks") {
            QuickUI([0.0, "Endgame Flasks, High Quality", "endgame->flasks;anyhighqualflask"], "SH", ["Quality", "RarityNM", "ItemLevel"], "High Quality", ["Flasks", "SOA"]);
            QuickUI([0.0, "Endgame Flasks, Some Quality", "endgame->flasks;anyqualflask"], "SH", ["Quality", "RarityNM", "ItemLevel"], "Some Quality", ["Flasks", "SOA"]);
            QuickUI([0.0, "Endgame Flasks, Quality, Top", "endgame->flasks;toplevelqualityflasks"], "SH", ["Quality", "RarityNM", "ItemLevel"], "Quality, Top", ["Flasks", "SOA"]);
            QuickUI([0.0, "Endgame Flasks, Top", "endgame->flasks;toplevelflasks"], "SH", ["Quality", "RarityNM", "ItemLevel"], "Top", ["Flasks", "SOA"]);
            QuickUI([0.0, "Endgame Flasks, Early, Life", "endgame->flasks;earlymappinglifemana"], "SDH", ["Quality", "RarityNM", "AreaLevel"], "Early, Life", ["Flasks", "SOA"]);
        }

        Section("Charms") {
            QuickUI([0.0, "Endgame Charms, High, T1", "endgame->charms;hight1charms"], "SH", ["RarityNM", "Quality", "ItemLevel", "charms"], "High, Tier 1");
            QuickUI([0.0, "Endgame Charms, High", "endgame->charms;highothercharms"], "SH", ["RarityNM", "Quality", "ItemLevel", "charms"], "High");
            QuickUI([0.0, "Endgame Charms, Quality, Top", "endgame->charms;topqualitycharms"], "SH", ["RarityNM", "Quality", "ItemLevel", "charms"], "Quality, Top");
            QuickUI([0.0, "Endgame Charms, Quality", "endgame->charms;qualitycharms"], "SH", ["RarityNM", "Quality", "ItemLevel", "charms"], "Quality");
            QuickUI([0.0, "Endgame Charms, Early", "endgame->charms;earlymappingcharms"], "SH", ["ItemLevel", "Quality", "RarityNM", "AreaLevel", "charms"], "Early");
            QuickUI([0.0, "Endgame Charms", "endgame->charms;anycharm"], "SH", ["RarityNM", "Quality", "ItemLevel", "charms"], "Remaining");
        }
    }

    Section("Waystones") {
        Section("Upgrade-Decorators") { // todo: merge into one?
            Description("These rules add highlighting to waystones that one one tier higher than the one you're currently in - without affecting if the item gets hidden or not.");
            QuickUI([0.0, "Waystone Upgrade Decorator Tier 16", "waystones;deco_wsup_t16"], "SH", [], "Tier 16");
            QuickUI([0.0, "Waystone Upgrade Decorator Tier 15", "waystones;deco_wsup_t15"], "SH", [], "Tier 15");
            QuickUI([0.0, "Waystone Upgrade Decorator Tier 14", "waystones;deco_wsup_t14"], "SH", [], "Tier 14");
            QuickUI([0.0, "Waystone Upgrade Decorator Tier 13", "waystones;deco_wsup_t13"], "SH", [], "Tier 13");
            QuickUI([0.0, "Waystone Upgrade Decorator Tier 12", "waystones;deco_wsup_t12"], "SH", [], "Tier 12");
            QuickUI([0.0, "Waystone Upgrade Decorator Tier 11", "waystones;deco_wsup_t11"], "SH", [], "Tier 11");
            QuickUI([0.0, "Waystone Upgrade Decorator Tier 10", "waystones;deco_wsup_t10"], "SH", [], "Tier 10");
            QuickUI([0.0, "Waystone Upgrade Decorator Tier 9", "waystones;deco_wsup_t9"], "SH", [], "Tier 9");
            QuickUI([0.0, "Waystone Upgrade Decorator Tier 8", "waystones;deco_wsup_t8"], "SH", [], "Tier 8");
            QuickUI([0.0, "Waystone Upgrade Decorator Tier 7", "waystones;deco_wsup_t7"], "SH", [], "Tier 7");
            QuickUI([0.0, "Waystone Upgrade Decorator Tier 6", "waystones;deco_wsup_t6"], "SH", [], "Tier 6");
            QuickUI([0.0, "Waystone Upgrade Decorator Tier 5", "waystones;deco_wsup_t5"], "SH", [], "Tier 5");
            QuickUI([0.0, "Waystone Upgrade Decorator Tier 4", "waystones;deco_wsup_t4"], "SH", [], "Tier 4");
            QuickUI([0.0, "Waystone Upgrade Decorator Tier 3", "waystones;deco_wsup_t3"], "SH", [], "Tier 3");
            QuickUI([0.0, "Waystone Upgrade Decorator Tier 2", "waystones;deco_wsup_t2"], "SH", [], "Tier 2");
            QuickUI([0.0, "Waystone Upgrade Decorator Tier 1", "waystones;deco_wsup_t1"], "SH", [], "Tier 1");
        }

        Section("Normal") {
            QuickUI([0.0, "Waystones Tier 16", "waystones;waystone_t16"], "SH", []);
            QuickUI([0.0, "Waystones Tier 15", "waystones;waystone_t15"], "SH", []);
            QuickUI([0.0, "Waystones Tier 14", "waystones;waystone_t14"], "SH", []);
            QuickUI([0.0, "Waystones Tier 13", "waystones;waystone_t13"], "SH", []);
            QuickUI([0.0, "Waystones Tier 12", "waystones;waystone_t12"], "SH", []);
            QuickUI([0.0, "Waystones Tier 11", "waystones;waystone_t11"], "SH", []);
            QuickUI([0.0, "Waystones Tier 10", "waystones;waystone_t10"], "SH", []);
            QuickUI([0.0, "Waystones Tier 9", "waystones;waystone_t9"], "SH", []);
            QuickUI([0.0, "Waystones Tier 8", "waystones;waystone_t8"], "SH", []);
            QuickUI([0.0, "Waystones Tier 7", "waystones;waystone_t7"], "SH", []);
            QuickUI([0.0, "Waystones Tier 6", "waystones;waystone_t6"], "SH", []);
            QuickUI([0.0, "Waystones Tier 5", "waystones;waystone_t5"], "SH", []);
            QuickUI([0.0, "Waystones Tier 4", "waystones;waystone_t4"], "SH", []);
            QuickUI([0.0, "Waystones Tier 3", "waystones;waystone_t3"], "SH", []);
            QuickUI([0.0, "Waystones Tier 2", "waystones;waystone_t2"], "SH", []);
            QuickUI([0.0, "Waystones Tier 1", "waystones;waystone_t1"], "SH", []);
        }

        Section("Misc.") {
            QuickUI([0.0, "Waystones, Enchanted", "waystones;enchanted"], "SH", ["WaystoneTier"], "Enchanted");
            QuickUI([0.0, "Waystones, Corrupted 8 Mods", "waystones;corrupted8"], "SDH", ["WaystoneTier"], "Corrupted 8 Mods");
            QuickUI([0.0, "Waystones, Corrupted", "waystone->hiders;corruptedmaphider"], "SDH", ["WaystoneTier"], "Corrupted");
            QuickUI([0.0, "Waystones, Mirrored", "waystone->hiders;mirroredmaphider"], "SDH", ["WaystoneTier"], "Mirrored");
            Title("Decorators");
            QuickUI([0.0, "Waystones, Decorator, Corrupted Mod", "waystones;deco_corruptedmod"], "SH", ["WaystoneTier"], "Corrupted Mod");
            QuickUI([0.0, "Waystones, Decorator, Top Tier", "waystones;decomap1"], "SH", ["WaystoneTier"], "Top Tier");
            QuickUI([0.0, "Waystones, Decorator, High Tier", "waystones;decomap2"], "SH", ["WaystoneTier"], "High Tier");
            QuickUI([0.0, "Waystones, Decorator, Mid Tier", "waystones;decomap3"], "SH", ["WaystoneTier"], "Mid Tier");
            QuickUI([0.0, "Waystones, Decorator, Low Tier", "waystones;decomap4"], "SH", ["WaystoneTier"], "Low Tier");

            QuickUI([0.0, "Waystones, Decorator, Overleveled 1", "waystones;decomap1overleveled"], "SH", ["WaystoneTier", "AreaLevel"], "Overleveled 1");
            QuickUI([0.0, "Waystones, Decorator, Overleveled 2", "waystones;decomap2overleveled"], "SH", ["WaystoneTier", "AreaLevel"], "Overleveled 2");
            QuickUI([0.0, "Waystones, Decorator, Overleveled 3", "waystones;decomap3overleveled"], "SH", ["WaystoneTier", "AreaLevel"], "Overleveled 3");
            QuickUI([0.0, "Waystones, Decorator, Overleveled 4", "waystones;decomap4overleveled"], "SH", ["WaystoneTier", "AreaLevel"], "Overleveled 4");
        }
    }

    Section("Map-Like Items") {
        Section("Map Fragments") {
            // generated via manualUtil_GenerateOptFileTierListCode(); util function!
            Function MapFragmentsFunc($s, $shd = "SHD", $text) { QuickUI($s, $shd, [], $text, ["MapFragAndTablets", "O"]); }
            TierListToolBar();

            MapFragmentsFunc([0.0, "Map Fragments Tier 1", "fragments->generic;s"], "SH", "S Tier");
            MapFragmentsFunc([0.0, "Map Fragments Tier 2", "fragments->generic;a"], "SH", "A Tier");
            MapFragmentsFunc([0.0, "Map Fragments Tier 3", "fragments->generic;b"], "SH", "B Tier");
            MapFragmentsFunc([0.0, "Map Fragments Tier 4", "fragments->generic;c"], "SH", "C Tier");
            MapFragmentsFunc([0.0, "Map Fragments Tier 5", "fragments->generic;d"], "SH", "D Tier");
            MapFragmentsFunc([0.0, "Map Fragments Tier 6", "fragments->generic;e"], "SH", "E Tier");

            // new tiers
            Conditional("?MapFragmentsNewTier") { }
            ElementAdder_Tier("?MapFragmentsNewTier", "MapFragmentsFunc");

            // hide tier
            Conditional("?MapFragmentsNewTiersHidden") { }
            ElementAdder_Tier("?MapFragmentsNewTiersHidden", null, true, "MapFragAndTablets", "OH");

            QuickUI([0.0, "Remaining Map Fragments", "fragments->generic;exhide"], "SH", [], "", [], "Remaining Map Fragments, which are not matched by any of the above rules, probably due to unmet filtering requirements.");
        }

        Section("Ascendancy Keys") {
            QuickUI([0.0, "Djinn Barya, Top Level", "miscmapitemsextra;trialkeysanctumtop"], "SH", ["ItemLevel"]);
            QuickUI([0.0, "Djinn Barya, High Level", "miscmapitemsextra;trialkeysanctumhigh"], "SH", ["ItemLevel"]);
            QuickUI([0.0, "Djinn Barya", "miscmapitemsextra;trialkeysanctumlow"], "SH", ["ItemLevel"]);
            Divider();
            QuickUI([0.0, "Ultimatum Reward", "miscmapitemsextra;trialkeyultimatumreward"], "SH", ["RarityU"]);
            QuickUI([0.0, "Ultimatum, Top Level", "miscmapitemsextra;trialkeyultimatumtop"], "SH", ["ItemLevel"]);
            QuickUI([0.0, "Ultimatum, High Level", "miscmapitemsextra;trialkeyultimatumhigh"], "SH", ["ItemLevel"]);
            QuickUI([0.0, "Ultimatum", "miscmapitemsextra;trialkeyultimatumlow"], "SH", ["ItemLevel"]);
        }

        Section("Splinters") {
            QuickUI([0.0, "Splinters Tier 1", "currency->splinter;t1"], "SH", ["StackSize"], "S Tier", ["B: Splinter;C:Stackable Currency", "OS"]);
            QuickUI([0.0, "Splinters Tier 2", "currency->splinter;t2"], "SH", ["StackSize"], "A Tier", ["B: Splinter;C:Stackable Currency", "OS"]);
            QuickUI([0.0, "Splinters Tier 3", "currency->splinter;t3"], "SH", ["StackSize"], "B Tier", ["B: Splinter;C:Stackable Currency", "OS"]);
            QuickUI([0.0, "Splinters Tier 4", "currency->splinter;t4"], "SH", ["StackSize"], "C Tier", ["B: Splinter;C:Stackable Currency", "OS"]);
            QuickUI([0.0, "Splinters Tier 5", "currency->splinter;t5"], "SH", ["StackSize"], "D Tier", ["B: Splinter;C:Stackable Currency", "OS"]);
        }

        Section("Misc.") {
            QuickUI([0.0, "Vault Keys", "miscmapitemsextra;relickeyssafe"], "SH", []);
            QuickUI([0.0, "Pinnacle Boss Keys", "maplike->special;superkeys"], "SH", []);
            QuickUI([0.0, "Logbooks", "maplike->special;logbooks"], "SH", []);
        }
    }

    Section("Endgame Salvagable Items") {
        Description("Certain items can be salvaged at an NPC in town in return for crafting currencies.");
        QuickUI([0.0, "Salvagable (High Quality, weapons)", "endgame->salvagable;quality2martialany"], "SH", ["Quality"]);
        QuickUI([0.0, "Salvagable (High Quality, caster)", "endgame->salvagable;quality2casterany"], "SH", ["Quality"]);
        QuickUI([0.0, "Salvagable (High Quality, armour)", "endgame->salvagable;quality2armorany"], "SH", ["Quality"]);
        QuickUI([0.0, "Salvagable (Quality, weapons)", "endgame->salvagable;qualitymartialany"], "SH", ["Quality"]);
        QuickUI([0.0, "Salvagable (Quality, caster)", "endgame->salvagable;qualitycasterany"], "SH", ["Quality"]);
        QuickUI([0.0, "Salvagable (Quality, armour)", "endgame->salvagable;qualityarmorany"], "SH", ["Quality"]);
        QuickUI([0.0, "Salvagable (Sockets, large)", "endgame->salvagable;socketslarge"], "SH", ["Sockets"]);
        QuickUI([0.0, "Salvagable (Sockets, small)", "endgame->salvagable;socketssmall"], "SH", ["Sockets"]);
        Divider();
        Title("Rares");
        QuickUI([0.0, "Salvagable (Rare, High Quality, weapons)", "rare->salvagable;quality2martialany"], "SH", ["Quality"]);
        QuickUI([0.0, "Salvagable (Rare, High Quality, caster)", "rare->salvagable;quality2casterany"], "SH", ["Quality"]);
        QuickUI([0.0, "Salvagable (Rare, High Quality, armour)", "rare->salvagable;quality2armorany"], "SH", ["Quality"]);
        QuickUI([0.0, "Salvagable (Rare, Quality, weapons)", "rare->salvagable;qualitymartialany"], "SH", ["Quality"]);
        QuickUI([0.0, "Salvagable (Rare, Quality, caster)", "rare->salvagable;qualitycasterany"], "SH", ["Quality"]);
        QuickUI([0.0, "Salvagable (Rare, Quality, armour)", "rare->salvagable;qualityarmorany"], "SH", ["Quality"]);
        QuickUI([0.0, "Salvagable (Rare, Sockets, large)", "rare->salvagable;socketslarge"], "SH", ["Sockets"]);
        QuickUI([0.0, "Salvagable (Rare, Sockets, small)", "rare->salvagable;socketssmall"], "SH", ["Sockets"]);
    }
}

Chapter() {
    SectionTitle("Campaign");

    Section("Add custom Show/Hide rules (campaign)", "Firefly") {

        Description("Augment the filter with entirely new rules, such as 'only show AR and AR/EV armors', 'highlight all rare maces' and 'hide all wands'", "Additional Campaign Rules", "This section is designed to be foolproof. It will have no effect on 6Llinks, endgame items, elder/shaper items, uniques etc), abyss belts, fishing rods and other special bases. These sections frequently feature the 'strictness' dropdown menu. This tool defines ho w many rules are overwritten by your custom rules. I recommend playing around with the loot simulator, while switching back and forth to the customizer to get familiar with this section");

        Section("Highlight items by Base", "Firefly") {
            Function CondShowBase_Lvl ($s, $shd = "SD", $title)
            {
                QuickUI($s, $shd, ["CondTargetSelection", "Rarity", "Stats_RareGear"], $title, ["Gear", "SO"]);
            }

            Conditional("?CLevelShowBases", ["c21.leveling.rares.armors", "c21.leveling.rares.low", "c21.leveling.normalmagic", "c20.leveling.salvagable.all"]) { Show; SetBackgroundColor 60 0 0; Rarity Normal Magic Rare; SetBorderColor 200 0 0; SetFontSize 40; }
            ElementAdder_Tier("?CLevelShowBases", "CondShowBase_Lvl");
        }

        Section("Highlight items by Armour Type", "Firefly") {
            Conditional("?CLevelShowType", ["c21.leveling.rares.armors", "c21.leveling.rares.low", "c21.leveling.normalmagic", "c20.leveling.salvagable.all"]) { Show; SetBackgroundColor 60 0 0; Rarity Normal Magic Rare; SetBorderColor 200 0 0; SetFontSize 40; Class == "Body Armours" "Gloves" "Boots" "Helmets" "Shields" "Foci"; }
            Function CondShowTypeLVL ($s, $shd = "SD", $title)
            {
                QuickUI($s, $shd, ["CondTargetSelection", "Rarity", "ItemType", "ArmourClasses", "Stats_RareGear"], $title);
            }

            ElementAdder_Tier("?CLevelShowType", "CondShowTypeLVL");
        }

        Section("Highlight items by slot", "Firefly") {
            Function CondShowClass_Lvl ($s, $shd = "SD", $title)
            {
                QuickUI($s, $shd, ["CondTargetSelection", "Rarity", "AllGearClasses", "Stats_RareGear"], $title);
            }

            Conditional("?CLevelShowClasses", ["c21.leveling.rares.armors", "c21.leveling.rares.low", "c21.leveling.normalmagic", "c20.leveling.salvagable.all"]) { Show; SetBackgroundColor 60 0 0; Rarity Normal Magic Rare; SetBorderColor 200 0 0; SetFontSize 40; }
            ElementAdder_Tier("?CLevelShowClasses", "CondShowClass_Lvl");
        }

        Section("Hide items by Armour Type", "Annulment") {
            Conditional("?CLevelHideType", ["c21.leveling.rares.armors", "c21.leveling.rares.low", "c21.leveling.normalmagic", "c20.leveling.salvagable.all"]) { Hide; Rarity Normal Magic Rare; Class == "Body Armours" "Gloves" "Boots" "Helmets" "Shields" "Foci"; }

            Function CondHideTypeLVL ($s, $shd = "HD", $title)
            {
                QuickUI($s, $shd, ["CondTargetSelection", "ItemType", "Rarity", "ArmourClasses", "Stats_RareGear"], $title);
            }

            ElementAdder_Tier("?CLevelHideType", "CondHideTypeLVL");
        }

        Section("Hide items by slot", "Annulment") {
            Function CondHideClass_Lvl ($s, $shd = "HD", $title)
            {
                QuickUI($s, $shd, ["CondTargetSelection", "Rarity", "AllGearClasses", "Stats_RareGear"], $title);
            }

            Conditional("?CLevelHideClasses", ["c21.leveling.rares.armors", "c21.leveling.rares.low", "c21.leveling.normalmagic", "c20.leveling.salvagable.all"]) { Hide; Rarity Normal Magic Rare; SetFontSize 18; }
            ElementAdder_Tier("?CLevelHideClasses", "CondHideClass_Lvl");
        }
    }

    Section("Campaign Flasks & Charms") {
        Section("Flasks") {
            QuickUI([0.0, "Campaign Flasks (Quality, max)", "leveling->flasks->quality;max"], "SH", ["Quality", "RarityNM", "AreaLevel"], "Quality, max");
            QuickUI([0.0, "Campaign Flasks (Quality, high)", "leveling->flasks->quality;high"], "SH", ["Quality", "RarityNM", "AreaLevel"], "Quality, high");
            QuickUI([0.0, "Campaign Flasks (Quality, low)", "leveling->flasks->quality;any"], "SH", ["Quality", "RarityNM", "AreaLevel"], "Quality, low");

            Description("The following two rules combine 30 different rules that will highlight the best available flasks during your Campaign progress.");

            Search S_life(0.0, "Campaign Life Flask Progression 1", "leveling->flasks->life;t1") { }
            Search S_life(0.0, "Campaign Life Flask Progression 2", "leveling->flasks->life;t2") { }
            Search S_life(0.0, "Campaign Life Flask Progression 3", "leveling->flasks->life;t3") { }
            Search S_life(0.0, "Campaign Life Flask Progression 4", "leveling->flasks->life;t4") { }
            Search S_life(0.0, "Campaign Life Flask Progression 5", "leveling->flasks->life;t5") { }
            Search S_life(0.0, "Campaign Life Flask Progression 6", "leveling->flasks->life;t6") { }
            Search S_life(0.0, "Campaign Life Flask Progression 7", "leveling->flasks->life;t7") { }
            Search S_life(0.0, "Campaign Life Flask Progression 8", "leveling->flasks->life;t8") { }

            Search S_mana(0.0, "Campaign Mana Flask Progression 1", "leveling->flasks->mana;t1") { }
            Search S_mana(0.0, "Campaign Mana Flask Progression 2", "leveling->flasks->mana;t2") { }
            Search S_mana(0.0, "Campaign Mana Flask Progression 3", "leveling->flasks->mana;t3") { }
            Search S_mana(0.0, "Campaign Mana Flask Progression 4", "leveling->flasks->mana;t4") { }
            Search S_mana(0.0, "Campaign Mana Flask Progression 5", "leveling->flasks->mana;t5") { }
            Search S_mana(0.0, "Campaign Mana Flask Progression 6", "leveling->flasks->mana;t6") { }
            Search S_mana(0.0, "Campaign Mana Flask Progression 7", "leveling->flasks->mana;t7") { }
            Search S_mana(0.0, "Campaign Mana Flask Progression 8", "leveling->flasks->mana;t8") { }
            QuickUI(S_life, "SH", ["Quality", "RarityNM"], "Life Flask Progression");
            QuickUI(S_mana, "SH", ["Quality", "RarityNM"], "Mana Flask Progression");
        }

        Section("Charms") {
            QuickUI([0.0, "Campaign Charms, Best", "leveling->charms;selected"], "SH", ["charms", "RarityNM", "ItemLevel"]);
            QuickUI([0.0, "Campaign Charms", "leveling->charms;any"], "SH", ["charms", "RarityNM", "ItemLevel"]);
        }
    }

    Section("Normal & Magic Item Progression", "Siege Axe") {
        Description("Item progressions highlight the best available class (such as only 1h Mace) available on your level. Select up to 3 types below and we'll create the progression in just 1 click.");

        Function ItemProgUI($s) { QuickUI($s, "", ["Rarity", "AreaLevel", "Corrupted", "Progression", "Quality"], "Item Progression Editor"); }

        Conditional("?LvlItemProgression1", ["c21.leveling.magicvendor.all"], "notSimpleBuilder") { Show; Rarity Normal Magic; SetBorderColor 200 0 0; SetFontSize 38; }
        ItemProgUI("?LvlItemProgression1");

        Conditional("?LvlItemProgression2", ["c21.leveling.magicvendor.all"], "notSimpleBuilder") { Show; Rarity Normal Magic; SetBorderColor 200 0 0; SetFontSize 38; }
        ItemProgUI("?LvlItemProgression2");

        Conditional("?LvlItemProgression3", ["c21.leveling.magicvendor.all"], "notSimpleBuilder") { Show; Rarity Normal Magic; SetBorderColor 200 0 0; SetFontSize 38; }
        ItemProgUI("?LvlItemProgression3");
    }

    Section("Campaign Gear") {
        Section("Decorators") {
            Title("Rare Items");
            QuickUI([0.0, "Campaign Decorator: Large Rares", "leveling->decorators->rare;largerares"], "SH", [], "Large");
            QuickUI([0.0, "Campaign Decorator: Medium Rares 1", "leveling->decorators->rare;mediumrares1"], "SH", [], "Medium");
            QuickUI([0.0, "Campaign Decorator: Medium Rares 2", "leveling->decorators->rare;mediumrares2"], "SH", [], "Medium");
            QuickUI([0.0, "Campaign Decorator: Tiny Rares", "leveling->decorators->rare;tinyrares"], "SH", [], "Tiny");
            Title("Magic Items");
            QuickUI([0.0, "Campaign Decorator: Magic, medium 1", "decorators->leveling->magic;medium1"], "SH", [], "medium");
            QuickUI([0.0, "Campaign Decorator: Magic, medium 2", "decorators->leveling->magic;medium2"], "SH", [], "medium");
            QuickUI([0.0, "Campaign Decorator: Magic, tiny", "decorators->leveling->magic;tiny"], "SH", [], "Magic, tiny");
            QuickUI([0.0, "Campaign Decorator: Magic, early", "decorators->leveling->magic;noticeearly"], "SH", [], "early");
        }

        Section("Rare Jewellery & Armour") {
            QuickUI([0.0, "Campaign Rares, Jewellery", "leveling->rare->universal;jewellery"], "SH", []);

            QuickUI([0.0, "Campaign Rares, Armour", "leveling->rare->armours;ar"], "SH", ["AreaLevel"]);
            QuickUI([0.0, "Campaign Rares, Evasion", "leveling->rare->armours;ev"], "SH", ["AreaLevel"]);
            QuickUI([0.0, "Campaign Rares, Energy Shield", "leveling->rare->armours;es"], "SH", ["AreaLevel"]);
            QuickUI([0.0, "Campaign Rares, Arm-Ev", "leveling->rare->armours;arev"], "SH", ["AreaLevel"]);
            QuickUI([0.0, "Campaign Rares, Arm-ES", "leveling->rare->armours;ares"], "SH", ["AreaLevel"]);
            QuickUI([0.0, "Campaign Rares, Eva-ES", "leveling->rare->armours;eves"], "SH", ["AreaLevel"]);
        }

        Section("Rare Weapons") {
            QuickUI([0.0, "Campaign Rares, Wands", "leveling->rare->weapons;wands"], "SH", ["AreaLevel"]);
            QuickUI([0.0, "Campaign Rares, Scaptres", "leveling->rare->weapons;sceptres"], "SH", ["AreaLevel"]);
            QuickUI([0.0, "Campaign Rares, Staves", "leveling->rare->weapons;staves"], "SH", ["AreaLevel"]);
            QuickUI([0.0, "Campaign Rares, Archer", "leveling->rare->weapons;bowsquivers"], "SH", ["AreaLevel"]);
            QuickUI([0.0, "Campaign Rares, Crossbow", "leveling->rare->weapons;crossbows"], "SH", ["AreaLevel"]);
            QuickUI([0.0, "Campaign Rares, 1H Maces", "leveling->rare->weapons;onehandmaces"], "SH", ["AreaLevel"]);
            QuickUI([0.0, "Campaign Rares, 2H Maces", "leveling->rare->weapons;twohandmaces"], "SH", ["AreaLevel"]);
            QuickUI([0.0, "Campaign Rares, Quarterstaves", "leveling->rare->weapons;quarterstaves"], "SH", ["AreaLevel"]);
        }

        Section("Magic & Normal Jewellery & Armour") {
            QuickUI([0.0, "Campaign Magic & Normal, Jewellery", "leveling->normalmagicremarkable;jewellery"], "SH", [], "Jewellery");

            QuickUI([0.0, "Campaign Magic & Normal, Armour", "leveling->normalmagic->armours;ar"], "SH", ["AreaLevel"], "Armour");
            QuickUI([0.0, "Campaign Magic & Normal, Evasion", "leveling->normalmagic->armours;ev"], "SH", ["AreaLevel"], "Evasion");
            QuickUI([0.0, "Campaign Magic & Normal, Energy Shield", "leveling->normalmagic->armours;es"], "SH", ["AreaLevel"], "Energy Shield");
            QuickUI([0.0, "Campaign Magic & Normal, Arm-Eva", "leveling->normalmagic->armours;arev"], "SH", ["AreaLevel"], "Armour-Evasion");
            QuickUI([0.0, "Campaign Magic & Normal, Arm-ES", "leveling->normalmagic->armours;ares"], "SH", ["AreaLevel"], "Armour-ES");
            QuickUI([0.0, "Campaign Magic & Normal, Eva-ES", "leveling->normalmagic->armours;eves"], "SH", ["AreaLevel"], "Evasion-ES");
        }

        Section("Magic & Normal Weapons") {
            QuickUI([0.0, "Campaign Magic & Normal, Wands", "leveling->normalmagic->weapons;wands"], "SH", ["AreaLevel"], "Wands");
            QuickUI([0.0, "Campaign Magic & Normal, Sceptres", "leveling->normalmagic->weapons;sceptres"], "SH", ["AreaLevel"], "Sceptres");
            QuickUI([0.0, "Campaign Magic & Normal, Staves", "leveling->normalmagic->weapons;staves"], "SH", ["AreaLevel"], "Staves");
            QuickUI([0.0, "Campaign Magic & Normal, Archer", "leveling->normalmagic->weapons;bowsquivers"], "SH", ["AreaLevel"], "Archer");
            QuickUI([0.0, "Campaign Magic & Normal, Crossbow", "leveling->normalmagic->weapons;crossbows"], "SH", ["AreaLevel"], "Crossbow");
            QuickUI([0.0, "Campaign Magic & Normal, 1H Maces", "leveling->normalmagic->weapons;onehandmaces"], "SH", ["AreaLevel"], "1H Maces");
            QuickUI([0.0, "Campaign Magic & Normal, 2H Maces", "leveling->normalmagic->weapons;twohandmaces"], "SH", ["AreaLevel"], "2H Maces");
            QuickUI([0.0, "Campaign Magic & Normal, Quarterstaves", "leveling->normalmagic->weapons;quarterstaves"], "SH", ["AreaLevel"], "Quarterstaves");
        }

        Section("Misc.") {
            QuickUI([0.0, "Campaign First Areas", "leveling->firstlevels;firstareas"], "SH", ["AreaLevel", "Rarity"]);
            QuickUI([0.0, "Campaign First Area", "leveling->firstlevels;firstarea"], "SH", ["AreaLevel", "Rarity"]);
            QuickUI([0.0, "Campaign Early Boots", "leveling->normalmagicremarkable;earlyboots"], "SH", ["AreaLevel", "Rarity"]);

            QuickUI([0.0, "Campaign Magic, Remaining", "leveling->magic->remaining;rest"], "SH", ["AreaLevel"]);
            QuickUI([0.0, "Campaign Magic, Act 2", "leveling->magic->remaining;act2"], "SH", ["AreaLevel"]);
            QuickUI([0.0, "Campaign Magic, Act 1", "leveling->magic->remaining;act1"], "SH", ["AreaLevel"]);

            QuickUI([0.0, "Campaign Rares, Early", "leveling->rare->armours;anythingearly"], "SH", ["AreaLevel"]);
            QuickUI([0.0, "Campaign Rares, Remaining", "leveling->rare->remaining;any"], "SH", ["AreaLevel"]);
        }
    }

    Section("Campaign Salvagable Items") {
        QuickUI([0.0, "Campaign Salvable (High Quality, weapons)", "leveling->salvagable;quality2martialany"], "SH", ["Quality", "ItemLevel"], "High Quality, weapons");
        QuickUI([0.0, "Campaign Salvable (High Quality, caster)", "leveling->salvagable;quality2casterany"], "SH", ["Quality", "ItemLevel"], "High Quality, caster");
        QuickUI([0.0, "Campaign Salvable (High Quality, armour)", "leveling->salvagable;quality2armorany"], "SH", ["Quality", "ItemLevel"], "High Quality, armour");
        QuickUI([0.0, "Campaign Salvable (Quality, weapons)", "leveling->salvagable;qualitymartialany"], "SH", ["Quality", "ItemLevel"], "Quality, weapons");
        QuickUI([0.0, "Campaign Salvable (Quality, caster)", "leveling->salvagable;qualitycasterany"], "SH", ["Quality", "ItemLevel"], "Quality, caster");
        QuickUI([0.0, "Campaign Salvable (Quality, armour)", "leveling->salvagable;qualityarmorany"], "SH", ["Quality", "ItemLevel"], "Quality, armour");
        QuickUI([0.0, "Campaign Salvable (Sockets, large)", "leveling->salvagable;socketslarge"], "SH", ["Sockets", "ItemLevel"], "Sockets, large");
        QuickUI([0.0, "Campaign Salvable (Sockets, small)", "leveling->salvagable;socketssmall"], "SH", ["Sockets", "ItemLevel"], "Sockets, small");
    }
}

Chapter() {
    SectionTitle("Misc.");

    Section("Add additional Show/Hide rules", "Firefly") {
        Description("Use this section to add exotic rules and exception. This section is NOT foolproof, you can accidentally hide valuable items by misusing it. With great power comes great responsibility.");
        Function CondShowBase ($s, $shd = "SHD", $title)
        {
            QuickUI($s, $shd, ["CondTargetSelection", "ItemLevel", "Stats_All"], $title, ["all", "OS"]);
        }

        Function CondShowClass ($s, $shd = "SHD", $title)
        {
            QuickUI($s, $shd, ["CondTargetSelection", "AllGearClassesPlusFlaskJewel", "ItemLevel", "Stats_All"], $title, ["all", "SOA"]);
        }

        Function CondShowArmourType ($s, $shd = "SHD", $title)
        {
            QuickUI($s, $shd, ["CondTargetSelection", "ItemType", "RarityU", "ArmourClasses", "ItemLevel", "Stats_All"], $title);
        }

        Section("Add Basetype-Based Rules", "Firefly")
        {
            Description("Give specific BaseTypes more highlighting here.");
            Conditional("?CUniversalCustomRuleB", ["c3.gear.chancing", "c0.start", "c4.gear.salvagable", "c7.jewels.generic.all", "c11.uniques.all", "c20.leveling.salvagable.all"]) { Show; SetBackgroundColor 60 0 0; SetBorderColor 200 0 0; SetFontSize 40; ItemLevel >= 65; }
            ElementAdder_Tier("?CUniversalCustomRuleB", "CondShowBase");
        }

        Section("Add Class-Based Rules", "Firefly")
        {
            Description("Give specific classes more highlighting here.");
            Conditional("?CUniversalCustomRuleC", ["c3.gear.chancing", "c0.start", "c4.gear.salvagable", "c7.jewels.generic.all", "c11.uniques.all", "c20.leveling.salvagable.all"]) { Show; SetBackgroundColor 60 0 0; SetBorderColor 200 0 0; SetFontSize 40; ItemLevel >= 65; Rarity Normal Magic; }
            ElementAdder_Tier("?CUniversalCustomRuleC", "CondShowClass");
        }

        Section("Add Armour-Type-Based Rules", "Firefly")
        {
            Conditional("?CUniversalCustomRuleArmourType", ["c3.gear.chancing", "c0.start", "c4.gear.salvagable", "c7.jewels.generic.all", "c11.uniques.all", "c20.leveling.salvagable.all"]) { Show; SetBackgroundColor 60 0 0; SetBorderColor 200 0 0; SetFontSize 40; ItemLevel >= 65; Rarity Normal Magic; Class == "Body Armours" "Gloves" "Boots" "Helmets" "Shields"; }
            ElementAdder_Tier("?CUniversalCustomRuleArmourType", "CondShowArmourType");
        }
    }

    Section("Special Rules") {
        QuickUI([0.0, "Quest-Like Items", "questlikeexception;questlike"], "SH", []);
        QuickUI([0.0, "Quest Items", "questlikeexception;questitems"], "SH", []);
        QuickUI([0.0, "Fishing Rod", "artifact;fishingrod"], "SH", []);
        QuickUI([0.0, "Relics", "relics->generic;any"], "SH", []);
        QuickUI([0.0, "Unique Exception: Sekhema Ring", "uniques;sekhemaring"], "SH");
        QuickUI([0.0, "Corrupted Uniques", "uniques;corrupteduniques"], "SH");
        QuickUI([0.0, "Over-Quality Items", "exotic->others;overqualityany"], "SH", ["Quality"]);

        Divider();

        QuickUI([0.0, "Strictness Show-Layers, All", "lowstrictnessshowlayer;anyfinal"], "SH", []); // todo
        QuickUI([0.0, "Strictness Show-Layers, Normal/Magic", "lowstrictnessshowlayer;normalmagicendgameany"], "SH", []); // todo
        QuickUI([0.0, "Strictness Show-Layers, Rares", "lowstrictnessshowlayer;raresendgameany"], "SH", []); // todo
        QuickUI([0.0, "Campaign Magic, hide large", "leveling->magic->remaining;largemagicblocker"], "SDH", []); // todo
        QuickUI([0.0, "Campaign Magic, hide medium", "leveling->magic->remaining;mediummagicblocker"], "SDH", []); // todo
        Divider();
        Title("Error Rules");
        QuickUI([0.0, "Error Currency", "currency;restex"], "SH", []);
        QuickUI([0.0, "Error Misc", "anyremaining;restex"], "SH", []);
        QuickUI([0.0, "Error Emotions", "currency->emotions;restex"], "SH", []);
        QuickUI([0.0, "Error Essences", "currency->essence;restex"], "SH", []);
        QuickUI([0.0, "Error Omen", "currency->omen;restex"], "SH", []);
        QuickUI([0.0, "Error Catalysts", "currency->catalysts;restex"], "SH", []);
        QuickUI([0.0, "Error Fragments", "fragments->generic;restex"], "SH", []);
        QuickUI([0.0, "Error Waystones", "waystones;restex"], "SH", []);
        QuickUI([0.0, "Error Uniques", "uniques;restex"], "SH", []);
        QuickUI([0.0, "Error Runes", "sockets->runes;restex"], "SH", []);
        QuickUI([0.0, "Error Soul Cores", "sockets->cores;restex"], "SH", []);
    }
}
