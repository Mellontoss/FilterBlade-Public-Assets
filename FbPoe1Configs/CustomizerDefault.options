//==================================================================================================
// NeverSink's Filter OptionFile
//==================================================================================================
// AUTHOR:  NeverSink & Tobnac
// TYPE:    Default
//===================================================================================================

// Customizer/OptionFile Info
Info_OptionVersion("1.1.4n");
Info_OptionAuthor("NeverSink & Tobnac");

//===================================================================================================
// LIVE INTEGRITY TESTS
//===================================================================================================

// Severeness:
// 1 - only used for waypoints
// 2 - only may not be found in the customizer
// 3 - may not be edited
// These are "defensive" searches. They define rules that should never get hit. If we hit those, something is wrong.
DefensiveSearch S10(1, "skip", "hidelayer;final"){ DropLevel 1; ItemLevel 60; Rarity Normal; SocketGroup "R"; };
DefensiveSearch S10(1, "skip", "hidelayer;normalmagicendgame"){ DropLevel 1; ItemLevel 99; Rarity Normal; SocketGroup "R"; };
DefensiveSearch S10(1, "skip", "hidelayer;raresendgame"){ DropLevel 1; ItemLevel 75; Rarity Rare; SocketGroup "R"; };

//===================================================================================================
// VENDOR RECIPES
//===================================================================================================

Chapter() {

    SectionTitle("General");

    Section("Vendor Recipes", "Chromatic") {

        Title("Currency Generating Recipes");

        Section("Chromatic Orb", "Chromatic") {
            Description("A chromatic orb is acquired by selling any Red-Green-Blue socket group item. The colors need to be linked, further links do not matter. Hover over the scroll left for more info.", "'RGB' items", "The size of the item or its other stats don't matter. It's more efficient to pick up small RGB-items. Note that the order of colors or any additional sockets or links don't matter.");

            Search S0(1.0, "RGB Chromatic recipe EG small2x2", "endgamergb;rgbsmall1") {}
            Search S1(1.0, "RGB Chromatic recipe EG small1x3", "endgamergb;rgbsmall2") {}
            Search S2(1.0, "RGB Chromatic recipe EG medium", "endgamergb;rgbmedium") {}
            Search S3(1.0, "RGB Chromatic recipe EG large", "endgamergb;rgblarge") {}

            Search S0(1.0, "RGB Chromatic recipe rare small 1", "rr;rgbsmall1") {}
            Search S1(1.0, "RGB Chromatic recipe rare small 2", "rr;rgbsmall2") {}
            Search S2(1.0, "RGB Chromatic recipe rare medium", "rr;rgbmedium") {}
            Search S3(1.0, "RGB Chromatic recipe rare large", "rr;rgblarge") {}

            QuickUI(S0, "SH", ["AreaLevel"], "Endgame: Small (2x2)");
            QuickUI(S1, "SH", ["AreaLevel", "Height"], "Endgame: Small (1x3, 1x4)");
            QuickUI(S2, "SH", ["AreaLevel"], "Endgame: Medium-sized (2x3)");
            QuickUI(S3, "SH", ["AreaLevel"], "Endgame: Large (2x4)");

            Box() { Title("Chromatic Recipe: Campaign");  Description("The campaign chromatic recipe can be changed in the 'Campaign -> Colors and Links' section");}
        }

        Section("Gemcutter's Prism", "GCP") {
            Description("A Gemcutter's Prism is acquired by selling a gem with 20% quality or gems with a combined total of 40% quality to a vendor.");

            QuickUI([0.0, "Gemcutter recipe high quality gems", "gems-generic;qt2"], "SD", ["Quality", "AreaLevel"]);
            QuickUI([0.0, "Gemcutter recipe mid quality gems", "gems-generic;qt3"], "SD", ["Quality", "AreaLevel"]);
            QuickUI([0.0, "Gemcutter recipe low quality gems", "gems-generic;qt4"], "SD", ["Quality", "AreaLevel"]);
        }
        
        Section("Jeweller Orbs", "Jeweller") {
            Description("Vendors will reward you with 7 Jeweller's Orbs upon selling them an item with 6 sockets.");

            QuickUI([0.0, "Jeweller recipe 6 sockets (large)", "socketslinks;6sockets4h"], "SD", ["AreaLevel", "Height"]);
            QuickUI([0.0, "Jeweller recipe 6 sockets", "socketslinks;6sockets"], "SD", ["AreaLevel", "Height"]);
            QuickUI([0.0, "Jeweller recipe 6sock-5links", "socketslinks;5link6sockets"], "SD", ["AreaLevel", "Height"]);
        }

        Section("Glassblower's Bauble", "Glassblower") {
            Description("Vendors will reward you with a glassblowers bauble upon selling them a single 20% quality flask or multiple quality flasks with a total quality of 40%.", "Glassblower Recipe", "It's recommended to at least use the threshold of 14. This allows you to get 1 glassblower per 3 mid quality flasks. Note that glassblowers can also be acquired by bying it for 8 whetstones from vendors and drop naturally, so the recipe is not very efficient.");

            QuickUI([0.0, "Glassblower recipe top quality", "endgameflasks;any20qualflask"], "SD", ["Quality", "AreaLevel", "RarityNM"]);
            QuickUI([0.0, "Glassblower recipe mid quality", "endgameflasks;qualityhigh"], "SD", ["Quality", "AreaLevel", "RarityNM"]);
            QuickUI([0.0, "Glassblower recipe low quality", "endgameflasks;qualitylow"], "SD", ["Quality", "AreaLevel", "RarityNM"]);

            Description("You can find more quality flasks rules in the 'Endgame -> Flasks' and 'Campaign -> Flasks' sections.");
        }

        Section("Cartographer's Chisel", "Chisel") {
            Description("You get a cartographer's chisel by vendoring a 20% quality Gavel, Rock Breaker, or Stone Hammer together with any map. This recipe is considered too slow for most purposes and it's not recommendend");

            DeepSearch S1(0.0, "Chisel recipe mid quality A", "chiselrecipe;chiselhighqualnormal") { BaseType "Stone Hammer"; Quality 15; Rarity Normal; Corrupted False; }
            DeepSearch S1(0.0, "Chisel recipe mid quality B", "chiselrecipe;chiselhighqualmagic") { BaseType "Stone Hammer"; Quality 18; Rarity Magic; Corrupted False; }
            DeepSearch S2(0.0, "Chisel recipe low quality A", "chiselrecipe;chiselanyqualmagic") { BaseType "Stone Hammer"; Quality 12; Rarity Magic; Corrupted False; }
            DeepSearch S2(0.0, "Chisel recipe low quality B", "chiselrecipe;chiselanyqualnormal") { BaseType "Stone Hammer"; Rarity Normal; Corrupted False; }

            QuickUI([0.0, "Chisel recipe top quality", "chiselrecipe;chisel20"], "SD", ["AreaLevel", "Quality", "Rarity"], "Maximum Quality");
            QuickUI(1, "SD", ["AreaLevel", "Quality", "Rarity"], "Magic Rarity, High Quality");
            QuickUI(0, "SD", ["AreaLevel", "Quality", "Rarity"], "Normal Rarity, High Quality");
            QuickUI(2, "SD", ["AreaLevel", "Quality", "Rarity"], "Magic Rarity, No Quality");
            QuickUI(3, "SD", ["AreaLevel", "Quality", "Rarity"], "Normal Rarity, No Quality");
        }

        Title("Build-Specific Recipes");

        Section("+1 Skill Gem Recipes", "SkillGemRed1") {
            Description("By selling a total of 40% quality worth of gems with a specific tag (such as fire) together with a Rune Dagger, Wand, Sceptre or Staff you will be rewarded with a +1 global level to ALL tagged spell gems. This can be great for crafting, ssf or powerful weapons early on");

            QuickUI([0.0, "+1 Skill Gem Recipe (Cold)", "gems-generic;plusonegemcold"], "SD", ["Quality", "AreaLevel"]);
            QuickUI([0.0, "+1 Skill Gem Recipe (Fire)", "gems-generic;plusonegemfire"], "SD", ["Quality", "AreaLevel"]);
            QuickUI([0.0, "+1 Skill Gem Recipe (Lightning)", "gems-generic;plusonegemlight"], "SD", ["Quality", "AreaLevel"]);
            QuickUI([0.0, "+1 Skill Gem Recipe (Chaos)", "gems-generic;plusonegemchaos"], "SD", ["Quality", "AreaLevel"]);
            QuickUI([0.0, "+1 Skill Gem Recipe (Physical)", "gems-generic;plusonegemphys"], "SD", ["Quality", "AreaLevel"]);
            QuickUI([0.0, "+1 Skill Gem Recipe (Minion)", "gems-generic;plusonegemminion"], "SD", ["Quality", "AreaLevel"]);
        }

        Title("Exclusive Item Recipes");

        Section("Grasping Mail (Breach Rings)", "BreachRing") {
            Description("Selling a total of 60 Breach Rings together to a vendor will reward you with the Grasping Mail rare item. This item can feature exclusive modifiers, such as the +50% to all defenses. Note that rerolling that item will not allow for new breach modifier to spawn. This rare can be very valuable for crafting.");
            QuickUI([2.0, "Breach Rings High ilvl", "rare->exotic->breachrings;high"], "SH", ["AreaLevel", "ItemLevel"]);
            QuickUI([2.0, "Breach Rings", "rare->exotic->breachrings;any"], "SH", ["AreaLevel", "ItemLevel"]);
        }

        Section("Loreweave Unique Rings", "Loreweave") {
            Description("Selling a total of 60 Unique Rings together to a vendor will reward you with the Loreweave Unique body armour.");
            QuickUI([0.0, "Loreweave Rings", "uniques;recipeuniquerings"], "SD", ["ItemLevel"]);
        }
    }

    //===================================================================================================
    // CHANCING
    //===================================================================================================

    Section("Chancing Bases", "Skyforth") {
        Warning("Make sure the Unique you want can actually be chanced. Many uniques are drop-only uniques.");

        Function ChancingList($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["AreaLevel"], $text, ["gearPlusFlasks", "SO"]); }

        ChancingList([1.0, "Chancing bases (normal)", "chancing;t2"], "SD", "Meta-Uniques Chancing Bases:");
        ChancingList([1.0, "Chancing bases (leather belt HH)", "chancing;hh"], "SD", "Lottery-Tier Chancing Targets:");

        Conditional("?ChancingBaseNewTiers") { }
        ElementAdder_Tier("?ChancingBaseNewTiers", "ChancingList");
    }

    //===================================================================================================
    // TIER LISTS
    //===================================================================================================

    Section("Currency - Normal", "Exalted", "E") {

        Title("Main");

        MultiTierThresholdEditor(
            ["Currency God Tier 1", "Currency God Tier 2", "Currency High Tier 1", "Currency High Tier 2", "Currency High Tier 3", "Currency Mid Tier 1", "Currency Mid Tier 2", "Currency Basic Tier 1", "Currency Basic Tier 2", "Currency Basic Tier 3", "Currency Basic Tier 4" ],
            ["Stacked Currency - T1, Huge", "Stacked Currency - T2, Huge", "Stacked Currency - T3, Huge", "Stacked Currency - T4, Huge", "Stacked Currency - T5, Huge", "Stacked Currency - T6, Huge", "Stacked Currency - T7, Huge", "Stacked Currency - T1, Large", "Stacked Currency - T2, Large", "Stacked Currency - T3, Large", "Stacked Currency - T4, Large", "Stacked Currency - T5, Large", "Stacked Currency - T6, Large", "Stacked Currency - T7, Large", "Stacked Currency - High Supply Large", "Stacked Currency - High Supply Medium", "Stacked Currency - High Supply Small", "Stacked Currency - Low Supply Large", "Stacked Currency - Low Supply Medium", "Stacked Currency - Low Supply Small", "Stacked Currency - Portal Large", "Stacked Currency - Portal Medium", "Stacked Currency - Portal Small", "Stacked Currency - Wisdom Large", "Stacked Currency - Wisdom Medium", "Stacked Currency - Wisdom Small"],
            "BaseType",
            "StackSize",
            [],
            [["Currency Basic Tier 1",    "Stacked Currency - High Supply Small", "Stacked Currency - High Supply Large"],
                ["Currency Basic Tier 2", "Stacked Currency - Low Supply Small", "Stacked Currency - Low Supply Large"],
                ["Currency Basic Tier 3", "Stacked Currency - Portal Small", "Stacked Currency - Portal Large"],
                ["Currency Basic Tier 4", "Stacked Currency - Wisdom Small", "Stacked Currency - Wisdom Large"]]);

        Section("General Currency", "Chaos", "E") {
            Function CurrencyList($s, $shd = "SHD", $text) { QuickUI($s, $shd, [], $text, ["normalCurrency", "O"]); }

            TierListToolBar("Currency", [], ["Sacred Crystallised Lifeforce", "Primal Crystallised Lifeforce", "Vivid Crystallised Lifeforce", "Wild Crystallised Lifeforce"]); // ignore lifeforce because it always drops in huge stacks and poeNinja only considers the individual price
            Description("Drag & drop the basetypes to change their tier. Add new tiers at the bottom or in the toolbar. Hover over the wisdom scroll to receive additional advise for currency management.", "Currency Strategy", "Path of Exile rewards speed. It's an efficient strategy to save time by picking up just the minimum amount of scrolls, scraps, augments and other low currency. You can even completely stop picking them up. Do note that you can sell transmutation orbs and whetstones for a 1:4 wisdom scroll gain and armorer scraps for 1:2 wisdom scrolls. You can also buy a portal gem to save on portal scrolls. Another efficient technique is to hide low currencies entirely - but with the maximum font size, but show them, while ALT is pressed.");

            CurrencyList([3.0, "Currency God Tier 1", "currency;t1exalted"], "S", "God Tier 1:");
            CurrencyList([3.0, "Currency God Tier 2", "currency;t2divine"], "S", "God Tier 2:");
            CurrencyList([3.0, "Currency High Tier 1", "currency;t3annul"], "SH", "High Tier 1:");
            CurrencyList([3.0, "Currency High Tier 2", "currency;t4chaos"], "SH", "High Tier 2:");
            CurrencyList([3.0, "Currency High Tier 3", "currency;t5alchemy"], "SH", "High Tier 3:");
            CurrencyList([3.0, "Currency Mid Tier 1", "currency;t6chrom"], "SH", "Mid Tier 1:");
            CurrencyList([3.0, "Currency Mid Tier 2", "currency;t7chance"], "SH", "Mid Tier 2:");
            CurrencyList([3.0, "Currency Basic Tier 1", "currency;t8trans"], "SH", "Basic Tier 1:");
            CurrencyList([3.0, "Currency Basic Tier 2", "currency;t9armour"], "SH", "Basic Tier 2:");
            CurrencyList([3.0, "Currency Basic Tier 3", "currency;tportal"], "SH", "Basic Tier 3:");
            CurrencyList([3.0, "Currency Basic Tier 4", "currency;twisdom"], "SH", "Basic Tier 4:");

            Description("Remember that there are special rules for currency during the campaign and for stacked currency.");

            Conditional("?CurrencyNewTiers") { Show; Class Currency; SetTextColor 210 178 135; SetBackgroundColor 0 0 0 255; SetBorderColor 213 159 100 200; SetFontSize 42; }
            ElementAdder_Tier("?CurrencyNewTiers", "CurrencyList");

            Conditional("?CurrencyNewTiersHidden") { }
            ElementAdder_Tier("?CurrencyNewTiersHidden", null, true, "normalCurrency", "OH");
        }

        Title("Stacked Currency Drops (Endgame)");

        Function CurrencyStackList($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["StackSize"], $text, ["Currency", "DO"]); }

        Section("Large Stacks", "Chaos", "E") {
            CurrencyStackList([0.0, "Stacked Currency - T1, Huge", "currency->stackedsix;t1"], "SD", "Stacked Currency, T1, Large");
            CurrencyStackList([0.0, "Stacked Currency - T2, Huge", "currency->stackedsix;t2"], "SD", "Stacked Currency, T2, Large");
            CurrencyStackList([0.0, "Stacked Currency - T3, Huge", "currency->stackedsix;t3"], "SD", "Stacked Currency, T3, Large");
            CurrencyStackList([0.0, "Stacked Currency - T4, Huge", "currency->stackedsix;t4"], "SD", "Stacked Currency, T4, Large");
            CurrencyStackList([0.0, "Stacked Currency - T5, Huge", "currency->stackedsix;t5"], "SD", "Stacked Currency, T5, Large");
            CurrencyStackList([0.0, "Stacked Currency - T6, Huge", "currency->stackedsix;t6"], "SD", "Stacked Currency, T6, Large");
            CurrencyStackList([0.0, "Stacked Currency - T7, Huge", "currency->stackedsix;t7"], "SD", "Stacked Currency, T7, Large");
        }

        Section("Small Stacks", "GCP", "E") {
            CurrencyStackList([0.0, "Stacked Currency - T1, Large", "currency->stackedthree;t1"], "SD", "Stacked Currency, T1, Small");
            CurrencyStackList([0.0, "Stacked Currency - T2, Large", "currency->stackedthree;t2"], "SD", "Stacked Currency, T2, Small");
            CurrencyStackList([0.0, "Stacked Currency - T3, Large", "currency->stackedthree;t3"], "SD", "Stacked Currency, T3, Small");
            CurrencyStackList([0.0, "Stacked Currency - T4, Large", "currency->stackedthree;t4"], "SD", "Stacked Currency, T4, Small");
            CurrencyStackList([0.0, "Stacked Currency - T5, Large", "currency->stackedthree;t5"], "SD", "Stacked Currency, T5, Small");
            CurrencyStackList([0.0, "Stacked Currency - T6, Large", "currency->stackedthree;t6"], "SD", "Stacked Currency, T6, Small");
            CurrencyStackList([0.0, "Stacked Currency - T7, Large", "currency->stackedthree;t7"], "SD", "Stacked Currency, T7, Small");
        }

        Section("Supplies - High Tier", "Transmut") {
            CurrencyStackList([0.0, "Stacked Currency - High Supply Large", "currency->stackedsupplieshigh;t1"], "SD");
            CurrencyStackList([0.0, "Stacked Currency - High Supply Medium", "currency->stackedsupplieshigh;t2"], "SD");
            CurrencyStackList([0.0, "Stacked Currency - High Supply Small", "currency->stackedsupplieshigh;t3"], "SD");
        }

        Section("Supplies - Low Tier", "ArmourerScrap") {
            CurrencyStackList([0.0, "Stacked Currency - Low Supply Large", "currency->stackedsupplieslow;t1"], "SD");
            CurrencyStackList([0.0, "Stacked Currency - Low Supply Medium", "currency->stackedsupplieslow;t2"], "SD");
            CurrencyStackList([0.0, "Stacked Currency - Low Supply Small", "currency->stackedsupplieslow;t3"], "SD");
        }

        Section("Portal Scrolls", "PortalScroll") {
            CurrencyStackList([0.0, "Stacked Currency - Portal Large", "currency->stackedsuppliesportal;t1"], "SD");
            CurrencyStackList([0.0, "Stacked Currency - Portal Medium", "currency->stackedsuppliesportal;t2"], "SD");
            CurrencyStackList([0.0, "Stacked Currency - Portal Small", "currency->stackedsuppliesportal;t3"], "SD");
        }

        Section("Scroll of Wisdom", "WisdomScroll") {
            CurrencyStackList([0.0, "Stacked Currency - Wisdom Large", "currency->stackedsupplieswisdom;t1"], "SD");
            CurrencyStackList([0.0, "Stacked Currency - Wisdom Medium", "currency->stackedsupplieswisdom;t2"], "SD");
            CurrencyStackList([0.0, "Stacked Currency - Wisdom Small", "currency->stackedsupplieswisdom;t3"], "SD");
        }

        Title("Currency Drops during the Campaign");

        Section("Campaign Specific - General", "Regret") {
            Function LevelingStackList($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["AreaLevel"], $text, ["Currency", "DO"]); }

            LevelingStackList([0.0, "Currency during leveling 0", "currency->leveling;binding"], "SH", "Currency during Campaign 0");
            LevelingStackList([0.0, "Currency during leveling 1", "currency->leveling;trans"], "SH", "Currency during Campaign 1");
            LevelingStackList([0.0, "Currency during leveling 2", "currency->leveling;aug"], "SH", "Currency during Campaign 2");
            LevelingStackList([0.0, "Currency during leveling 3", "currency->leveling;portal"], "SH", "Currency during Campaign 3");
            LevelingStackList([0.0, "Currency during leveling 4", "currency->leveling;wisdom"], "SH", "Currency during Campaign 4");
            QuickUI([0.0, "Essences while leveling", "currency->leveling;essences"], "SH", ["AreaLevel"], "", ["essences"]);

            Conditional("?CurrencyLevelingNewTiers") { Show; Class Currency; AreaLevel < 65; SetTextColor 210 178 135; SetBackgroundColor 0 0 0 255; SetBorderColor 213 159 100 200; SetFontSize 42; }
            ElementAdder_Tier("?CurrencyLevelingNewTiers", "LevelingStackList");
        }

        Section("Campaign Specific - Stacked Drops", "Transmut") {
            Function CurrencyLevelingStackList($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["StackSize", "AreaLevel"], $text, ["Currency", "DO"]); }

            CurrencyLevelingStackList([0.0, "Stacked Campaign Transmutations", "currency->levelingstacked;trans"], "SD");
            CurrencyLevelingStackList([0.0, "Stacked Campaign Augmentations", "currency->levelingstacked;aug"], "SD");
            CurrencyLevelingStackList([0.0, "Stacked Campaign Portal Scrolls", "currency->levelingstacked;portal"], "SD");
            CurrencyLevelingStackList([0.0, "Stacked Campaign Wisdom Scrolls", "currency->levelingstacked;wisdom"], "SD");

            Conditional("?CurrencyLevelingStacksNewTiers") {  }
            ElementAdder_Tier("?CurrencyLevelingStacksNewTiers", "CurrencyLevelingStackList");
        }

        Title("Custom");

        Section("Add Custom Rules", "Firefly") {
            Conditional("?CurrencyStackNewTiers", ["c9.currency.stacked.all"], "notSimpleBuilder") { Show; Class Currency; StackSize >= 3; SetTextColor 210 178 135; SetBackgroundColor 0 0 0 255; SetBorderColor 213 159 100 200; SetFontSize 42; }
            ElementAdder_Tier("?CurrencyStackNewTiers", "CurrencyStackList");
        }
    }

    Section("Currency - Special", "Essence", "E") {

        Title("Crafting");

        Section("Essences", "Essence") {
            Search S0(0.0, "Essences T1+2", "currency->essence;t1") { BaseType "Essence of Hysteria"; }

            Conditional("?EssenceHighlight", ["c9.currency.essences.all"]) { Show; Class Currency; SetFontSize 40; PlayAlertSound 2 300; SetBorderColor 0 0 0; SetTextColor 0 0 0; SetBackgroundColor 180 0 230; }
            QuickUI("?EssenceHighlight", "SDH", ["EssenceTypes"], "Highlight Essences by type:");

            QuickUI(S0, "SH", ["AreaLevel"], "", ["essences"]);
            QuickUI([0.0, "Essences T3", "currency->essence;t2"], "SH", ["AreaLevel"], "", ["essences"]);
            QuickUI([0.0, "Essences T4", "currency->essence;t3"], "SH", ["AreaLevel"], "", ["essences"]);
            QuickUI([0.0, "Essences T5", "currency->essence;t4"], "SH", ["AreaLevel"], "", ["essences"]);
            QuickUI([0.0, "Essences T6", "currency->essence;t5"], "SH", ["AreaLevel"], "", ["essences"]);
            QuickUI([0.0, "Essences T7", "currency->essence;t6"], "SH", ["AreaLevel"], "", ["essences"]);

            QuickUI([0.0, "Remaining essences", "currency->essence;exhide"], "SH", [], "", [], "Remaining essences that were not caught be the rules above due to possible AreaLevel requirements.");
        }

        Section("Delve Resonators", "DelveResonator", "E") {
            Function ResonatorTierFunc($s, $shd = "SHD", $text) { QuickUI($s, $shd, [], $text, ["Resonators", "O"]); }

            TierListToolBar("Resonator", [], []);

            ResonatorTierFunc([0.0, "Delve Socketable Currency Resonators T1", "currency->resonator;t1"], "SH", "Resonators Tier 1");
            ResonatorTierFunc([0.0, "Delve Socketable Currency Resonators T2", "currency->resonator;t2"], "SH", "Resonators Tier 2");
            ResonatorTierFunc([0.0, "Delve Socketable Currency Resonators T3", "currency->resonator;t3"], "SH", "Resonators Tier 3");

            // new tiers
            Conditional("?DelveResonatorNewTier") { Show; Class "Delve Stackable Socketable Currency"; SetTextColor 0 0 0 255; SetBackgroundColor 210 178 135; SetBorderColor 0 0 0 255; SetFontSize 45; PlayAlertSound 2 300; } // removed Class "Delve Stackable Socketable Currency"
            ElementAdder_Tier("?DelveResonatorNewTier", "ResonatorTierFunc");

            Conditional("?ResonatorNewTiersHidden") { }
            ElementAdder_Tier("?ResonatorNewTiersHidden", null, true, "Resonators", "OH");
        }

        Section("Delve Fossils", "DelveFossil", "E") {
            Function FossilTierFunc($s, $shd = "SHD", $text) { QuickUI($s, $shd, [], $text, ["Fossils", "O"]); }

            TierListToolBar("Fossil", [], []);

            FossilTierFunc([0.0, "Delve Currency Fossils T1", "currency->fossil;t1"], "SH", "Fossils Tier 1");
            FossilTierFunc([0.0, "Delve Currency Fossils T2", "currency->fossil;t2"], "SH", "Fossils Tier 2");
            FossilTierFunc([0.0, "Delve Currency Fossils T3", "currency->fossil;t3"], "SH", "Fossils Tier 3");
            FossilTierFunc([0.0, "Delve Currency Fossils T4", "currency->fossil;t4"], "SH", "Fossils Tier 4");

            // new tiers
            Conditional("?DelveFossilsNewTier") { }
            ElementAdder_Tier("?DelveFossilsNewTier", "FossilTierFunc");

            Conditional("?FossilNewTiersHidden") { }
            ElementAdder_Tier("?FossilNewTiersHidden", null, true, "Fossils", "OH");
        }

        Section("Delirium Orbs", "Delirium Orb", "E") {
            TierListToolBar("DeliriumOrb", [], []);

            Function DeliriumOrbTierList($s, $shd = "SHD", $text) { QuickUI($s, $shd, [], $text, ["DeliriumOrbs", "O"]); }

            DeliriumOrbTierList([0.0, "Delirium Orbs Tier 1", "currency->deliriumorbs;t1"], "SH", "Delirium Orbs Tier 1");
            QuickUI([0.0, "Delirium Orbs Tier 2", "currency->deliriumorbs;t2"], "SH", [], "", ["DeliriumOrbs", "O"]);
            QuickUI([0.0, "Delirium Orbs Tier 3", "currency->deliriumorbs;t3"], "SH", [], "", ["DeliriumOrbs", "O"]);

            Conditional("?DeliriumOrbNewTier") { }
            ElementAdder_Tier("?DeliriumOrbNewTier", "DeliriumOrbTierList");

            Conditional("?DeliriumOrbNewTiersHidden") { }
            ElementAdder_Tier("?DeliriumOrbNewTiersHidden", null, true, "DeliriumOrbs", "OH");
        }

        Section("Blight Oils", "BlightOil", "E") {
            Function OilTierList($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["AreaLevel", "StackSize"], $text, ["BlightOils", "O"]); }

            TierListToolBar("Oil", [], []);

            OilTierList([0.0, "Blight Oils T1", "currency->oil;t1"], "SH", "Oils Tier 1");
            OilTierList([0.0, "Blight Oils T2", "currency->oil;t2"], "SH", "Oils Tier 2");
            OilTierList([0.0, "Blight Oils T3", "currency->oil;t3"], "SH", "Oils Tier 3");
            OilTierList([0.0, "Blight Oils T4", "currency->oil;t4"], "SH", "Oils Tier 4");
            QuickUI([0.0, "Remaining Oils", "currency->oil;exhide"], "SH", [], "", false, "Untiered oils, which are not matched by any of the above rules, probably due to unmet AreaLevel requirements.");

            Conditional("?BlightOilNewTier") { Show; Class Currency; SetTextColor 210 178 135; SetBackgroundColor 0 0 0 255; SetBorderColor 213 159 100 200; SetFontSize 42; }
            ElementAdder_Tier("?BlightOilNewTier", "OilTierList");

            Conditional("?BlightOilNewTiersHidden") { }
            ElementAdder_Tier("?BlightOilNewTiersHidden", null, true, "BlightOils", "OH");
        }

        Title("Misc.");

        Section("Heist Rogue's Markers", "HeistCoin") {
            Function CustomCoinFunc($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["StackSize", "AreaLevel"]); }

            Search S1(0.1, "Rogue's Marker (Heist Coins)") { BaseType "Rogue's Marker"; }
            QuickUI([0.0, "Rogue's Marker (Heist Coins) Stack", "currency->heist;highstack"], "SH", ["StackSize", "AreaLevel"]);
            QuickUI(S1, "SH", ["StackSize", "AreaLevel"], "Remaining Rogue Markers");
            QuickUI([0.0, "Remaining Rogue Markers", "currency->heist;exhide"], "SH", [], "", [], "Remaining coins that were not caught due to potential Stack/Area requirements of the rules above.");

            // new tiers
            Conditional("?HeistCustomCoins") { Show; BaseType == "Rogue's Marker"; StackSize > 250; SetTextColor 0 0 0 255; SetBackgroundColor 255 178 135 255; SetBorderColor 0 0 0 255; SetFontSize 45; }
            ElementAdder_Tier("?HeistCustomCoins", "CustomCoinFunc");
        }

        Section("Incubators", "Incubator", "E") {
            Function IncubatorTierList($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["ItemLevel"], $text, ["Incubators", "O"]); }

            TierListToolBar("Incubator", [], []);

            IncubatorTierList([0.0, "Incubators T0", "currency->incubators;t2"], "SH", "Incubators Tier 1");
            IncubatorTierList([0.0, "Incubators T1.5", "currency->incubators;t3"], "SH", "Incubators Tier 2");
            IncubatorTierList([0.0, "Incubators T1", "currency->incubators;t4"], "SH", "Incubators Tier 3");
            IncubatorTierList([0.0, "Incubators T4", "currency->incubators;t5"], "SH", "Incubators Tier 4");

            Conditional("?IncubatorNewTiersHidden") { }
            ElementAdder_Tier("?IncubatorNewTiersHidden", null, true, "Incubators", "OH");

            QuickUI([0.0, "Remaining Incubators", "currency->incubators;exhide"], "SH", [] , "", [], "Remaining Incubators, which are not matched by any of the above rules, probably due to unmet ItemLevel requirements.");

            Divider();

            // high level
            Function IncubatorILvlTierList($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["Incubators", "ItemLevel"], $text); }
            Search SS(0.0, "High Level Incubators", "currency->incubators;leveledex") { BaseType "Thaumaturge's Incubator"; ItemLevel 85; }
            IncubatorILvlTierList(SS, "SD", "High Level Incubators");

            Conditional("?LegionIncubatorsNewTier", ["c9.currency.incubators.all"], "notSimpleBuilder") { Show; Class Incubator; SetTextColor 210 178 135; SetBackgroundColor 0 0 0 255; SetBorderColor 213 159 100 200; SetFontSize 42; }
            ElementAdder_Tier("?LegionIncubatorsNewTier", "IncubatorILvlTierList");
        }

        Section("Harbinger Upgrade Items", "HarvestSeed") {
            Search S1(0.0, "Harvest Currencies", "currency->others;harbinger") { BaseType "Fragmentation Scroll"; }
            QuickUI(S1, "SH", [], "", ["all", "SO"]);
        }

        Section("Incursion Vials", "IncursionVial", "E") {
            TierListToolBar();
            QuickUI([0.0, "Incursion Vials T1", "vials;t1"], "SH", [], "", ["IncursionVials", "O"]);
            QuickUI([0.0, "Incursion Vials T2", "vials;t2"], "SH", [], "", ["IncursionVials", "O"]);
            QuickUI([0.0, "Incursion Vials T3", "vials;t3"], "SH", [], "", ["IncursionVials", "O"]);

            // new vial tiers
            Function VialTierList($s, $shd = "SHD", $text) { QuickUI($s, $shd, [], $text, ["IncursionVials", "O"]); }
            Conditional("?IncVialNewTier") { Show; Class Currency; SetTextColor 0 0 0 255; SetBackgroundColor 159 15 213 255; SetBorderColor 0 0 0 255; SetFontSize 45; PlayAlertSound 2 300; }
            ElementAdder_Tier("?IncVialNewTier", "VialTierList");

            Conditional("?VialNewTiersHidden") { }
            ElementAdder_Tier("?VialNewTiersHidden", null, true, "IncursionVials", "OH");
        }
    }

    Section("Unique items", "Unique", "E") {

        Function UniqueList($s, $shd = "SHD", $text, $descr = false) { QuickUI($s, $shd, [], $text, ["GearPlusFlasks", "O"], $descr); }

        // important: the first search we ever reference (NOT declare) here is what determines the position of the hide-rule and new tiers.
        // we want (especially the hide-rule) to be low, so that corrupted uniques, 6 sockets, etc. are still shown, and only the regular normal unique is hidden
        // because of that, we HAVE TO list S10 (boss-drop uniques) first in the exceptionEntries, because that way it's the first referenced entry
        TierListToolBar("Uniques", [S10, S2, S7, S8, S11], ["Ruby Flask"]);
        Warning("IMPORTANT: Path of Exile lootfilters can't distinguish between different uniques with the same BaseTypes.");

        // we meed to keep these searches defined to reference them in the ecoLoader (auto-sort-excluded entries)
        Search S0(8.1, "Uniques Tier 1", "uniques;t1") { Rarity Unique; BaseType "Glorious Plate"; }
        Search S1(8.1, "Uniques Tier 2", "uniques;t2") { Rarity Unique; BaseType "Rotfeather Talisman"; }
        Search S2(8.1, "Uniques (MultiBase)", "uniques;multispecial") { Rarity Unique; BaseType "Gold Amulet"; }
        Search S3(8.1, "Uniques (Remaining)", "uniques;t3") { Rarity Unique; BaseType "Vaal Axe"; }
        Search S6(8.1, "Uniques (Hideable trash)", "uniques;hideable") { Rarity Unique; BaseType "Bone Armour"; }
        Search S7(8.1, "Uniques (early league)", "uniques;earlyleague") { Rarity Unique; BaseType "Deerskin Gloves"; }
        Search S8(8.1, "Unique Jewels", "uniques;exjewels") { Rarity Unique; BaseType "Crimson Jewel"; }
        Search S10(8.1, "Boss-Drop Uniques", "uniques;t3boss") { Rarity Unique; BaseType "Agate Amulet"; }
        Search S11(8.1, "Uniques (Hideable 2)", "uniques;hideable2") { Rarity Unique; BaseType "Iron Hat"; }
//        Search S12(8.1, "Uniques (fated boss drop)", "uniques;fatedbossdrop") {  }

        UniqueList(S0, "S", "Tier 1:", "Tier 1 uniques are always an expensive and lucky find!");
        UniqueList(S1, "S", "Tier 2:", "Tier 2 uniques are always fairly expensive, but can be even more valuable with some lucky rolls");
        UniqueList(S2, "SH", "Multi-Base Uniques:", "Some BaseTypes have both: very valuable uniques AND cheap uniques. The filter can't say which one dropped. These multi-base uniques get more highlight, but play the low-tier unique sound.");
        UniqueList(S10, "S", "Boss-Drop Uniques:", "These basetypes have a expensive unique version that only drops from bosses and special encounters. They also have a cheap world-drop-version. Don't hide these, the filter has no way of telling, which one it is. If you really want to hide this tier, enable the option to have Show/Hide/Disable buttons everywhere in Advanced->Settings.");
        UniqueList(S8, "SH", "Unique Jewels:", "The filter can't disintinguish between expensive and cheap unique jewels. All of them are treated the same way!");
//        UniqueList(S12, "SH", "Fated Boss Drop Uniques:", "These can only drop from Atlas Map Bosses. You got to check those yourself because they look the same as a normal unique.");
        UniqueList(S7, "SDH", "Early league Uniques:", "These uniques are possibly expensive or interesting at the start of the new league! This tier stays empty, after the first week of the new league");
        UniqueList(S3, "SH", "Tier 3 - semi-expensive uniques:");
        UniqueList(S11, "SH", "Tier 4 - Non-Drop Uniques:", "Hideable uniques with non-droppable expensive versions.");
        UniqueList(S6, "SH", "Tier 5 - cheap and hideable uniques:", "These uniques are worth very little. Note that the game and the meta changes fairly fast, so be careful with this section! Hiding this section at the start of new leagues and in SSF is a bad idea. You've been warned.");

        Description("The Tabula Rasa & The Squire unique are exceptions and can be edited under 'Misc. Items' at the bottom of the customizer.<br>Replica uniques can be found in the endgame -> league item section.");

        Conditional("?UniqueNewTiers") { Show; Rarity Unique; SetTextColor 175 96 37 255; SetBackgroundColor 0 0 0 255; SetBorderColor 175 96 37 255; SetFontSize 42; PlayAlertSound 3 300; }
        ElementAdder_Tier("?UniqueNewTiers", "UniqueList");

        Conditional("?UniquesNewTiersHidden") { }
        ElementAdder_Tier("?UniquesNewTiersHidden", null, true, "GearPlusFlasks", "OH");
    }

    Section("Divination Cards", "StackedDeck", "E") {

        Function DivCardList($s, $shd = "SHD", $text) { QuickUI($s, $shd, [], $text, ["Divination Cards", "O"]); }

        TierListToolBar("DivinationCard", [S5, S6], []);

        Search S0(5.1, "Divination Cards T1", "divination;t1") { BaseType "House of Mirrors"; }
        Search S1(5.1, "Divination Cards T2", "divination;t2") { BaseType "The Hoarder"; }
        Search S2(5.1, "Divination Cards T3", "divination;t3") { BaseType "The Dapper Prodigy"; }
        Search S3(5.1, "Divination Cards T4", "divination;t4") { Class "Divination Cards"; }
        Search S4(5.1, "Divination Cards T5", "divination;t5") { BaseType "The Carrion Crow"; }
        Search S5(5.1, "Divination Cards T5C", "divination;t5c") { BaseType "Rain of Chaos"; }
        Search S6(5.1, "Divination Cards T4C", "divination;t4c") { BaseType "Emperor's Luck"; }
        Search S7(5.1, "Divination Cards New", "divination;tnew") { BaseType "The Tumbleweed"; }

        DivCardList(0, "S", "Tier 1  - Exceptional Cards:");
        DivCardList(1, "SH", "Tier 2 - Very Valuable Cards:");
        DivCardList(2, "SH", "Tier 3 - Valuable Cards:");
        DivCardList(6, "SH", "Tier 4 - Common Currency-Like Cards:");
        DivCardList(3, "SH", "Tier 4 - Common Cards:");
        DivCardList(5, "SH", "Tier 5 - Cheap Currency-Like Cards:");
        DivCardList(4, "SH", "Tier 5 - Cheap Cards:");
        DivCardList(S7, "SDH", "New Tier - New, unknown cards:");

        Conditional("?DivCardsNewTiers") { Show; Class "Divination"; SetTextColor 0 0 0 255; SetBackgroundColor 145 215 230 225; SetBorderColor 0 100 150 255; SetFontSize 40; PlayAlertSound 2 300; }
        ElementAdder_Tier("?DivCardsNewTiers", "DivCardList");

        Conditional("?DivCardsNewTiersHidden") { }
        ElementAdder_Tier("?DivCardsNewTiersHidden", null, true, "Divination Cards","OH");
    }

//===================================================================================================
// CURRENT LEAGUE
//===================================================================================================

    Section("Current League: Affliction", "JuggernautsUrsineCharmoftheChampion") {
        QuickUI([0.0, "Affliction Items: Charms, Corpses & Tinctures", "artefact->affliction;any"], "SH", [], "", null, "Since these items can only be obtained by purchasing them from a vendor and don't drop naturally in the world, there is no need for any special filtering or highlight.");
        QuickUI([0.0, "Transfigured Gems", "gems-exceptional;altany"], "SH", [], "", null, "Since these gems can only be created by using the Divine Font at the end of the Eternal Labyrinth and can't drop naturally in the world, there is no need for any special filtering or highlight.");
    }
}

//===================================================================================================
// MAPS
//===================================================================================================
Chapter() {
    SectionTitle("Maps and Map-like Items");

    Section("Maps - Highlight and Hide", "Firefly") {

        Box(){ YTLink("0CfZ_ba__Qg", "Map Section Tutorial"); }

        Section("Highlight specific maps") {
            Function ShowMapBaseTypeTier ($s, $shd = "SD", $title) { QuickUI($s, $shd, ["MapTier", "Quality", "Rarity", "Corrupted", "AreaLevel"], $title, ["Maps", "SO"]); }
            Conditional("?CShowMaps", ["c9.maps.decorators.all"]) { Show; Class Maps; BaseType == "Strand Map"; SetFontSize 44; SetBackgroundColor 180 70 50 220; PlayAlertSound 5 300; SetTextColor 0 0 0; MinimapIcon 2 Brown Square; PlayEffect Brown; }
            ElementAdder_Tier("?CShowMaps", "ShowMapBaseTypeTier");
        }

        Section("Hide specific maps") {
            Function HideMapBaseTypeTier ($s, $shd = "HD", $title) { QuickUI($s, $shd, ["MapTier", "Quality", "Rarity", "Corrupted", "AreaLevel"], $title, ["Maps", "SO"]); }
            Conditional("?CHideMaps", ["c9.maps.generic.t16"]) { Hide; Class Maps; SetFontSize 18; MapTier <= 14; }
            ElementAdder_Tier("?CHideMaps", "HideMapBaseTypeTier");
        }

        Section("Highlight based on Map Properties") {
            Description("These rules will only apply to non-unique maps. These rules also have less priority than the previous section.");


            Conditional("?CShowMapsQuality", ["c9.maps.decorators.all"]) { Show; Class Maps; Quality >= 20; SetFontSize 40; SetBackgroundColor 180 70 50 220; PlayAlertSound 5 300; SetTextColor 0 0 0; MinimapIcon 2 Brown Square; PlayEffect Brown; }
            Conditional("?CShowMapsRareRarity", ["c9.maps.decorators.all"]) { Show; Class Maps; Rarity Rare; SetFontSize 40; SetBackgroundColor 180 70 50 220; PlayAlertSound 5 300; SetTextColor 0 0 0; MinimapIcon 2 Brown Square; PlayEffect Brown; }
            Conditional("?CShowMapsMagicRarity", ["c9.maps.decorators.all"]) { Show; Class Maps; Rarity Magic; SetFontSize 40; SetBackgroundColor 180 70 50 220; PlayAlertSound 5 300; SetTextColor 0 0 0; MinimapIcon 2 Brown Square; PlayEffect Brown; }
            Conditional("?CShowMapsCorrupted", ["c9.maps.decorators.all"]) { Show; Class Maps; Corrupted True; SetFontSize 40; SetBackgroundColor 180 70 50 220; PlayAlertSound 5 300; SetTextColor 0 0 0; MinimapIcon 2 Brown Square; PlayEffect Brown; }

            QuickUI("?CShowMapsQuality", "SDH", ["MapTier", "Quality", "Rarity", "HasInfluence"], "Highlight maps with high quality");
            QuickUI("?CShowMapsRareRarity", "SHD", ["MapTier"], "Highlight rare maps");
            QuickUI("?CShowMapsMagicRarity", "SHD", ["MapTier"], "Highlight magic maps");
            QuickUI("?CShowMapsCorrupted", "SHD", ["MapTier", "Rarity"], "Highlight corrupted maps");
        }

        Section("Hide based on tier") {
            Conditional("?HideALLMapsByTier", ["c9.maps.generic.t16"]) { Hide; Class Maps; HasInfluence None; MapTier < 8; }
            Box() { Description("This does not affect shaped/elder maps."); }
            QuickUI("?HideALLMapsByTier", "HD", ["MapTier", "AreaLevel"], "Hide by tier");
        }
    }

    Section("Maps - General Configuration", "Map") {

        Section("Decorators") {
            Box() { Description("Decorators highlight specific characteristics of an item, by changing the appearance, without deciding whether it is hidden or shown."); }

            Search S0(1.0, "Map appearance T16 Gain", "maps;deco_mapup_t16") { }
            Search S0(1.0, "Map appearance T15 Gain", "maps;deco_mapup_t15") { }
            Search S0(1.0, "Map appearance T14 Gain", "maps;deco_mapup_t14") { }
            Search S0(1.0, "Map appearance T13 Gain", "maps;deco_mapup_t13") { }
            Search S0(1.0, "Map appearance T12 Gain", "maps;deco_mapup_t12") { }
            Search S0(1.0, "Map appearance T11 Gain", "maps;deco_mapup_t11") { }
            Search S1(1.0, "Map appearance T10 Gain", "maps;deco_mapup_t10") { }
            Search S1(1.0, "Map appearance T9 Gain", "maps;deco_mapup_t9") { }
            Search S1(1.0, "Map appearance T8 Gain", "maps;deco_mapup_t8") { }
            Search S1(1.0, "Map appearance T7 Gain", "maps;deco_mapup_t7") { }
            Search S1(1.0, "Map appearance T6 Gain", "maps;deco_mapup_t6") { }
            Search S2(1.0, "Map appearance T5 Gain", "maps;deco_mapup_t5") { }
            Search S2(1.0, "Map appearance T4 Gain", "maps;deco_mapup_t4") { }
            Search S2(1.0, "Map appearance T3 Gain", "maps;deco_mapup_t3") { }
            Search S2(1.0, "Map appearance T2 Gain", "maps;deco_mapup_t2") { }
            Search S2(1.0, "Map appearance T1 Gain", "maps;deco_mapup_t1") { }
            Description("The map has a higher tier than the one you're currently in.");
            QuickUI(S0, "SD", [], "Decorator: Tier 11+ gain");
            QuickUI(S1, "SD", [], "Decorator: Tier 6-10 gain");
            QuickUI(S2, "SD", [], "Decorator: Tier 1-5 gain");

            Divider();

            QuickUI([1.0, "Map decorator high red tier", "maps;deco_zone1general"], "SD", ["MapTier"]);
            QuickUI([1.0, "Map decorator low red tier", "maps;deco_zone2general"], "SD", ["MapTier"]);
            QuickUI([1.0, "Map decorator yellow tier", "maps;deco_zone3general"], "SD", ["MapTier"]);
            QuickUI([1.0, "Map decorator white tier", "maps;deco_zone4general"], "SD", ["MapTier"]);
        }

        Section("Normal Maps") {
            Search T16(0.1, "Map appearance T16") { MapTier 16; Class Maps; Rarity "Normal"; }
            Search T15(0.1, "Map appearance T15") { MapTier 15; Class Maps; Rarity "Normal"; }
            Search T14(0.1, "Map appearance T14") { MapTier 14; Class Maps; Rarity "Normal"; }
            Search T13(0.1, "Map appearance T13") { MapTier 13; Class Maps; Rarity "Normal"; }
            Search T12(0.1, "Map appearance T12") { MapTier 12; Class Maps; Rarity "Normal"; }
            Search T11(0.1, "Map appearance T11") { MapTier 11; Class Maps; Rarity "Normal"; }
            Search T10(0.1, "Map appearance T10") { MapTier 10; Class Maps; Rarity "Normal"; }

            Description("The map has the same tier as the one you're currently in.");
            QuickUI(T16, "SH", [], "Highlight - T16:");
            QuickUI(T15, "SH", [], "Highlight - T15:");
            QuickUI(T14, "SH", [], "Highlight - T14:");
            QuickUI(T13, "SH", [], "Highlight - T13:");
            QuickUI(T12, "SH", [], "Highlight - T12:");
            QuickUI(T11, "SH", [], "Highlight - T11:");
            QuickUI(T10, "SH", [], "Highlight - T10:");
            QuickUI([0.0, "Map appearance T9", "maps;maps_c_t9"], "SH", [], "Highlight - T9"]);
            QuickUI([0.0, "Map appearance T8", "maps;maps_c_t8"], "SH", [], "Highlight - T8"]);
            QuickUI([0.0, "Map appearance T7", "maps;maps_c_t7"], "SH", [], "Highlight - T7"]);
            QuickUI([0.0, "Map appearance T6", "maps;maps_c_t6"], "SH", [], "Highlight - T6"]);
            QuickUI([0.0, "Map appearance T5", "maps;maps_d_t5"], "SH", [], "Highlight - T5"]);
            QuickUI([0.0, "Map appearance T4", "maps;maps_d_t4"], "SH", [], "Highlight - T4"]);
            QuickUI([0.0, "Map appearance T3", "maps;maps_d_t3"], "SH", [], "Highlight - T3"]);
            QuickUI([0.0, "Map appearance T2", "maps;maps_d_t2"], "SH", [], "Highlight - T2"]);
            QuickUI([0.0, "Map appearance T1", "maps;maps_d_t1"], "SH", [], "Highlight - T1"]);
        }

        Section("Hide unusable maps") {
            QuickUI([0.0, "Hide corrupted non-rare maps", "maphiders;corruptedmaphider"], "SHD", ["Rarity", "MapTier"]);
            QuickUI([0.0, "Hide corrupted mirrored maps", "maphiders;mirroredmaphider"], "SHD", ["Rarity", "MapTier"]);
        }

        Section("Shaper, Elder and Conqueror Maps") {
            Search ElderMap(0.0, "Map appearance (ElderMap)") { Class Maps; HasInfluence Elder; Rarity Normal; }
            Search ShaperMap(0.0, "Map appearance (ShaperMap)") { Class Maps; HasInfluence Shaper; Rarity Normal; }
            QuickUI("ElderMap", "S", ["MapTier"], "Elder Influenced Maps & Guardians:");
            QuickUI("ShaperMap", "S", ["MapTier"], "Shaper Influenced Maps & Guardians:");
            QuickUI([0.0, "New Influenced Maps", "maps->influenced;infconquerors"], "S", [], "Conqueror Influenced Maps");
        }

        Section("Delirium and other enchanted maps") {
            QuickUI([0.0, "Delirium High Maps", "maps->enchanted;t1"], "SHD", ["MapTier"], "High Delirium and other enchanted maps");
            QuickUI([0.0, "Delirium Maps", "maps->enchanted;any"], "SHD", ["MapTier"], "Delirium and other enchanted maps");
            QuickUI([1.0, "Maps with Implicits (high tier)", "maps->implicitmod;t1"], "SD", ["MapTier"]");
            QuickUI([1.0, "Maps with Implicits", "maps->implicitmod;any"], "SD", ["MapTier"]);
        }

        Section("Blighted Maps") {
            Function BlightedMapTier($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["MapTier"], $text, ["Maps", "ASO"]); }

            QuickUI([0.0, "Uber Blighted Map", "maps->blighted;uber"], "SH", []);

            Search S0(0.0, "Blighted Maps High") { Class Maps; BlightedMap True; Rarity Rare; MapTier 15; }
            Search S2(0.0, "Blighted Maps Low") { Class Maps; BlightedMap True; Rarity Rare; MapTier 4; }

            BlightedMapTier(S0, "SH", "High Blighted Maps");
            BlightedMapTier(S2, "SH", "Low Blighted Maps");

            Conditional("?BlightedMapNewTier") { Show; Class Maps; BlightedMap True; SetTextColor 210 178 135; SetBackgroundColor 0 0 0 255; SetBorderColor 213 159 100 200; SetFontSize 42; }
            ElementAdder_Tier("?BlightedMapNewTier", "BlightedMapTier");
        }

        Section("Beyond Maps (identified)") {
            QuickUI([0.0, "ModFiltering: Maps 1", "maps->identified;nemesisbeyond"], "SD", ["MapTier", "Mods"], "Beyond Maps");
        }
    }

    Section("Map-like items, Scarabs", "Scarab", "E") {
        Section("Endgame Atlas Boss Invitation", "MavensOrb", "E") {
            Function MavenInvUI($s, $shd = "SHD", $title) { QuickUI($s, $shd, [], $title, ["AtlasBossInvitations", "O"]); }

            TierListToolBar();

            MavenInvUI([0.0, "Maven's Invitation Boss", "exotic->invitation;t1"], "SH", "Maven's Invitations - T1");
            MavenInvUI([0.0, "Maven's Invitation Boss Tier 2", "exotic->invitation;t2"], "SH", "Maven's Invitations - T2");
            MavenInvUI([0.0, "Maven's Invitation Area", "exotic->invitation;t3"], "SH", "Maven's Invitations - T3");

            Conditional("?MavenInviteNewTier") { }
            ElementAdder_Tier("?MavenInviteNewTier", "MavenInvUI");

            QuickUI([1.0, "Maven's invitations", "questlike;invitations"], "S", [], "Maven's Quest-Only Invitations");
        }

        Section("Itemized League Areas", "InscribedUltimatum") {
            QuickUI([1.0, "Chronicle of Atzoatl (Incursion Temple Map Item)", "miscmapitemsextra;itemizedleagues"], "SH", [], "Itemized League Areas");
            QuickUI([0.0, "Ultimatum Boss Area", "artefact->piece;vaal"], "SH", []);
            QuickUI([0.0, "Itemized Sanctum", "exoticmap->sanctum;any"], "SH", []); // Sanctum Vaults Research -> started run
        }

        Section("Reliquary Keys", "VaalReliquaryKey") {
            QuickUI([1.0, "Special map items", "miscmapitemsextra;relickeys"], "S", [], "Reliquary Keys", ["all", "SO"]);
            QuickUI([0.0, "Other Reliquary Keys", "miscmapitemsextra;relickeyssafe"], "S", []);
        }

        Section("Map Fragments", "SacrificeAtMidnight", "E") {
            Function FragmentsFunc($s, $shd = "SHD", $title, $descr = false) { QuickUI($s, $shd, [], $title, ["MapFragmentsNoScarabs", "O"], $descr); }

            TierListToolBar("Fragment", [], []);

            FragmentsFunc([1.1, "Map Fragments T1", "fragments;t1"], "SH", "Fragments, Tier 1:");
            FragmentsFunc([1.1, "Map Fragments T2", "fragments;t2"], "SH", "Fragments, Tier 2:");
            FragmentsFunc([1.1, "Map Fragments T3", "fragments;t3"], "SH", "Fragments, Tier 3:");
            FragmentsFunc([1.1, "Map Fragments T4 (remaining)", "fragments;t4"], "SH", "Fragments, Tier 4:");

            Conditional("?MapFragmentNoBreachNewTier") { Show; Class "Map Fragments"; SetFontSize 45; SetBorderColor 0 0 0 255; PlayAlertSound 2 300; MinimapIcon 2 White Triangle; PlayEffect White; SetTextColor 0 0 0 255; SetBackgroundColor 159 15 213 255; }
            ElementAdder_Tier("?MapFragmentNoBreachNewTier", "FragmentsFunc");

            Conditional("?FragmentNoBreachNewTiersHidden") { }
            ElementAdder_Tier("?FragmentNoBreachNewTiersHidden", null, true, "MapFragmentsNoScarabs", "OH");
        }

        Section("Stacked Sacrifice Fragments", "SacrificeAtMidnight") {
            Function FragmentsFunc($s, $shd = "SD", $title, $descr = false) { QuickUI($s, $shd, [], $title, ["MapFragmentsNoScarabs", "SO"], $descr); }
            FragmentsFunc([1.0, "Stacked Map Fragments T3", "fragments->stacked;t3"], "SD", "Stacked Sacrifice Fragments:");
        }

        Section("Breachstones", "Breachstone") {
            Function BreachstoneFunc($s, $shd = "SHD", $title, $descr = false) { QuickUI($s, $shd, [], $title, ["Breachstones", "O"], $descr); }

            TierListToolBar();

            BreachstoneFunc([0.0, "Breachstones Tier 1", "breachstone;t1"], "SH");
            BreachstoneFunc([0.0, "Breachstones Tier 2", "breachstone;t2"], "SH");
            BreachstoneFunc([0.0, "Breachstones Tier 3", "breachstone;t3"], "SH");

            Conditional("?BreachstonesNewTier") { }
            ElementAdder_Tier("?BreachstonesNewTier", "BreachstoneFunc");

            Conditional("?BreachstonesNewTiersHidden") { }
            ElementAdder_Tier("?BreachstonesNewTiersHidden", null, true, "Breachstones", "OH");
        }

        Section("Scarabs", "Scarab", "E") {
            Function ScarabTierList($s, $shd = "SHD", $text) { QuickUI($s, $shd, [], $text, ["Scarabs", "O"]); }

            TierListToolBar("Scarab", [], []);

            ScarabTierList([0.0, "Betrayal Scarabs T1", "fragments->scarabs;t1"], "SH", "Tier 1 Scarabs");
            ScarabTierList([0.0, "Betrayal Scarabs T2", "fragments->scarabs;t2"], "SH", "Tier 2 Scarabs");
            ScarabTierList([0.0, "Betrayal Scarabs T3", "fragments->scarabs;t3"], "SH", "Tier 3 Scarabs");
            ScarabTierList([0.0, "Betrayal Scarabs T4", "fragments->scarabs;t4"], "SH", "Tier 4 Scarabs");

            // new tiers
            Conditional("?ScarabNewTiers") { Show; Class "Map Fragments"; SetFontSize 45; SetTextColor 159 15 213 255; SetBorderColor 159 15 213 255; SetBackgroundColor 0 0 0 255; PlayAlertSound 2 300; PlayEffect Yellow; MinimapIcon 2 Yellow Hexagon; }
            ElementAdder_Tier("?ScarabNewTiers", "ScarabTierList");

            Conditional("?ScarabNewTiersHidden") {}
            ElementAdder_Tier("?ScarabNewTiersHidden", null, true, "Scarabs", "OH");
        }

        Section("Stacked Scarabs", "Scarab") {
            Function StackedScarabsFunc($s, $shd = "SD", $title) { QuickUI($s, $shd, [], $title, ["Scarabs", "SO"]); }
            StackedScarabsFunc([1.0, "Stacked Scarabs", "fragments->stackedscarabs;t3"], "SD");
        }

        Section("Atlas Memories", "AtlasMemory") {
            Function AtlasMemoryUiFunc($s, $shd = "SHD", $text) { QuickUI($s, $shd, [], $text, ["AtlasMemories", "O"]); }

            AtlasMemoryUiFunc([0.0, "Atlas Master Memories Tier 1", "exoticmap->memory;any"], "SH");

            // new tiers
            Conditional("?AtlasMemoriesNewTier") { }
            ElementAdder_Tier("?AtlasMemoriesNewTier", "AtlasMemoryUiFunc");

            // hide-tier
            Conditional("?AtlasMemoriesNewTierHidden") { }
            ElementAdder_Tier("?AtlasMemoriesNewTierHidden", null, true, "AtlasMemories", "HO");

            Divider();

            QuickUI([0.0, "Atlas Master Memories with good mods", "exoticmap->memory;t1"], "SD", ["Mods"], null, ["AtlasMemories", "OAS"]);
        }

        Title("Splinters");

        Section("Simulacrum Splinters", "DeliriumMapItemSimulacrum") {
            QuickUI([0.0, "Simulacrum Splinter Stacks 4", "currency->splinter->simulacrum;t1"], "SD", ["StackSize"], "Simulacrum - Huge Stacks");
            QuickUI([0.0, "Simulacrum Splinter Stacks 3", "currency->splinter->simulacrum;t2"], "SD", ["StackSize"], "Simulacrum - Large Stacks");
            QuickUI([0.0, "Simulacrum Splinter Stacks 2", "currency->splinter->simulacrum;t3"], "SD", ["StackSize"], "Simulacrum - Medium Stacks");
            QuickUI([0.0, "Simulacrum Splinter Stacks 1", "currency->splinter->simulacrum;t4"], "SD", ["StackSize"], "Simulacrum - Small Stacks");
            QuickUI([0.0, "Simulacrum Splinters", "currency->splinter->simulacrum;t5"], "SH");
        }

        Section("Splinters - Single", "MergedSplinters", "E") {
            Function SplinterTierList($s, $shd = "SHD", $text) { QuickUI($s, $shd, [], $text, ["Splinters", "O"]); }

            TierListToolBar();

            SplinterTierList([0.0, "Breach Splinters & Legion Splinters T1", "currency->splinter;t1"], "SH", "Splinters Tier 1");
            SplinterTierList([0.0, "Breach Splinters & Legion Splinters T2", "currency->splinter;t3"], "SH", "Splinters Tier 2");

            Conditional("?LegionSplintersNewTier") { Show; Class Currency; SetTextColor 210 178 135; SetBackgroundColor 0 0 0 255; SetBorderColor 213 159 100 200; SetFontSize 42; }
            ElementAdder_Tier("?LegionSplintersNewTier", "SplinterTierList");

            Conditional("?LegionSplinterNewTiersHidden") {}
            ElementAdder_Tier("?LegionSplinterNewTiersHidden", null, true, "Splinters", "OH");
        }

        Section("Splinters - High Tier Stacks", "MergedSplinters", "E") {
            Function SplinterStacksUI($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["StackSize"], $text, ["Splinters", "OS"]); }

            SplinterStacksUI([0.0, "Breach and Legion splinter very large stacks 1", "currency->stackedsplintershigh;t1"], "SD");
            SplinterStacksUI([0.0, "Breach and Legion splinter large stacks 1", "currency->stackedsplintershigh;t2"], "SD");
            SplinterStacksUI([0.0, "Breach and Legion splinter stacks 1", "currency->stackedsplintershigh;t3"], "SD");

            Conditional("?BreachLegionSplinterStacksNewTier") { Show; Class Currency; SetTextColor 210 178 135; SetBackgroundColor 0 0 0 255; SetBorderColor 213 159 100 200; SetFontSize 42; }
            ElementAdder_Tier("?BreachLegionSplinterStacksNewTier", "SplinterStacksUI");
        }

        Section("Splinters - Low Tier Stacks", "MergedSplinters", "E") {
            Function SplinterStacksUI($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["StackSize"], $text, ["Splinters", "SO"]); }
            SplinterStacksUI([0.0, "Breach and Legion splinter very large stacks 2 large", "currency->stackedsplinterslow;t1"], "SD");
            SplinterStacksUI([0.0, "Breach and Legion splinter large stacks 2", "currency->stackedsplinterslow;t2"], "SD");
            SplinterStacksUI([0.0, "Breach and Legion splinter stacks 2", "currency->stackedsplinterslow;t3"], "SD");
        }
    }

    Section("Unique Maps", "OlmecsSanctumMap", "E") {

        Section("Unique Maps Tiering", null, "E") {
            Function UniqueMaps ($s, $shd = "SHD", $title) { QuickUI($s, $shd, [], $title, ["UniqueMaps", "O"]); }

            TierListToolBar("UniqueMap", [], []);

            UniqueMaps([0.0, "Unique Maps T1", "uniques->maps;t1"], "SH", "Unique Maps Tier 1");
            UniqueMaps([0.0, "Unique Maps T3", "uniques->maps;t2"], "SH", "Unique Maps Tier 2");
            UniqueMaps([0.0, "Unique Maps T2", "uniques->maps;t3"], "SH", "Unique Maps Tier 3");
            UniqueMaps([0.0, "Unique Maps T4", "uniques->maps;t4"], "SH", "Unique Maps Tier 4");

            Conditional("?UniqueMapTier") { Show; Rarity Unique; Class Maps; SetFontSize 45; SetBorderColor 175 96 37 255; PlayAlertSound 4 300; MinimapIcon 2 Brown Square; PlayEffect Brown; }
            ElementAdder_Tier("?UniqueMapTier", "UniqueMaps");

            Conditional("?UniqueMapNewTiersHidden") {  }
            ElementAdder_Tier("?UniqueMapNewTiersHidden", null, true, "UniqueMaps", "HO");
        }

        Section("Highlight specific unique maps") {
            Function UniqueMaps ($s, $shd = "SHD", $title) { QuickUI($s, $shd, ["MapTier"], $title, ["UniqueMaps", "SOA"]); }
            Conditional("?UniqueMapRule", ["c9.maps.unique.all"]) { Show; Rarity Unique; Class Maps; SetFontSize 45; SetBorderColor 175 96 37 255; PlayAlertSound 4 300; MinimapIcon 2 Brown Square; PlayEffect Brown; }
            ElementAdder_Tier("?UniqueMapRule", "UniqueMaps");
        }

        Section("Special Unique Maps") {
            QuickUI([0.0, "T16 Harbinger Map", "uniques->maps;exharbinger"], "SD", [], "Tier 16 Harbinger Map");
//            QuickUI([0.0, "Ultimatum Trialmaster Map Piece", "artefact->piece;ultimatum"], "SH", []);
        }
    }

    Section("Heist Contracts, Expedition Logbooks", "HeistGrandBlueprint") {
        Warning("Path of Exile lootfilters can't filter contracts by their required heist jobs or reward value!");

        Section("Contracts", "HeistContract") {
            Function ContractList($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["ItemLevel"], $text, ["HeistContractsNormal", "O"]); }

            ContractList([0.0, "Heist Contract T3", "heist->contract;handpicked"], "SH", "All Contracts (for your tiering)");

//            QuickUI([0.0, "Remaining Contracts", "heist->contract;any"], "SH", [], "", [], "Remaining contracts that were not caught be the rules above due to possible ItemLevel requirements."););

            Conditional("?HeistContractNewTiers") { Show; Class "Contracts"; SetTextColor 210 178 135; SetBackgroundColor 0 0 0 255; SetBorderColor 213 159 100 200; SetFontSize 42; }
            ElementAdder_Tier("?HeistContractNewTiers", "ContractList");

            Conditional("?HeistContractsNewTiersHidden") { }
            ElementAdder_Tier("?HeistContractsNewTiersHidden", null, true, "HeistContractsNormal", "HO");

            QuickUI([1.0, "Untiered Heist Contracts", "heist->contract;exhide"], "SH"); // todo: there is no point in this rule??
        }

        Section("Unique Contracts", "HeistContract") {
            Function UniqueHeistContractFunc($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["HeistContractsUnique"], $text); }

            Search S2(0.0, "Unique Heist Contract") { BaseType "Contract: Mansion"; Rarity Unique; }
            UniqueHeistContractFunc(S2, "SH");

            // new tiers
            Conditional("?UniqueContractsNewTier") { }
            ElementAdder_Tier("?UniqueContractsNewTier", "UniqueHeistContractFunc");
        }

        Section("Quest Contracts", "HeistContract") {
            Warning("Quest Contracts Can't Be Hidden!");
            QuickUI([0.0, "Heist Quest Contracts", "questlikeexception;questheist"], "S", []);
        }

        Section("Custom Contract Rules", "HeistContract") {
            Function CondShowBase ($s, $shd = "SHD", $title) { QuickUI($s, $shd, ["ItemLevel", "DropLevel", "AreaLevel", "RarityU", "Corrupted"], $title, ["HeistContractsAll", "SO"]); }
            Conditional("?CCustomHeistContractRules", ["c9.maplike.all"]) { Show; Class Contract; SetBorderColor 200 0 0; SetFontSize 38; ItemLevel >= 68; Rarity Rare; }
            ElementAdder_Tier("?CCustomHeistContractRules", "CondShowBase");
        }

        Divider();

        Section("Blueprints - Grand Heists", "HeistGrandBlueprint") {
            Function ContractList($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["ItemLevel"], $text, ["HeistBlueprints", "O"]); }

            TierListToolBar(null, null, null, null, "Blueprint");

            ContractList([0.0, "Grand Heist Blueprint Tier 1", "heist->blueprint;handpicked"], "SH", "All Blueprints (for your tiering)");

            Search S1(0.0, "Grand Heist Blueprint Tier 2") { -BaseType "Blueprint: Bunker"; Class "Blueprints"; Rarity Magic; }
            QuickUI(S1, "SH", [], "Remaining Blueprints");

            Conditional("?HeistBlueprintNewTiers") { Show; Class "Blueprints"; SetTextColor 210 178 135; SetBackgroundColor 0 0 0 255; SetBorderColor 213 159 100 200; SetFontSize 42; }
            ElementAdder_Tier("?HeistBlueprintNewTiers", "ContractList");

            Conditional("?HeistBlueprintNewTiersHidden") { }
            ElementAdder_Tier("?HeistBlueprintNewTiersHidden", null, true, "HeistBlueprints", "HO");
        }

        Section("Custom Blueprint Rules", "HeistGrandBlueprint") {
            Function CondShowBase ($s, $shd = "SD", $title) { QuickUI($s, $shd, ["ItemLevel", "DropLevel", "AreaLevel", "RarityU", "Corrupted"], $title, ["HeistBlueprints", "SO"]); }

            Conditional("?CCustomHeistBlueprintRules", ["c9.maplike.all"]) { Show; Class Blueprint; SetBorderColor 200 0 0; SetFontSize 38; ItemLevel >= 68; Rarity Rare; }
            ElementAdder_Tier("?CCustomHeistBlueprintRules", "CondShowBase");
        }

        Divider();

        Section("Expedition Logbooks") { // ExpeditionLogbookMap
            // Expedition Logbook
            Description("Logbooks lead you to maps which contain one huge Expedition event, similar to Blighted Maps. You can use the upper section to give certain logbooks more highlight.");
//            QuickUI([0.0, "Expedition Logbook Maps High", "expedition->logbook->high;any"], "SH", ["ItemLevel"]);
            QuickUI([0.0, "Expedition Logbook Maps", "expedition->logbook;any"], "SH", []);
        }
    }
}

Chapter() { Ad(); }

//===================================================================================================
// CRAFTING
//===================================================================================================

Chapter() {
    SectionTitle("Endgame - General (lvl 68+)");
    
    Section("Highlight specific bases (endgame)", "Firefly") {

        Function CondShowBaseQuick ($s, $shd = "SHD", $title)
        {
            QuickUI($s, $shd, ["RarityU", "ItemLevel", "Stats_All"], $title, ["rarityItems", "OS"], "Quickly highlight additional bases. If you need more power and options, there's a lot more custom rules lower in the customizer");
        }

        Conditional("?CQuickEndgameCustomRule1", ["c3.gear.crafting-decorators"]) { Show; BaseType == "Imbued Wand"; SetBorderColor 200 0 0; SetBackgroundColor 60 0 0; SetFontSize 40; ItemLevel >= 68; Rarity Normal; Corrupted False; Mirrored False; }
        ElementAdder_Tier("?CQuickEndgameCustomRule1", "CondShowBaseQuick");
    }

    Section("Crafting", "Regalia") {
        Description("High level, specific crafting bases are in high demand early in the league and can be useful in SSF environments. This section handles non-influenced versions of these items.");

        Section("Expensive 86+ atlas bases", null, "E") {
            TierListToolBar();
            Description("This section contains all bases that are currently worth around 10++ chaos, no matter the rarity. Only atlas bases (and some exceptions) are allowed in this section.");
            QuickUI([0.0, "Expensive Crafting Bases", "crafting->expensive;any"], "SH", ["ItemLevel", "Rarity"], "", ["Gear", "SO"]);
        }

        Section("Decorators (generic crafting bases)") {
            Box() { Description("Decorators highlight specific characteristics of an item, by changing the appearance, without deciding whether it is hidden or shown."); }
            QuickUI([1.0, "Endgame crafting deco rare ilvl 86", "decorator->craftingrare;raredecoratorilvl86"], "SD", ["ItemLevel"], "Decorator: ItemLevel 86+ rares");
            QuickUI([1.0, "Endgame crafting deco rare ilvl 84", "decorator->craftingrare;raredecoratorilvl84"], "SD", ["ItemLevel"], "Decorator: ItemLevel 84+ rares");
            QuickUI([1.0, "Endgame crafting deco rare ilvl 75", "decorator->craftingrare;raredecoratorilvl75"], "SD", ["ItemLevel"], "Decorator: ItemLevel 75+ rares");
            Divider();
            QuickUI([1.0, "Endgame crafting deco rare enhancer gear", "decorator->craftingrare;raredecoratorgear"], "SD", ["ItemLevel"], "Decorator: Rare gear");
            QuickUI([1.0, "Endgame crafting deco rare enhancer jewelery", "decorator->craftingrare;raredecoratorjwlry"], "SD", ["ItemLevel"], "Decorator: Rare jewellery");
            QuickUI([1.0, "Endgame crafting deco normal", "decorator->craftingrare;normaldecorator"], "SD", ["ItemLevel"], "Decorator: Normal items");
            QuickUI([1.0, "Endgame crafting deco normal trinkets", "decorator->craftingrare;normaldecoratorjwlry"], "SD", ["ItemLevel"], "Decorator: Normal trinkets");
        }

        Section("Early endgame harvest bases") {
            QuickUI([1.0, "Early endgame harvest crafting bases", "normalcraft->extra;any"], "SH", ["ItemLevel", "Rarity"], "", ["Gear", "SO"]);
        }

        Divider();

        Function RarityCraftBox ($s, $text) { QuickUI($s, "SD", ["ItemLevel", "Rarity"], $text); }

        DeepSearch T1(3.0, "86 normal crafting bases T1", "normalcraft->i86;t1") { ItemLevel 86; Rarity Normal; BaseType "Steel Ring"; }
        DeepSearch T1(3.0, "84 normal crafting bases T1", "normalcraft->i84;t1") { ItemLevel 84; Rarity Normal; BaseType "Steel Ring"; }
        DeepSearch T1(3.0, "low normal crafting bases T1", "normalcraft->rest;t1") { ItemLevel 80; Rarity Normal; BaseType "Steel Ring"; }

        DeepSearch T2(3.0, "86 normal crafting bases T2", "normalcraft->i86;t2") { ItemLevel 86; Rarity Normal; BaseType "Bone Helmet"; }
        DeepSearch T2(3.0, "84 normal crafting bases T2", "normalcraft->i84;t2") { ItemLevel 84; Rarity Normal; BaseType "Bone Helmet"; }
        DeepSearch T2(3.0, "low normal crafting bases T2", "normalcraft->rest;t2") { ItemLevel 80; Rarity Normal; BaseType "Bone Helmet"; }

        DeepSearch T3(3.0, "86 normal crafting bases T3", "normalcraft->i86;t3") { ItemLevel 86; Rarity Normal; BaseType "Lion Pelt"; }
        DeepSearch T3(3.0, "84 normal crafting bases T3", "normalcraft->i84;t3") { ItemLevel 84; Rarity Normal; BaseType "Lion Pelt"; }
        DeepSearch T3(3.0, "low normal crafting bases T3", "normalcraft->rest;t3") { ItemLevel 80; Rarity Normal; BaseType "Lion Pelt"; }

        Section("Tier 1") {
            RarityCraftBox(T1:0);
            RarityCraftBox(T1:1);
            RarityCraftBox(T1:2);
        }

        Section("Tier 2") {
            RarityCraftBox(T2:0);
            RarityCraftBox(T2:1);
            RarityCraftBox(T2:2);
        }

        Section("Tier 3") {
            RarityCraftBox(T3:0);
            RarityCraftBox(T3:1);
            RarityCraftBox(T3:2);
        }

        BaseTypeMatrix(true, "Tier 1", T1, "Tier 2", T2, "Tier 3", T3);

        // FYI: only available on beta during development
//        MultiTierThresholdEditor("ItemLevel");
    }

    Section("Additional rules", "Lion") {

        Section("Perfection BaseTypes") {
            Description("In the 3.16 update the base armour value of armour/es/evasion on items can vary by 15%. This value is inherent and can only be changed with a sacred orb. The filter attempts to highlight items with perfect base defense stats for the best crafting results");
            Search T1(0.0, "Perfect Armours T1", "crafting->perfectarmours;t1") { }
            Search T2(0.0, "Perfect Armours T2", "crafting->perfectarmours;t2") { }
            Search T3(0.0, "Perfect Armours T3", "crafting->perfectarmours;t3") { }

            QuickUI(T1, "SH", ["Corrupted", "ItemLevel", "BaseDefencePercentile", "RarityU"]);
            QuickUI(T2, "SH", ["Corrupted", "ItemLevel", "BaseDefencePercentile", "RarityU"]);
            QuickUI(T3, "SH", ["Corrupted", "ItemLevel", "BaseDefencePercentile", "RarityU"]);

            BaseTypeMatrix(true, "Tier 1", T1, "Tier 2", T2, "Tier 3", T3);
        }

        Section("Synthesised items") {
            Description("Some itemclasses like 'amulets' are completely covered through the class-based filtering below and don't need representing through the matrix.");
            QuickUI([0.0, "Synthesised items T1", "exotic->synthesised;synthselected"], "SD", ["ItemLevel", "DropLevel", "Identified", "BTM"]);

            Divider();

            QuickUI([0.0, "Synthesised items classes", "exotic->synthesised;synthclasses"], "SD", ["AllGearClassesPlusFlaskJewelMap", "ItemLevel", "DropLevel", "Identified"]);
            QuickUI([0.0, "Synthesised items", "exotic->synthesised;synthrandom"], "SD", ["AllGearClassesPlusFlaskJewelMap", "ItemLevel", "DropLevel", "Identified"]);
        }

        Section("Fractured items") {
            Description("Some itemclasses like 'Jewels' are completely covered through the class-based filtering below and don't need representing through the matrix.");
            Search S0(0.0, "Fractured items, tier 1", "exotic->fractured;fractt1") {}
            Search S1(0.0, "Fractured items, tier 2", "exotic->fractured;fractt2") {}
            QuickUI(S0, "SH", ["AllGearClassesPlusFlaskJewelMapHeist", "ItemLevel", "DropLevel", "Identified"]);
            QuickUI(S1, "SH", ["AllGearClassesPlusFlaskJewelMapHeist", "ItemLevel", "DropLevel", "Identified"]);
            BaseTypeMatrix(true, "Tier 1", S0, "Tier 2", S1);

            Divider();

            QuickUI([0.0, "Fractured items, classes", "exotic->fractured;fractspecial"], "SH", ["AllGearClassesPlusFlaskJewelMapHeist", "ItemLevel", "DropLevel", "Identified"], "Fractured Exotic Classes");
            QuickUI([0.0, "Fractured items, medium", "exotic->fractured;fractothers"], "SH", ["AllGearClassesPlusFlaskJewelMapHeist", "ItemLevel", "DropLevel", "Identified"]);
        }

        Section("Enchanted items") {
            Description("Enchanted items, particularly helmets, can sometimes be very expensive and are worth checking up on.");

//            DeepSearch S0(0.0, "Enchanted items (helmets)", "exotic->enchanted;others") { AnyEnchantment True; Rarity Normal; Class Helmets; BaseType "Ursine Pelt"; }
//            DeepSearch S1(0.0, "Enchanted items (remaining)", "exotic->enchanted;glovesboots") { AnyEnchantment True; Rarity Normal; Class Gloves; BaseType "Vaal Gauntlets"; }
//            Search S2(0.0, "Heist Enchantments", "exotic->enchanted;exotic") { BaseType "Vaal Regalia"; Rarity Rare; AnyEnchantment True; }

//            QuickUI([0.0, "", "exotic->enchanted;t1"], "SH", []);
//            QuickUI([0.0, "", "exotic->enchanted;t2"], "SH", []);

//            QuickUI(S0, "SD", ["Corrupted", "ItemLevel", "DropLevel"], "", ["Gear", "ASO"]);
//            QuickUI(S1, "SD", ["Corrupted", "ItemLevel", "DropLevel"], "", ["Gear", "ASO"]);
//            QuickUI(S2, "SD");

            QuickUI([0.0, "Enchanted items", "exotic->enchanted;exotic"], "SH", ["Corrupted", "ItemLevel", "DropLevel", "Rarity"]);

//            Function EnchantedItemsFunc ($s, $shd = "SHD", $title)
//            {
//                QuickUI($s, $shd, ["LabEnchantmentClasses", "BaseType", "Rarity", "Stats_RareGear"], $title, ["Enchantments", "OS", "HasEnchantment"]);
//            }

//            Conditional("?CEnchantedItems", [0]) { Show; SetBorderColor 0 240 190 240; SetFontSize 40; Class == "Boots" "Gloves" "Helmets"; Rarity Normal Magic Rare; AnyEnchantment True; MinimapIcon 2 White Hexagon; PlayEffect White Temp; }
//            ElementAdder_Tier("?CEnchantedItems", "EnchantedItemsFunc");
        }

        Section("30+ Quality Items", "") // Regalia
        {
            QuickUI([0.0, "High Quality items", "normalcraft->lowstrict;overquality"], "SHD", ["Quality", "ItemLevel", "DropLevel", "AllGearClasses"]);
        }

        Section("White Sockets") {
            QuickUI([0.0, "3 White sockets", "miscendgamerules;whitesocketweapons1h"], "SD", ["SocketedGearClasses", "ItemLevel", "Corrupted"], null, ["Gear", "SAO"]);
            QuickUI([0.0, "6 White sockets", "socketslinks;whitesocketweapons2h"], "SD", ["SixSocketClasses", "ItemLevel", "Corrupted"], null, ["Gear", "SAO"]);
        }

        Section("Double corrupted items") {
            QuickUI([0.0, "Double corrupted items", "exotic->corruptions;doublecorruptedjwlry"], "SD", ["ItemLevel", "Rarity", "AllGearClassesPlusJewel"], "Double corrupted handpicked items");
            QuickUI([0.0, "Double corrupted big items", "exotic->corruptions;doublecorruptedany"], "SD", ["ItemLevel", "Rarity", "AllGearClassesPlusJewel"], "Doule corrupted remaining items");
        }

        Section("Specific Single corrupted items") {
            Description("ItemLevel 80+ quivers can roll valuable chain corruptions. This rule helps detecting these.");
            QuickUI([0.0, "Corrupted rare quivers", "exotic->corruptions;singlecorruptedquivers"], "SD", ["ItemLevel", "Rarity", "AllGearClassesPlusJewel"], "Single corrupted rare quivers");
        }

        Section("4-links and 5-links") {
            Description("Usually the player will find enough 4-links by the time they're 68, however this can be useful for certain private leagues and ssf players with special plans");
            QuickUI([0.0, "68+ 4 Links", "normalcraft->lowstrict;earlyendgame4link"], "SD", ["AreaLevel", "FourPlusSocketClasses", "Rarity"], "Early endgame 4-links:");
            QuickUI([0.0, "Endgame 5 links b", "socketslinks;5links"], "SD", ["AreaLevel", "SixSocketClasses", "ItemType"], "Endgame 5-linked items:");
        }
    }

    Section("League-specific items and mods", "Talisman") {

        Section("Hinekora's Lock", "HinekorasLock") {
            // crafting prediction items thingy
            QuickUI([0.0, "Hinekora's Lock", "currency->trial->orblike;t1"], "S", [], null, null, "Hinekor's lock is a valuable reward from the trial. Once applied on an item, you'll foresee the outcome of currency items used on the same item - until you'll actually use one of them.");
        }

        Section("Tattoos", "HonouredTattoooftheWiseMan") {
            Function TattooFunc($s, $shd = "SHD", $title) { QuickUI($s, $shd, [], $title, ["AncTrialTattoos", "O"]); }

            Description("Tattoos are rewards from the trials - these are applied to your skill tree and replace stat-granting nodes with other effects!");
            TattooFunc([0.0, "Tattoos Tier 1", "currency->trial->tattoo;t1"], "SH");
            TattooFunc([0.0, "Tattoos Tier 2", "currency->trial->tattoo;t2"], "SH");
            TattooFunc([0.0, "Tattoos Tier 3", "currency->trial->tattoo;t3"], "SH");
            TattooFunc([0.0, "Tattoos Tier 4", "currency->trial->tattoo;t4"], "SH");

            // new tiers
            Conditional("?AncTrialTattooTier") { }
            ElementAdder_Tier("?AncTrialTattooTier", "TattooFunc");

            // hide tier
            Conditional("?AncTrialTattooHidden") { }
            ElementAdder_Tier("?AncTrialTattooHidden", null, true, "AncTrialTattoos", "OH");
        }

        Section("Omens", "OmenoftheSoulDevourer") {
            Function OmenFunc($s, $shd = "SHD", $title) { QuickUI($s, $shd, [], $title, ["AncTrialOmens", "O"]); }

            Description("Omens will trigger certain effects as long as they are in your inventory. The omen is then consumed.");
            OmenFunc([0.0, "Omens Tier 1", "currency->trial->omen;t1"], "SH");
            OmenFunc([0.0, "Omens Tier 2", "currency->trial->omen;t2"], "SH");
            OmenFunc([0.0, "Omens Tier 3", "currency->trial->omen;t3"], "SH");
            OmenFunc([0.0, "Omens Tier 4", "currency->trial->omen;t4"], "SH");

            // new tiers
            Conditional("?AncTrialOmensNewTier") { }
            ElementAdder_Tier("?AncTrialOmensNewTier", "OmenFunc");

            // hide tier
            Conditional("?AncTrialOmensHidden") { }
            ElementAdder_Tier("?AncTrialOmensHidden", null, true, "AncTrialOmens", "OH");
        }

        Section("Sanctum Relics", "SanctumRelic") {
            Function SanctumRelicsUI($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["Rarity"], $text, ["SanctumRelics", "O"]); }
            Description("Relics drop in the sanctum and provide sanctum-exclusive benefits to your runs.");

            SanctumRelicsUI([0.0, "Forbidden Sanctum Relics Tier 1", "artefact->sanctifiedrelics;selectedrelics"], "SH");
            QuickUI([0.0, "Remaining Forbidden Sanctum Relics", "artefact->sanctifiedrelics;anyrelic"], "SH");

            // new tiers
            Conditional("?SanctumRelicsNewTiers") { }
            ElementAdder_Tier("?SanctumRelicsNewTiers", "SanctumRelicsUI");

            // hide tier
            Conditional("?SanctumRelicsNewTiersHidden") { }
            ElementAdder_Tier("?SanctumRelicsNewTiersHidden", null, true, "SanctumRelics", "OH");
        }

        Section("Sanctum Special Relics", "SanctifiedSanctumRelic") {
            Description("Unique Relics enable 'challenge runs' in the sanctum that grant improved rewards as well!");
            QuickUI([0.0, "Unique Relics", "artefact->sanctifiedrelics;uniquerelics"], "S");
            QuickUI([0.0, "Sanctum Sanctified Relics", "artefact->sanctifiedrelics;anysanctified"], "SH", []);
        }

        Section ("Crucible Item Passive Trees", "PrimevalRemnantCrucibleMap") {
            QuickUI([0.0, "Items with Crucible passive tree", "exotic->crucible;crucibleany"], "SH", ["DropLevel", "Rarity", "ItemLevel"]);
        }

        Section("'Ward' BaseTypes & Iron Flask", "ExpeditionArtifact") {
            // Runic Helm, Runic Crest, Runic Crown
            Description("Expedition introduced a new defence mechanic, Ward, in addition to the traditional ones like Armour or Evasion. Ward can only be found on these new BaseTypes:");
            QuickUI([0.0, "Expedition Ward Bases", "exoticbases;exoticexpeditionbases"], "SH", ["ItemLevel", "Rarity", "ExpeditionWardBases"]);
        }

        Section("Breach Grasping Mail", "BreachSplinter") {
            QuickUI([1.0, "Grasping Mail", "exoticbases;exoticbasesmisc"], "SD", ["Rarity", "ItemLevel"]);
        }

        Section("Sacrificial Garbs", "SacrificeAtMidnight") {
            QuickUI([0.0, "Exotic Bases", "exoticbaseslower;exoticsacrificial"], "SD", ["ItemLevel", "Rarity", "Corrupted"], null, ["Gear", "OS"]);
        }

        Section("Ritual BaseTypes", "BloodFilledRitualVessel") {
            Search S2(0.0, "Ritual BaseTypes") { BaseType "Nexus Gloves"; Rarity Normal; }
            QuickUI(S2, "SD", ["RitualBases", "Rarity", "ItemLevel"]);
        }

        Section("Heist Experimented BaseType", "HeistExpBase") {
            Function ContractList($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["ItemLevel"], $text, ["HeistExpBases", "O"]); }

            ContractList([0.0, "Experimented BaseTypes Heist T1", "exoticbases;exoticheistbases"], "SD", "Experimented BaseTypes");

            Conditional("?HeistExpBasesNewTiers") { Show; SetTextColor 210 178 135; SetBackgroundColor 0 0 0 255; SetBorderColor 213 159 100 200; SetFontSize 42; }
            ElementAdder_Tier("?HeistExpBasesNewTiers", "ContractList");

            Conditional("?HeistExpBasesNewTiersHidden") { }
            ElementAdder_Tier("?HeistExpBasesNewTiersHidden", null, true, "HeistExpBases", "OH");
        }

        Section("Heist Trinkets", "HeistTrinket") {
            // info: these are always corrupted and rare
            Search S0(0.0, "Heist Trinkets") { BaseType "Thief's Trinket"; Class "Trinkets"; Rarity Rare; }
            QuickUI(S0, "SH", ["ItemLevel", "AreaLevel"]);
        }

        Section("Replica Uniques", "HeistReplicaUnique", "E") {
            Function ReplicaUniqueList($s, $shd = "SHD", $text, $descr = false) { QuickUI($s, $shd, [], $text, ["GearPlusFlasks", "O"], $descr); }

            TierListToolBar();

            ReplicaUniqueList([0.0, "Replica Uniques Tier 1", "uniques->replicas;t1"], "S", "Tier 1:");
            ReplicaUniqueList([0.0, "Replica Uniques Tier 2", "uniques->replicas;t2"], "S", "Tier 2:");
            ReplicaUniqueList([0.0, "Replica Uniques (MultiBase)", "uniques->replicas;multi"], "SH", "Multi-Base Uniques:", "Some BaseTypes have both: very valuable uniques AND cheap ones. The filter can't say which one dropped. These multi-base uniques get more highlight, but play the low-tier unique sound.");
            ReplicaUniqueList([0.0, "Replica Uniques Tier 3", "uniques->replicas;t3"], "SH", "Tier 3:");

            Conditional("?ReplicaUniqueNewTiers") { Show; Rarity Unique; SetTextColor 175 96 37 255; SetBackgroundColor 0 0 0 255; SetBorderColor 175 96 37 255; SetFontSize 42; PlayAlertSound 3 300; }
            ElementAdder_Tier("?ReplicaUniqueNewTiers", "ReplicaUniqueList");

            Conditional("?ReplicaUniquesNewTiersHidden") {}
            ElementAdder_Tier("?ReplicaUniquesNewTiersHidden", null, true, "GearPlusFlasks", "OH");
        }

        Section("Betrayal Veiled Mods", "Scarab") {
            Function VeilModTierList($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["AllGearClasses", "DropLevel", "ItemLevel"], $text, ["Item Mods", "D", "HasExplicitMod"]); }
            Function VeilMods($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["AllGearClasses", "DropLevel", "ItemLevel", "Mods"], $text); }

            VeilModTierList([0.0, "Betrayal Veiled Mods Tier 1", "exoticmods;t1veil"], "SD", "Veiled Mods - Expensive Member-Specific Mods");
            VeilModTierList([0.0, "Betrayal Veiled Mods Tier 2", "exoticmods;t2veil"], "SD", "Veiled Mods - Member-Specific Mods");
            VeilMods([0.0, "Item with multiple Betrayal Veiled Mods", "exoticmods;duoveil"], "SD");

            DeepSearch S4(0.0, "Betrayal Veiled Mods Small 1", "exoticmods;smallveil1") { BaseType "Wool Shoes"; Rarity Rare; Width 2; Height 2; }
            DeepSearch S4(0.0, "Betrayal Veiled Mods Small 2", "exoticmods;smallveil2") { BaseType "Driftwood Wand"; Rarity Rare; Width 1; Height 3; }

            VeilMods(S4, "SD", "Remaining Small Veiled Mod Items");
            VeilMods([0.0, "Betrayal Veiled Mods", "exoticmods;veilrest"], "SD", "Remaining Veiled Mod Items");

            // new tiers
            Conditional("?VeiledModsNewTiers") { Show; Identified True; SetFontSize 45; SetBorderColor 0 240 190 240; PlayEffect White Temp; MinimapIcon 2 White Hexagon; HasExplicitMod "Veil"; }
            ElementAdder_Tier("?VeiledModsNewTiers", "VeilModTierList");
        }

        Section("Abyss socketed items", "AbyssJewel") {
            Search S0(0.0, "Abyss Socketed Rares") { BaseType "Glorious Plate"; SocketGroup "RA"; Rarity Rare; }
            QuickUI(S0, "SD", ["DropLevel", "ItemLevel", "SocketedGearClasses"]);
        }

        Section("Delve Mods", "DelveResonator") {
            DeepSearch S2(0.0, "Fractured Delve Mods", "exoticmods;delvefractured") { }
            QuickUI(S2, "SD", ["Mods", "Rarity", "AllGearClasses"], null, ["Gear", "SAO"]]);
            QuickUI([0.0, "Delve mods T1", "exoticmods;delve"], "SD", ["Mods", "Rarity", "AllGearClasses"], null, ["Gear", "ASO"]]);
            QuickUI([0.0, "Delve mods T2", "exoticmods;crafting"], "SD", ["Mods", "Rarity", "AllGearClasses"], null, ["Gear", "OAS"]]);
        }

        Section("Blight Annointed Items", "BlightOil") {
            QuickUI([0.0, "Blight Annointed Items", "exotic->enchanted;anointedamulets"], "SHD", ["ItemLevel", "DropLevel", "Corrupted", "JewelleryClasses"]);

            Description("The rules below ONLY work for annointed rings. As of now filters can't distinguish amulet annointments.");
            QuickUI([0.0, "Extractable Gold Blight Annointments", "exotic->enchanted;enchantedringsgoldoil"], "SD");
            QuickUI([0.0, "Extractable Silver Blight Annointments", "exotic->enchanted;enchantedringssilveroil"], "SD");
        }

        Section("Incursion Mods", "IncursionHelmet") {
//            DeepSearch S5(0.0, "Incursion Mod Map", "exoticmods;") { Identified True; Class Maps; HasExplicitMod ["Vaal"]; Rarity Magic; }
//            IncursionModUI(S5, "Incursion Map Mods");

            Function IncursionModUI($s, $title) { QuickUI($s, "SD", ["AllGearClasses", "Mods", "ItemLevel", "DropLevel"], $title); }
            IncursionModUI([0.0, "Incursion Boots Mods", "exoticmods;incursionspeedtraps"]);
            IncursionModUI([0.0, "Incursion Body Mods", "exoticmods;incursionlifechest"]);
            IncursionModUI([0.0, "Incursion Caster Mods", "exoticmods;incursioncaster"]);
            IncursionModUI([0.0, "Incursion Summoner Mods", "exoticmods;incursionminion"]);
            IncursionModUI([0.0, "Incursion Weapon Mods A", "exoticmods;incursionelemental"], "Incursion elemental weapon mods");
            IncursionModUI([0.0, "Incursion Weapon Mods B", "exoticmods;incursionattack"], "Incursion attack weapon mods");
            IncursionModUI([0.0, "Incursion Ring Mods", "exoticmods;incursionjwlry"]);
            IncursionModUI([0.0, "Incursion Glove Mods", "exoticmods;incursionglovehelm"]);
            IncursionModUI([0.0, "Incursion Magic Mods", "exoticmods;incursionmagic"]);
            IncursionModUI([0.0, "Incursion Mod Item rare", "exoticmods;incursionrandom"]);
        }

        Section("Bestiary Mods", "BestiaryOrb") {
            QuickUI([1.0, "Assorted Bestiary Mod Items", "exoticmods;bestiaryvaluable"], "SD", ["AllGearClasses", "DropLevel", "ItemLevel", "Mods"]);
            QuickUI([0.0, "Bestiary Mod Items", "exoticmods;bestiaryother"], "SD", ["AllGearClasses", "DropLevel", "ItemLevel", "Mods"]);
        }

        Section("Essences Mods", "Essence") {
            QuickUI([0.0, "Essence Mods", "exoticmods;essence"], "SD", ["ItemLevel", "AllGearClasses", "DropLevel"], "", ["Item Mods", "S", "HasExplicitMod"]);
        }

        Section("Talismans", "Talisman") {
            Function TalismanUI($s) { QuickUI($s, "SH", ["ItemLevel", "Mods", "Talisman"]); }
            TalismanUI([1.0, "Talismans T1 Attack", "rare->exotic->talisman;t1attacktalisman"]);
            TalismanUI([1.0, "Talismans T1 Caster", "rare->exotic->talisman;t1castertalisman"]);
            TalismanUI([1.0, "Talismans T1 DoT", "rare->exotic->talisman;t1dottalisman"]);
            TalismanUI([1.0, "Talismans T2 Stats", "rare->exotic->talisman;t2stattalisman"]);
            QuickUI([1.0, "Exotic Talisman Bases", "exoticbases;exotictalismanbases"], "SH", ["ItemLevel", "Talisman"]);
            QuickUI([1.0, "Talismans T3 Bases", "rare->exotic->talisman;t3decenttypetalisman"], "SH", ["ItemLevel", "Talisman"]);
            QuickUI([1.0, "Remaining Talismans", "rare->exotic->talisman;any"], "SH", ["ItemLevel"]);
        }

        Section("Warband Mods", "Warband")
        {
            Description("Warband bases are magic items rarely dropped by Warbands. These bases drop identified and have a special affix and can only appear on a specific class. Hover over the wisdom scroll to find out more.", "Warband Items", "Redblade (fire) warbands may drop a helmet with the '10% physical damage taken is converted to fire damage'. The Brinerot may drop gloves with the '% increased damage while using a flask' mod and the Mutewind may drop 'Cannot be frozen' boots. Chaos warbands may drop weapons with a single elemental penetration bonus. These items are fairly exotic and may be used for crafting. Please note that if you put the entry on 'Hide', you can click 'alt' to see hidden items, to check if the warband dropped any special magic gear upon their demise. This is convenient, because identified items can also drop due to several sextant and leaguestone effects.");
            QuickUI([0.0, "Warband items", "exoticmods;warband"], "SD", ["ItemLevel", "AllGearClasses", "Mods"]);
        }

        Divider();

//        Section("Disabled Sanctum Gear", "SanctifiedSanctumRelic") {
//            Description("Invocations allow corrupting a sanctified relic and giving them a keystone implicit. These ARE tradable.");
//            QuickUI([0.0, "Sanctum Invocations T2", "currency->invocations;t2"], "S", [], "Currently disabled: Invocations", []);
//            QuickUI([0.0, "Forbidden Sanctum Sanctified Relics", "artefact->sanctifiedrelics;anysanctified"], "SH", ["Rarity"], "Currently disabled: Sanctified Relics", []);
//        }

        Section("Currently Disabled: Kalandra Rings") { // IoliteRing
            QuickUI([0.0, "Kalandra Lake exclusive Bases", "exoticbases;exoticlakekala"], "SH", ["Rarity", "ItemLevel"], null, ["Gear", "OS"]);
        }
    }

    Section("Flasks", "Flask") {
        Description("High item level (up to level 85) flasks can roll the highest tier mods.");
        Section("High Level Utility Flasks", "Flask") {
            QuickUI([0.0, "High Level Flasks - iLvl 85", "endgameflasks;utility85"], "SHD", ["Utility Flasks", "ItemLevel", "Quality", "AreaLevel", "RarityNM", "Identified"]);
            QuickUI([0.0, "High Level Flasks - iLvl 84", "endgameflasks;utility84"], "SHD", ["Utility Flasks", "ItemLevel", "Quality", "AreaLevel", "RarityNM", "Identified"]);
            QuickUI([0.0, "High Level Flasks - iLvl 82", "endgameflasks;utility82"], "SHD", ["Utility Flasks", "ItemLevel", "Quality", "AreaLevel", "RarityNM", "Identified"]);
        }

        Section("High Level Life & Mana Flasks", "FlaskLife") {
            QuickUI([0.0, "High Level Life/Mana Flasks - iLvl 82", "endgameflasks;lifemana82"], "SHD", ["ItemLevel", "Quality", "AreaLevel", "RarityNM", "Identified"], "High Level Life & Mana Flasks - iLvl 82", ["Flasks", "SOA"]);
        }

        Section("Exceptional Quality High Level Flasks", "Flask") {
            QuickUI([0.0, "Exceptional Quality Utility Flasks", "endgameflasks;overqualutil"], "SH", ["ItemLevel", "Quality", "RarityNM", "Utility Flasks"]);
            QuickUI([0.0, "Exceptional Quality Life Flasks", "endgameflasks;overquallife"], "SH", ["ItemLevel", "Quality", "RarityNM"], "Exceptional Quality Life & Mana Flasks", ["allFlasks", "SO"]);
        }

        Section("Other Endgame Utility Flasks", "Flask") {
            QuickUI([0.0, "Early mapping ultility flasks", "endgameflasks;earlymappingflasks"], "SHD", ["Utility Flasks", "AreaLevel", "RarityNM", "Identified"]);
            QuickUI([0.0, "Endgame utility flasks", "endgameflasks;anyutility"], "SHD", ["Utility Flasks", "AreaLevel", "RarityNM", "Identified"]);

            Function EndgameUtilityFlaskCustomRuleUI ($s, $shd = "SHD", $title)
            {
                QuickUI($s, $shd, ["Utility Flasks", "ItemLevel", "Quality", "AreaLevel", "RarityNM", "Identified"], $title);
            }

            Conditional("?EndgameUtilityFlaskCustomRules") { Show; Class "Flask"; Rarity Normal Magic; };
            ElementAdder_Tier("?EndgameUtilityFlaskCustomRules", "EndgameUtilityFlaskCustomRuleUI");
        }

        Section("Other Endgame Life & Mana Flasks", "FlaskLife") {
            QuickUI([0.0, "Early mapping life & mana flasks", "endgameflasks;earlymappinglifemana"], "SHD", ["AreaLevel", "RarityNM", "Identified"], "Life & mana flasks", ["allFlasks", "SO"]);

            Function EndgameLifeManaFlaskCustomRuleUI ($s, $shd = "SHD", $title)
            {
                QuickUI($s, $shd, ["ItemLevel", "Quality", "AreaLevel", "RarityNM", "Identified"], $title, ["allFlasks", "SO"]);
            }

            Conditional("?EndgameLifeManaFlaskCustomRules") { Show; Class "Flask"; Rarity Normal Magic; };
            ElementAdder_Tier("?EndgameLifeManaFlaskCustomRules", "EndgameLifeManaFlaskCustomRuleUI");
        }
    }

    Section("Jewels", "CobaltJewel") {

        Section("Normal Jewels") {
            Search S1(0.0, "Rare Jewels") { BaseType "Crimson Jewel"; Rarity Rare; }

            QuickUI([0.0, "Magic Jewels", "jewels->generic;anymagic"], "SH", ["Jewels", "ItemLevel"], "", [], "Magic jewels for crafting and corrupting.");
            QuickUI(0, "SH", ["Jewels", "ItemLevel"], "", [], "Rare jewels are solid pickups. They're small and can be very valuable.");
        }

        Section("Normal Jewels: Special") {
            QuickUI([0.0, "ModFiltering: Jewels 2 Corrupted", "jewels->special;1modcorrupted"], "SH", ["ItemLevel", "DropLevel", "Corrupted", "Mods"], "Jewels with corrupted implicit");
            QuickUI([0.0, "ModFiltering: Jewels 3", "jewels->special;1moduncorrupted"], "SH", ["ItemLevel", "DropLevel", "Corrupted", "Mods"], "Jewels with interesting mods");
        }

        Section("Abyss Jewels") {
            Description("There are 4 types of jewels, one for each build archetype:<br>- 'Murderous' for melee<br>- 'Searching' for bows/wanders<br>- 'Hypnotic' for spellcasters<br>- 'Ghastly' for summoners", "Abyss Jewels", "Abyss Jewels have itemlevel depending rolls. If you want to craft abyss jewels, it's highly recommended to use ItemLevel 84 material.");

            QuickUI([0.0, "Corrupted Abyss Jewels", "jewels->abyss;corruptedabyssjewel"], "SD", ["Abyss Jewels", "ItemLevel"]);
            QuickUI([0.0, "Abyss Jewels rare ilvl 86", "jewels->abyss;veryhighrare"], "SH", ["Abyss Jewels", "ItemLevel"], "Rare Abyss Jewels - ilvl 86");
            QuickUI([0.0, "Abyss Jewels magic ilvl 86", "jewels->abyss;veryhighmagic"], "SH", ["Abyss Jewels", "ItemLevel"], "Magic Abyss Jewels - ilvl 86");
            Divider();
            QuickUI([0.0, "Abyss Jewels rare ilvl 82", "jewels->abyss;highrare"], "SH", ["Abyss Jewels", "ItemLevel"], "Rare Abyss Jewels - ilvl 82");
            QuickUI([0.0, "Abyss Jewels magic ilvl 82", "jewels->abyss;highmagic"], "SH", ["Abyss Jewels", "ItemLevel"], "Magic Abyss Jewels - ilvl 82");
            Divider();
            QuickUI([0.0, "Abyss Jewels rare", "jewels->abyss;anyrare"], "SH", ["Abyss Jewels", "ItemLevel"], "Rare Abyss Jewels");
            QuickUI([0.0, "Abyss Jewels magic", "jewels->abyss;anymagic"], "SH", ["Abyss Jewels", "ItemLevel"], "Magic Abyss Jewels");
        }

        Section("Jewels during Campaign") {
            QuickUI([0.0, "Campaign Abyss Jewels", "jewels->leveling;abyss"], "SH", ["Rarity", "ItemLevel", "Abyss Jewels"]);
            QuickUI([0.0, "Campaign Jewels", "jewels->leveling;generic"], "SH", ["Rarity", "ItemLevel", "Jewels"]);
        }

        Function ClusterJewelTierList_Ench($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["ClusterJewels", "ItemLevel", "EnchantmentPassiveNum", "Rarity"], null, ["ClusterJewelEnchantments", "D", "EnchantmentPassiveNode"], $text); }
        Function ClusterJewelTierList_NoEnch($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["ClusterJewels", "ItemLevel", "EnchantmentPassiveNum", "Rarity"], $text); }

        Section("Cluster Jewels: Top Enchantments", null, "E") {
            Warning("This section is economy based: it's generated based on poe.ninja economy data. This section is not perfect. Hide the general section on your own risk.");

            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl84, 12 Notes", "jewels->clustereco;n12_i84_t1"], "SDH");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl75, 12 Notes", "jewels->clustereco;n12_i75_t1"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl68, 12 Notes", "jewels->clustereco;n12_i68_t1"], "SHD");
            Divider();
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl84, 11 Notes", "jewels->clustereco;n11_i84_t1"], "SDH");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl75, 11 Notes", "jewels->clustereco;n11_i75_t1"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl68, 11 Notes", "jewels->clustereco;n11_i68_t1"], "SHD");
            Divider();
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl84, 10 Notes", "jewels->clustereco;n10_i84_t1"], "SDH");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl75, 10 Notes", "jewels->clustereco;n10_i75_t1"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl68, 10 Notes", "jewels->clustereco;n10_i68_t1"], "SHD");
            Divider();
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl84, 9 Notes", "jewels->clustereco;n9_i84_t1"], "SDH");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl75, 9 Notes", "jewels->clustereco;n9_i75_t1"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl68, 9 Notes", "jewels->clustereco;n9_i68_t1"], "SHD");
            Divider();
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl84, 8 Notes", "jewels->clustereco;n8_i84_t1"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl75, 8 Notes", "jewels->clustereco;n8_i75_t1"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl68, 8 Notes", "jewels->clustereco;n8_i68_t1"], "SHD");
            Divider();
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl84, 6 Notes", "jewels->clustereco;n6_i84_t1"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl75, 6 Notes", "jewels->clustereco;n6_i75_t1"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl68, 6 Notes", "jewels->clustereco;n6_i68_t1"], "SHD");
            Divider();
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl84, 4 Notes", "jewels->clustereco;n4_i84_t1"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl75, 4 Notes", "jewels->clustereco;n4_i75_t1"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl68, 4 Notes", "jewels->clustereco;n4_i68_t1"], "SHD");
            Divider();
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl84, 3 Notes", "jewels->clustereco;n3_i84_t1"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl75, 3 Notes", "jewels->clustereco;n3_i75_t1"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl68, 3 Notes", "jewels->clustereco;n3_i68_t1"], "SHD");
            Divider();
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl84, 2 Notes", "jewels->clustereco;n2_i84_t1"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl75, 2 Notes", "jewels->clustereco;n2_i75_t1"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl68, 2 Notes", "jewels->clustereco;n2_i68_t1"], "SHD");
        }

        Section("Cluster Jewels: Good Enchantments", null, "E") {
            Warning("This section is economy based: it's generated based on poe.ninja economy data. This section is not perfect. Hide the general section on your own risk.");

            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl84, 12 Notes", "jewels->clustereco;n12_i84_t2"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl75, 12 Notes", "jewels->clustereco;n12_i75_t2"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl68, 12 Notes", "jewels->clustereco;n12_i68_t2"], "SHD");
            Divider();
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl84, 11 Notes", "jewels->clustereco;n11_i84_t2"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl75, 11 Notes", "jewels->clustereco;n11_i75_t2"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl68, 11 Notes", "jewels->clustereco;n11_i68_t2"], "SHD");
            Divider();
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl84, 10 Notes", "jewels->clustereco;n10_i84_t2"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl75, 10 Notes", "jewels->clustereco;n10_i75_t2"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl68, 10 Notes", "jewels->clustereco;n10_i68_t2"], "SHD");
            Divider();
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl84, 9 Notes", "jewels->clustereco;n9_i84_t2"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl75, 9 Notes", "jewels->clustereco;n9_i75_t2"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl68, 9 Notes", "jewels->clustereco;n9_i68_t2"], "SHD");
            Divider();
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl84, 8 Notes", "jewels->clustereco;n8_i84_t2"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl75, 8 Notes", "jewels->clustereco;n8_i75_t2"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl68, 8 Notes", "jewels->clustereco;n8_i68_t2"], "SHD");
            Divider();
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl84, 6 Notes", "jewels->clustereco;n6_i84_t2"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl75, 6 Notes", "jewels->clustereco;n6_i75_t2"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl68, 6 Notes", "jewels->clustereco;n6_i68_t2"], "SHD");
            Divider();
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl84, 4 Notes", "jewels->clustereco;n4_i84_t2"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl75, 4 Notes", "jewels->clustereco;n4_i75_t2"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl68, 4 Notes", "jewels->clustereco;n4_i68_t2"], "SHD");
            Divider();
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl84, 3 Notes", "jewels->clustereco;n3_i84_t2"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl75, 3 Notes", "jewels->clustereco;n3_i75_t2"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl68, 3 Notes", "jewels->clustereco;n3_i68_t2"], "SHD");
            Divider();
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl84, 2 Notes", "jewels->clustereco;n2_i84_t2"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl75, 2 Notes", "jewels->clustereco;n2_i75_t2"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl68, 2 Notes", "jewels->clustereco;n2_i68_t2"], "SHD");
        }

        Section("Cluster Jewels: Any Enchantment") {
            ClusterJewelTierList_NoEnch([0.0, "Good High Level Very Large Cluster Jewels", "jewels->cluster;optimal1highlarge"], "SH", null);
            ClusterJewelTierList_NoEnch([0.0, "Good High Level Large Cluster Jewels", "jewels->cluster;optimalhighlarge"], "SH", null);
            ClusterJewelTierList_NoEnch([0.0, "Good Large Cluster Jewels", "jewels->cluster;highlarge"], "SH", null);
            ClusterJewelTierList_NoEnch([0.0, "Large Cluster Jewels", "jewels->cluster;large"], "SH", null);
            Divider();
            ClusterJewelTierList_NoEnch([0.0, "Good High Level Medium Cluster Jewels", "jewels->cluster;optimalhighmedium"], "SH", null);
            ClusterJewelTierList_NoEnch([0.0, "Good Medium Cluster Jewels", "jewels->cluster;highmedium"], "SH", null);
            ClusterJewelTierList_NoEnch([0.0, "Medium Cluster Jewels", "jewels->cluster;medium"], "SH", null);
            Divider();
            ClusterJewelTierList_NoEnch([0.0, "High Level Small Cluster Jewels", "jewels->cluster;highsmall"], "SH", null);
            ClusterJewelTierList_NoEnch([0.0, "Small Cluster Jewels", "jewels->cluster;small"], "SH", null);
        }

        Section("Cluster Jewels: Custom Rule") {
            Title("Any Enchantment");
            Search CS0("skip", "skip", "jewels->clustereco;n12_i84_t1") { }
            Conditional("?ClusterJewelNewTier", [0]) { Show; Class Jewel; Rarity Normal Magic Rare; SetTextColor 210 178 135; SetBackgroundColor 0 0 0 255; SetBorderColor 213 159 100 200; SetFontSize 42; }
            ElementAdder_Tier("?ClusterJewelNewTier", "ClusterJewelTierList_NoEnch");

            Divider();

            Title("Enchantment Filtering");
            Function ClusterJewelFunc ($s, $shd = "SHD", $title)
            {
                QuickUI($s, $shd, ["Rarity", "ClusterJewels", "ItemLevel", "AreaLevel", "CorruptedMods", "EnchantmentPassiveNum", "Identified", "Corrupted"], $title, ["ClusterJewelEnchantments", "S", "EnchantmentPassiveNode"]);
            }

            Conditional("?CClusterJewelEnchantRule", [0]) { Show; SetBorderColor 0 240 190 240; SetFontSize 40; Class "Jewels"; AnyEnchantment True; BaseType "Small Cluster Jewel" "Medium Cluster Jewel" "Large Cluster Jewel"; MinimapIcon 2 White Hexagon; PlayEffect White Temp; }
            ElementAdder_Tier("?CClusterJewelEnchantRule", "ClusterJewelFunc");
        }
    }
}

//===================================================================================================
// RARES
//===================================================================================================

Chapter() {

    SectionTitle("Endgame - Rare Items (lvl 68+)", "ImpClaw");

    Section("Add custom Show/Hide rule (EG rares)", "Firefly") {

        Box() { YTLink("IfJaYYj5kXk", "Chaos Recipe Filter Tutorial"); }

        Description("Augment the filter with entirely new rules, such as 'hide all belts', 'highlight all gemini claws in a special color', 'hide all evasion type armors, gloves, shields, and boots' or 'show all corrupted rares'.", "Additional Endgame Rules", "This section is designed to be foolproof. It will have no effect on 6 links, leveling items, elder/shaper items, uniques, atlas bases (such as Steel Rings), abyss belts, fishing rods and other special bases. These sections frequently feature the 'strictness' dropdown menu. This tool defines how many rules are overwritten by your custom rules. I recommend playing around with the loot simulator, while switching back and forth to the customizer to get familiar with this section");

        Section("Mode: Hide identified rares", "WisdomScroll") {
            QuickUI([1.0, "Hide remaining identified rares", "rareoptional;idhider"], "HD", ["ItemLevel", "DropLevel", "AllGearClasses"], "", [], "Hide all remaining identified items that were not highlighted by the mod filtering rules.");
        }

        Section("Highlight rares by Base", "Firefly") {
            Function CondShowBase ($s, $shd = "SD", $title)
            {
                QuickUI($s, $shd, ["CondTargetSelection", "ItemLevel", "DropLevel", "Height", "Width", "Sockets", "Stats_RareGear"], $title, ["Gear", "OS"]);
            }

            Description("Give specific BaseTypes more highlighting here.");

            Conditional("?CRareShowBases", ["c6.rare.generic.all", "c3.gear.crafting86.all", "c6.rare.t3.all", "c6.rare.t2.all", "c6.rare.t1.all", "c6.rare.decorator.all"]) { Show; SetBorderColor 200 0 0; SetFontSize 38; ItemLevel >= 68; Rarity Rare; }
            ElementAdder_Tier("?CRareShowBases", "CondShowBase");
        }

        Section("Highlight rares by Armour Type", "Firefly") {
            Description("Highlight gear by their type, like Evasion or Evasion-EnergyShield items.");

            Conditional("?CRareShowItemTypes", ["c6.rare.generic.all", "c3.gear.crafting86.all", "c6.rare.t3.all", "c6.rare.t2.all", "c6.rare.t1.all", "c6.rare.decorator.all"]) { Show; SetBorderColor 200 0 0; SetFontSize 38; ItemLevel >= 68; Rarity Rare; Class == "Body Armours" "Gloves" "Boots" "Helmets" "Shields"; }

            Function CondShowType ($s, $shd = "SD", $title)
            {
                QuickUI($s, $shd, ["CondTargetSelection", "ItemType", "ArmourClasses", "ItemLevel","DropLevel", "LinkedSockets", "Sockets", "Stats_RareGear"], $title);
            }

            ElementAdder_Tier("?CRareShowItemTypes", "CondShowType");
        }

        Section("Highlight rares by item slot", "Firefly") {

            Function CondShowClass ($s, $shd = "SD", $title)
            {
                QuickUI($s, $shd, ["CondTargetSelection", "AllGearClasses", "ItemLevel", "DropLevel", "Height", "Width", "LinkedSockets", "Sockets", "Stats_RareGear"], $title);
            }

            Description("Highlight specific item classes here.");

            Conditional("?CRareShowClasses", ["c6.rare.generic.all", "c3.gear.crafting86.all", "c6.rare.t3.all", "c6.rare.t2.all", "c6.rare.t1.all", "c6.rare.decorator.all"]) { Show; SetBorderColor 200 0 0; SetFontSize 38; ItemLevel >= 68; Rarity Rare; }
            ElementAdder_Tier("?CRareShowClasses", "CondShowClass");
        }

        Section("Highlight chromatic Rares", "Chromatic") {

            Function CondShowClass ($s, $shd = "SD", $title)
            {
                QuickUI($s, $shd, ["CondTargetSelection", "AllGearClasses", "ItemLevel", "DropLevel", "Height", "Width", "LinkedSockets", "Sockets", "Stats_RareGear"], $title);
            }

            Description("By default rares have a higher evaluation priority than chromatic recipes. This can be changed here.");

            Conditional("?CRareShowRGB", ["c6.rare.generic.all", "c3.gear.crafting86.all", "c6.rare.t3.all", "c6.rare.t2.all", "c6.rare.t1.all", "c6.rare.decorator.all"]) { Show; SetBorderColor 0 0 0; SetBackgroundColor 150 150 150; SetFontSize 40; ItemLevel >= 68; Rarity Rare; SocketGroup RGB; }
            ElementAdder_Tier("?CRareShowRGB", "CondShowClass");
        }

        Section("Hide rares by Base", "Annulment") {
            Function CondHideBase ($s, $shd = "HD", $title)
            {
                QuickUI($s, $shd, ["CondTargetSelection", "ItemLevel", "DropLevel", "Height", "Width", "LinkedSockets", "Sockets", "Stats_RareGear"], $title, ["Gear", "OS"]);
            }

            Conditional("?CRareHideBases", ["c6.rare.generic.all", "c3.gear.crafting86.all", "c6.rare.t3.all", "c6.rare.t2.all", "c6.rare.t1.all", "c6.rare.decorator.all"]) { Hide; SetFontSize 18; ItemLevel >= 68; Rarity Rare; }
            ElementAdder_Tier("?CRareHideBases", "CondHideBase");
        }

        Section("Hide rares by Armour Type", "Annulment") {
            Conditional("?CRareHideItemTypes", ["c6.rare.generic.all", "c3.gear.crafting86.all", "c6.rare.t3.all", "c6.rare.t2.all", "c6.rare.t1.all", "c6.rare.decorator.all"]) { Hide; ItemLevel >= 68; Rarity Rare; Class == "Body Armours" "Gloves" "Boots" "Helmets" "Shields"; }

            Function CondHideType ($s, $shd = "HD", $title)
            {
                QuickUI($s, $shd, ["CondTargetSelection", "ItemType", "ArmourClasses", "ItemLevel", "DropLevel", "LinkedSockets", "Sockets", "Stats_RareGear"], $title);
            }

            ElementAdder_Tier("?CRareHideItemTypes", "CondHideType");
        }

        Section("Hide rares by item slot", "Annulment") {
            Function CondHideClass ($s, $shd = "HD", $title)
            {
                // todo: a LOT of these are VERY damn similar -> remove e.g. height & width, so that they will appear in AddAttribute?
                QuickUI($s, $shd, ["CondTargetSelection", "AllGearClasses", "ItemLevel", "DropLevel", "Height", "Width", "LinkedSockets", "Sockets", "Stats_RareGear"], $title);
            }

            Description("Hide uninteresting items, such as bows for melee characters or melee weapons for casters.");

            Conditional("?CRareHideClasses", ["c6.rare.generic.all", "c3.gear.crafting86.all", "c6.rare.t3.all", "c6.rare.t2.all", "c6.rare.t1.all", "c6.rare.decorator.all"]) { Hide; SetFontSize 18; ItemLevel >= 68; Rarity Rare; }
            ElementAdder_Tier("?CRareHideClasses", "CondHideClass");
        }

        Section("Hide rares by Tier", "Annulment") {
            Description("Note: The section 'hide and highlight rares by type' section can be used to achieve the same result, while also having control over classes and levels.");
            Conditional("?CRareSimpleHide", ["c6.rare.generic.all", "c3.gear.crafting86.all", "c6.rare.t3.all", "c6.rare.t2.all", "c6.rare.t1.all", "c6.rare.decorator.all"]) { Hide; Class "Helmets" "Gloves" "Boots" "Body Armours" "Shields" "Quivers" "Wands" "Rune Dagger" "Warstaves" "Daggers" "Sceptres" "Bows" "Claws" "One Hand Swords" "One Hand Axes" "One Hand Maces" "Staves" "Two Hand Swords" "Two Hand Axes" "Two Hand Maces"; SetFontSize 18; ItemLevel >= 68; Rarity Rare; }
            QuickUI("?CRareSimpleHide", "HD", ["CondTargetSelection", "LinkedSockets", "ItemLevel", "Sockets"], "Hide Rares By Tier");
        }

        Section ("Corrupted Rares", "Vaal Orb") {
            Description("Sextants and other events can produce identified or rare corrupted items.");
            Conditional("?CorruptedRares", ["c6.rare.generic.all", "c3.gear.crafting86.all", "c6.rare.t3.all", "c6.rare.t2.all", "c6.rare.t1.all", "c6.rare.decorator.all"]) { Show; Corrupted True; Rarity Rare; ItemLevel >= 68; SetFontSize 28; SetBorderColor 180 70 0; }

            QuickUI("?CorruptedRares", "SD", ["AllGearClasses", "ItemLevel", "DropLevel", "Height", "Width", "CorruptedMods", "Sockets", "CondTargetSelection"], "Special Treatment: Corrupted Rares");
        }
    }

    Section("Decorators", "Chromatic") {
        Box() { Description("Decorators highlight specific characteristics of an item, by changing the appearance, without deciding whether it is hidden or shown."); }

        Section("Decorators: Size") {
            QuickUI([1.0, "Endgame rare deco tiny", "decorators->rareeg;tinyrares"], "SD", ["Width", "Height"], "Decorator: Tiny");
            QuickUI([1.0, "Endgame rare deco medium 1", "decorators->rareeg;mediumrares1"], "SD", ["Width", "Height"], "Decorator: Medium (1x3)");
            QuickUI([1.0, "Endgame rare deco medium 2", "decorators->rareeg;mediumrares2"], "SD", ["Width", "Height"], "Decorator: Medium (2x2)");
            QuickUI([1.0, "Endgame rare deco large", "decorators->rareeg;largerares"], "SD", ["Width", "Height"], "Decorator: Large");
        }

        Section("Decorators: ItemLevel") {
            QuickUI([1.0, "Endgame rare deco ilvl 86", "decorators->rareeg;ilvl86"], "SD", ["ItemLevel"], "Decorator: ItemLevel 86");
            QuickUI([1.0, "Endgame rare deco ilvl 84", "decorators->rareeg;ilvl84"], "SD", ["ItemLevel"], "Decorator: ItemLevel 84");
            QuickUI([1.0, "Endgame rare deco ilvl 75", "decorators->rareeg;ilvl75"], "SD", ["ItemLevel"], "Decorator: ItemLevel 75");
            QuickUI([1.0, "Endgame rare deco ilvl 68", "decorators->rareeg;ilvl68"], "SD", ["ItemLevel"], "Decorator: ItemLevel 68");
        }

        Section("Decorators: Corrupted") {
            QuickUI([1.0, "Endgame rare deco corrupted implicit", "decorators->rareeg;corruptedraresimplicit"], "SD", ["Corrupted", "CorruptedMods"], "Decorator: Corrupted Implicit");
            QuickUI([1.0, "Endgame rare deco corrupted", "decorators->rareeg;corruptedrares"], "SD", ["Corrupted", "CorruptedMods"], "Decorator: Corrupted - No implicit");
        }
    }

    Section("Jewellery", "Ring") {
        Search S1(1.0, "Rare rings/amulets T1", "rr->amuring;t1"]) { }
        Search S2(1.0, "Rare rings/amulets T2", "rr->amuring;t2"]) { }
        Search S3(1.0, "Rare rings/amulets T3", "rr->amuring;t3"]) { }

        Search B1(1.0, "Rare belts T1", "rr->belts;t1"]) { }
        Search B2(1.0, "Rare belts T2", "rr->belts;t2"]) { }
        Search B3(1.0, "Rare belts T3", "rr->belts;t3"]) { }

        Section("Rings and Amulets") {
            QuickUI(S1, "SD", ["AreaLevel"]);
            QuickUI(S2, "SD", ["AreaLevel"]);
            QuickUI(S3, "SD", ["AreaLevel"]);
        }

        Section("Belts") {
            QuickUI(B1, "SD", ["AreaLevel"]);
            QuickUI(B2, "SD", ["AreaLevel"]);
            QuickUI(B3, "SD", ["AreaLevel"]);
        }

        BaseTypeMatrix(false, "Tier 1", S1, B1, "Tier 2", S2, B2, "Tier 3", S3, B3);
    }

    Section("Weapons and Armours", "RoyalBurgonet") {
        Description("Pro tip: You can disable whole sections by right-clicking the section and clicking on 'Turn OFF all rules'");

        Function EgRares($s) { QuickUI($s, "SH", ["ItemLevel"]); }
        Function EgRaresArmours($s) { QuickUI($s, "SH", ["BaseDefencePercentile", "ItemLevel"]); }

        Search T1Wep(1.0, "Tier 1 rare weapons", "rr;t1weapons") { }
        Search T1Arm(0.0, "Tier 1 rare armours", "rr;t1armours") { }

        Search T2Wep(1.0, "Tier 2 rare weapons", "rr;t2weapons") { }
        Search T2Arm(1.0, "Tier 2 rare armours", "rr;t2armours") { }

        Search T3Dagger(1.0, "Endgame-Rares-T3-Daggers", "rr;t3daggers") { }
        Search T3RuneDag(1.0, "Endgame-Rares-T3-Rune Dagger", "rr;t3runedaggers") { }
        Search T3WarStaff(1.0, "Endgame-Rares-T3-Warstaff", "rr;t3warstaves") { }
        Search T3Wand(1.0, "Endgame-Rares-T3-Wands", "rr;t3wands") { }
        Search T3Scepter(1.0, "Endgame-Rares-T3-Sceptres", "rr;t3sceptres") { }
        Search T3Claw(1.0, "Endgame-Rares-T3-Claws", "rr;t3claws") { }
        Search T3Foil(1.0, "Endgame-Rares-T3-Foils", "rr;t3foils") { }
        Search T3Sword1H(1.0, "Endgame-Rares-T3-1HSwords", "rr;t3swords1h") { }
        Search T3Maces1H(1.0, "Endgame-Rares-T3-1HMaces", "rr;t3maces1h") { }
        Search T3Axe1H(1.0, "Endgame-Rares-T3-1HAxe", "rr;t3axes1h") { }
        Search T3Staff(1.0, "Endgame-Rares-T3-2HStaves", "rr;t3staves") { }
        Search T3Sword2H(1.0, "Endgame-Rares-T3-2HSwords", "rr;t3swords2h") { }
        Search T3Axe2H(1.0, "Endgame-Rares-T3-2HAxes", "rr;t3axes2h") { }
        Search T3Mace2H(1.0, "Endgame-Rares-T3-2HMaces", "rr;t3maces2h") { }
        Search T3Bow(1.0, "Endgame-Rares-T3-Bows", "rr;t3bows") { }
        Search T3Boot(1.0, "Endgame-Rares-T3-ArmBoots", "rr;t3boots") { }
        Search T3Glove(1.0, "Endgame-Rares-T3-ArmGloves", "rr;t3gloves") { }
        Search T3Helm(1.0, "Endgame-Rares-T3-ArmHelmets", "rr;t3helmets") { }
        Search T3Body(1.0, "Endgame-Rares-T3-BodyArmours", "rr;t3body") { }
        Search T3Shield(1.0, "Endgame-Rares-T3-Small-Shields", "rr;t3shields") { }
        Search T3Quiv(1.0, "Endgame-Rares-T3-Quivers", "rr;t3quivers") { }

        Search T4(0.0, "Endgame Tier 4 Rares", "rr;t4endgamerares") { }

        Section("Tier 1") {
            EgRares(T1Wep);
            EgRaresArmours(T1Arm);
        }

        Section("Tier 2") {
            EgRares(T2Wep);
            EgRaresArmours(T2Arm);
        }

        Section("Tier 3") {
            EgRares(T3Dagger);
            EgRares(T3RuneDag);
            EgRares(T3WarStaff);
            EgRares(T3Wand);
            EgRares(T3Scepter);
            EgRares(T3Claw);
            EgRares(T3Foil);
            EgRares(T3Sword1H);
            EgRares(T3Maces1H);
            EgRares(T3Axe1H);
            EgRares(T3Staff);
            EgRares(T3Sword2H);
            EgRares(T3Axe2H);
            EgRares(T3Mace2H);
            EgRares(T3Bow);
            EgRaresArmours(T3Boot);
            EgRaresArmours(T3Glove);
            EgRaresArmours(T3Helm);
            EgRaresArmours(T3Body);
            EgRaresArmours(T3Shield);
            EgRares(T3Quiv);
        }

        Section("Tier 4") {
            EgRares(T4);
        }

        BaseTypeMatrix(true,
            "Tier 1", T1Wep, T1Arm,
            "Tier 2", T2Wep, T2Arm,
            "Tier 3", T3Dagger, T3RuneDag, T3WarStaff, T3Wand, T3Scepter, T3Claw, T3Foil, T3Sword1H, T3Maces1H, T3Axe1H, T3Staff, T3Sword2H, T3Axe2H, T3Mace2H, T3Bow, T3Boot, T3Glove, T3Helm, T3Body, T3Shield, T3Quiv
        );
    }

    Section ("Influenced Rares", "Voidorb", "E") {
        Function BaseTypeBox($s, $text, $descr = "") { QuickUI($s, "SD", ["ItemLevel"], $text, ["Gear", "DO"], $descr); }

        Description("To add more influenced item rules to the filter, use the 'Add additional Rules' section of the Customizer to do so.");

        Section("Common") {
            Box() { Description("These rules have priority over other tier 1 or tier 2 rules respectively."); }

            Search T1(0.0, "Common Influenced Rares - Tier 1", "influenced->common;t1_exo") { }
            Search T2(0.0, "Common Influenced Rares - Tier 2", "influenced->common;t2_exo") { }

            QuickUI(T1, "SD", ["ItemLevel"], "Top influenced bases", [], "Extremely exclusive drop-restricted bases, such as heist and ritual bases.");
            QuickUI(T2, "SD", ["ItemLevel"], "Exclusive atlas bases", []);

            BaseTypeMatrix(true, "Tier 1", T1, "Tier 2", T2);

            Divider();

            QuickUI([0.0, "Common Influenced Rares - Tier 2 High ItemLevel", "influenced->common;t2_86"], "SD", ["ItemLevel", "BTM"], "High level meta bases");
        }

        Section("Searing Exarch") {
            Function EldrInflFunc($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["AllGearClasses", "HasSearingExarchImplicit", "HasEaterOfWorldsImplicit", "Rarity", "ItemLevel", "DropLevel", "Corrupted"], $text, ["Gear", "AOS"]); }

            QuickUI([0.0, "Good Exarch Influence Bases", "rare->exarch;anyhigh"], "SD", ["HasSearingExarchImplicit", "HasEaterOfWorldsImplicit", "Rarity", "ItemLevel", "DropLevel", "Corrupted", "BTM"]);
            QuickUI([0.0, "Remaining Exarch Influenced Items", "rare->exarch;any"], "SD", ["AllGearClasses", "HasSearingExarchImplicit", "HasEaterOfWorldsImplicit", "Rarity", "ItemLevel", "DropLevel", "Corrupted"]);
            Divider();
            Conditional("?EldrInflNewTiers") { Show; Rarity Normal Magic Rare; SetTextColor 0 0 0 255; SetBackgroundColor 145 215 230 225; SetBorderColor 0 100 150 255; SetFontSize 40; PlayAlertSound 2 300; }
            ElementAdder_Tier("?EldrInflNewTiers", "EldrInflFunc");
        }

        Section("Eater of Worlds") {
            Function EldrInflFunc($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["AllGearClasses", "HasSearingExarchImplicit", "HasEaterOfWorldsImplicit", "Rarity", "ItemLevel", "DropLevel", "Corrupted"], $text, ["Gear", "AOS"]); }

            QuickUI([0.0, "Good Eater of Worlds Influence Bases", "rare->eater;anyhigh"], "SD", ["HasSearingExarchImplicit", "HasEaterOfWorldsImplicit", "Rarity", "ItemLevel", "DropLevel", "Corrupted", "BTM"]);
            QuickUI([0.0, "Remaining Eater of Worlds Influenced Items", "rare->eater;any"], "SD", ["AllGearClasses", "HasSearingExarchImplicit", "HasEaterOfWorldsImplicit", "Rarity", "ItemLevel", "DropLevel", "Corrupted"]);
        }

        Section("Shaper Items", null, "E") {
            BaseTypeBox([0.0, "Shaper items T1 ilvl 82", "rare->shaper;t11"], "Tier 1-1 Shaper");
            BaseTypeBox([0.0, "Shaper items T1 ilvl 84", "rare->shaper;t12"], "Tier 1-2 Shaper");
            BaseTypeBox([0.0, "Shaper items T1 ilvl 85", "rare->shaper;t13"], "Tier 1-3 Shaper");
            Divider();
            BaseTypeBox([0.0, "Shaper items T2 Bases a", "rare->shaper;t21"], "Tier 2-1 Shaper");
            BaseTypeBox([0.0, "Shaper items T2 Bases b", "rare->shaper;t22"], "Tier 2-2 Shaper");
        }

        Section("Elder Items", null, "E") {
            BaseTypeBox([0.0, "Elder items T1 ilvl 82", "rare->elder;t11"], "Tier 1-1 Elder");
            BaseTypeBox([0.0, "Elder items T1 ilvl 84", "rare->elder;t12"], "Tier 1-2 Elder");
            BaseTypeBox([0.0, "Elder items T1 ilvl 85", "rare->elder;t13"], "Tier 1-3 Elder");
            Divider();
            BaseTypeBox([0.0, "Elder items T2 Bases a", "rare->elder;t21"], "Tier 2-1 Elder");
            BaseTypeBox([0.0, "Elder items T2 Bases b", "rare->elder;t22"], "Tier 2-2 Elder");
        }

        Section("Hunter Items", null, "E") {
            BaseTypeBox([0.0, "Hunter - T1-1", "rare->hunter;t11"], "Tier 1-1 Hunter");
            BaseTypeBox([0.0, "Hunter - T1-2", "rare->hunter;t12"], "Tier 1-2 Hunter");
            BaseTypeBox([0.0, "Hunter - T1-3", "rare->hunter;t13"], "Tier 1-3 Hunter");
            Divider();
            BaseTypeBox([0.0, "Hunter - T2-1", "rare->hunter;t21"], "Tier 2-1 Hunter");
            BaseTypeBox([0.0, "Hunter - T2-2", "rare->hunter;t22"], "Tier 2-2 Hunter");
        }

        Section("Crusader Items", null, "E") {
            BaseTypeBox([0.0, "Crusader - T1-1", "rare->crusader;t11"], "Tier 1-1 Crusader");
            BaseTypeBox([0.0, "Crusader - T1-2", "rare->crusader;t12"], "Tier 1-2 Crusader");
            BaseTypeBox([0.0, "Crusader - T1-3", "rare->crusader;t13"], "Tier 1-3 Crusader");
            Divider();
            BaseTypeBox([0.0, "Crusader - T2-1", "rare->crusader;t21"], "Tier 2-1 Crusader");
            BaseTypeBox([0.0, "Crusader - T2-2", "rare->crusader;t22"], "Tier 2-2 Crusader");
        }

        Section("Redeemer Items", null, "E") {
            BaseTypeBox([0.0, "Redeemer - T1-1", "rare->redeemer;t11"], "Tier 1-1 Redeemer");
            BaseTypeBox([0.0, "Redeemer - T1-2", "rare->redeemer;t12"], "Tier 1-2 Redeemer");
            BaseTypeBox([0.0, "Redeemer - T1-3", "rare->redeemer;t13"], "Tier 1-3 Redeemer");
            Divider();
            BaseTypeBox([0.0, "Redeemer - T2-1", "rare->redeemer;t21"], "Tier 2-1 Redeemer");
            BaseTypeBox([0.0, "Redeemer - T2-2", "rare->redeemer;t22"], "Tier 2-2 Redeemer");
        }

        Section("Warlord Items", null, "E") {
            BaseTypeBox([0.0, "Warlord - T1-1", "rare->warlord;t11"], "Tier 1-1 Warlord");
            BaseTypeBox([0.0, "Warlord - T1-2", "rare->warlord;t12"], "Tier 1-2 Warlord");
            BaseTypeBox([0.0, "Warlord - T1-3", "rare->warlord;t13"], "Tier 1-3 Warlord");
            Divider();
            BaseTypeBox([0.0, "Warlord - T2-1", "rare->warlord;t21"], "Tier 2-1 Warlord");
            BaseTypeBox([0.0, "Warlord - T2-2", "rare->warlord;t22"], "Tier 2-2 Warlord");
        }

        Divider();

        Section("Remaining Influenced Items") {
            QuickUI([0.0, "Remaining High Level Influenced Items", "rare->any;anytoplevel"], "SHD", ["HasInfluence", "ItemLevel", "DropLevel", "AllGearClasses"]);
            QuickUI([0.0, "Small Influenced Items", "rare->any;anytrinket"], "SDH", ["HasInfluence", "ItemLevel", "DropLevel", "AllGearClasses"]);
            QuickUI([0.0, "Remaining new Influenced Items", "rare->any;any"], "SHD", ["HasInfluence", "ItemLevel", "DropLevel", "AllGearClasses"], "Remaining Influenced Rares");
        }
    }

    Section("Identified endgame rares", "WisdomScroll") {
        QuickUI([1.0, "Identified endgame rares", "rr;identifieditemhandling"], "SHD", ["AllGearClasses", "ItemLevel", "DropLevel", "Mirrored", "Identified", "Corrupted", "CorruptedMods"], "", [], "This rule has less priority than tier 1 & 2 rares and jewelry. It's designed for Ultimatum rewards, that are not caught by the fairly exclusive identified mod sections.");
    }
}

Chapter() { Ad(); }

//===================================================================================================
// LEVELING / Campaign
//===================================================================================================

Chapter() {

    SectionTitle("Campaign (below lvl 68)");

    Section("Add custom Show/Hide rules (campaign)", "Firefly") {

        Box() { YTLink("PiSHS8T63ys", "Creating the Perfect Campaign Filter"); }

        Description("Augment the filter with entirely new rules, such as 'only show AR and AR/EV armors', 'highlight all rare axes' and 'hide all wands'", "Additional Campaign Rules", "This section is designed to be foolproof. It will have no effect on 6Llinks, endgame items, elder/shaper items, uniques etc), abyss belts, fishing rods and other special bases. These sections frequently feature the 'strictness' dropdown menu. This tool defines ho w many rules are overwritten by your custom rules. I recommend playing around with the loot simulator, while switching back and forth to the customizer to get familiar with this section");

        
        Section("Highlight items by Base", "Firefly") {
            Function CondShowBase_Lvl ($s, $shd = "SD", $title)
            {
                QuickUI($s, $shd, ["CondTargetSelection", "Rarity", "SocketGroup", "Stats_RareGear"], $title, ["Gear", "SO"]);
            }

            Conditional("?CLevelShowBases", ["c11.leveling.gear.all", "c11.leveling.firstlevels.all", "c11.leveling.act12.all", "c11.leveling.rares.low", "c11.leveling.all"]) { Show; SetBorderColor 200 0 0; SetFontSize 38; }
            ElementAdder_Tier("?CLevelShowBases", "CondShowBase_Lvl");
        }

        Section("Highlight items by Armour Type", "Firefly") {
            Conditional("?CLevelShowType", ["c11.leveling.gear.all", "c11.leveling.firstlevels.all", "c11.leveling.act12.all", "c11.leveling.rares.low", "c11.leveling.all"]) { Show; SetBorderColor 200 0 0; SetFontSize 38; Class == "Body Armours" "Gloves" "Boots" "Helmets" "Shields"; }
            Function CondShowTypeLVL ($s, $shd = "SD", $title)
            {
                QuickUI($s, $shd, ["CondTargetSelection", "Rarity", "ItemType", "ArmourClasses", "Stats_RareGear"], $title, ["SocketGroup", "SA", "SocketGroup"]);
            }

            ElementAdder_Tier("?CLevelShowType", "CondShowTypeLVL");
        }

        Section("Highlight items by slot", "Firefly") {
            Function CondShowClass_Lvl ($s, $shd = "SD", $title)
            {
                QuickUI($s, $shd, ["CondTargetSelection", "Rarity", "AllGearClasses", "Stats_RareGear"], $title, ["SocketGroup", "AS", "SocketGroup"]);
            }

            Conditional("?CLevelShowClasses", ["c11.leveling.gear.all", "c11.leveling.firstlevels.all", "c11.leveling.act12.all", "c11.leveling.rares.low", "c11.leveling.all"]) { Show; SetBorderColor 200 0 0; SetFontSize 38; }
            ElementAdder_Tier("?CLevelShowClasses", "CondShowClass_Lvl");
        }

        Section("Hide items by Armour Type", "Annulment") {
            Conditional("?CLevelHideType", ["c11.leveling.gear.all", "c11.leveling.firstlevels.all", "c11.leveling.act12.all", "c11.leveling.rares.low", "c11.leveling.all"]) { Hide; Class == "Body Armours" "Gloves" "Boots" "Helmets" "Shields"; }

            Function CondHideTypeLVL ($s, $shd = "HD", $title)
            {
                QuickUI($s, $shd, ["CondTargetSelection", "ItemType", "Rarity", "ArmourClasses", "Stats_RareGear"], $title, ["SocketGroup", "SA", "SocketGroup"]);
            }

            ElementAdder_Tier("?CLevelHideType", "CondHideTypeLVL");
        }

        Section("Hide items by slot", "Annulment") {
            Function CondHideClass_Lvl ($s, $shd = "HD", $title)
            {
                QuickUI($s, $shd, ["CondTargetSelection", "Rarity", "AllGearClasses", "Stats_RareGear"], $title, ["SocketGroup", "SA", "SocketGroup"]);
            }

            Conditional("?CLevelHideClasses", ["c11.leveling.gear.all", "c11.leveling.firstlevels.all", "c11.leveling.act12.all", "c11.leveling.rares.low", "c11.leveling.all"]) { Hide; SetFontSize 18; }
            ElementAdder_Tier("?CLevelHideClasses", "CondHideClass_Lvl");
        }
    }

    Section("Colors and Links", "Fusing") {

        Section("Chromatic Recipe Items", "Chromatic") {
            QuickUI([0.0, "Leveling RGB Chromatic recipe (small 2x2)", "leveling->normalmagic->rgb;rgbsmall1"], "SD", ["AreaLevel", "Rarity", "Width", "Height"], "Small 2x2 Chromatics");
            QuickUI([0.0, "Leveling RGB Chromatic recipe (small 1x3)", "leveling->normalmagic->rgb;rgbsmall2"], "SD", ["AreaLevel", "Rarity", "Width", "Height"], "Small 1x3, 1x4 Chromatics");
            QuickUI([0.0, "Leveling RGB Chromatic recipe (medium)", "leveling->normalmagic->rgb;rgbmedium"], "SD", ["AreaLevel", "Rarity", "Width", "Height"], "Medium Chromatics");
            QuickUI([0.0, "Leveling RGB Chromatic recipe (large)", "leveling->normalmagic->rgb;rgblarge"], "SD", ["AreaLevel", "Rarity", "Width", "Height"], "Large Chromatics");
        }

        Section("5-linked Gear", "Fusing") {

            Description("5 linked items during leveling receive extra highlight and are often valuable at the start of new leagues");

            QuickUI([0.0, "Leveling 5 links", "socketslinks;5linksleveling"], "SD", ["SixSocketClasses"]);
        }

        Section("4-Linked Gear", "Fusing") {
            Description("By adding e.g. 'GG', all 4-links will need to at least have 2 green colors to get highlighted. You can add one or multiple combinations of 'R', 'G' and 'B'. This is very useful to hide uninteresting linked items.");

            QuickUI([0.0, "Leveling Rare 4 links", "leveling->rare->socketslinks;4linkrares"], "SD", ["Rarity", "AreaLevel", "FourPlusSocketClasses"], "4 links rare", ["SocketGroup", "SA", "SocketGroup"]);
            QuickUI([0.0, "Leveling Magic/Normal 4 links", "leveling->normalmagic->4l;general"], "SD", ["Rarity", "AreaLevel", "FourPlusSocketClasses"], "4 links magic/normal", ["SocketGroup", "SA", "SocketGroup"]);
        }

        Section("3-Linked Gear: General", "Fusing") {
            Description("By adding e.g. 'GG', all 3-links will need to at least have 2 green colors to get highlighted. You can add one or multiple combinations of 'R', 'G' and 'B'. This is very useful to hide uninteresting linked items.");
            QuickUI([1.0, "Leveling 3 links lvl 1-24", "leveling->normalmagic->3l;general"], "SD", ["Rarity", "AreaLevel", "SocketedGearClasses"], "", ["SocketGroup", "SA", "SocketGroup"]);
            QuickUI([1.0, "Leveling 3 links early", "leveling->normalmagic->3l;earlythreelinks"], "SD", ["Rarity", "AreaLevel", "SocketedGearClasses"], "", ["SocketGroup", "SA", "SocketGroup"]);
        }

        Section("Custom Linked item rules", "Chromatic") {

            Function LinkFunction($s, $shd = "SD", $title) {
                QuickUI($s, $shd, ["SocketedGearClasses", "ItemLevel", "LinkedSockets", "Rarity"], $title, ["SocketGroup", "S", "SocketGroup"]);
            }

            Warning("Example: To highlight an item with 3 red sockets that are linked to each other, write RRR into the input field. The order doesn't matter.");
            DeepSearch S0("skip", "skip", "leveling->rare->socketslinks;4linkrares") { SocketGroup "RGBB"; Rarity Normal; BaseType "Iron Gauntlets";}
            Conditional("?CLvlS0", [0]) { Show; SocketGroup "RRR"; SetBorderColor 200 0 0; SetFontSize 38; Class == "Helmets" "Gloves" "Boots" "Body Armours" "Shields"; Rarity Normal Magic; };

            SocketFunction("?CLvlS0", "SD", "Racing Socket Group");
            ElementAdder_Tier("?CLvlS0", "LinkFunction");
        }

        Section("Custom Socket rules", "Chromatic") {

            Function SocketFunction($s, $shd = "SD", $title) {
                QuickUI($s, $shd, ["SocketedGearClasses", "ItemLevel", "ItemType", "LinkedSockets", "Rarity", "Sockets"], $title);
            }

            DeepSearch S0("skip", "skip", "leveling->rare->armours;general") { }
            Conditional("?CLvlSockets", [0]) { Show; Sockets >= "BB"; SetBorderColor 200 0 0; SetFontSize 38; Class == "Helmets" "Gloves" "Boots" "Body Armours" "Shields"; Rarity Normal Magic; };

            SocketFunction("?CLvlSockets", "SD", "Racing Sockets");
            ElementAdder_Tier("?CLvlSockets", "SocketFunction");
        }
    }

    Section("Flasks", "Flask") {

        Section("Flask Progression","FlaskLife")
        {
            Description("This section combines 30 different rules that will highlight the best available life, mana and hybrid flasks, during your Campaign progress.");
            DeepSearchMulti S0(0.0, "Leveling-Flasks-Hybrid-Progression", 1, 6){ +BaseType "Hybrid Flask"; Class == "Hybrid Flasks"; +AreaLevel <= 65; -Quality = 0; Rarity Normal; }
            DeepSearchMulti S1(0.0, "Leveling-Flasks-Life-Progression", 1, 12){ +BaseType "Life Flasks"; Class == "Life Flasks"; +AreaLevel <= 64; -Quality = 0; Rarity Normal; }
            DeepSearchMulti S2(0.0, "Leveling-Flasks-Mana-Progression", 1, 12){ +BaseType "Mana Flasks"; Class == "Mana Flasks"; +AreaLevel <= 64; -Quality = 0; Rarity Normal; }

            Function FlaskBox ($s, $shd = "SDH", $text) { QuickUI($s, $shd, ["RarityNM", "Quality", "ItemLevel"], $text); }
            FlaskBox(S0, SH, "Hybrid Flasks");
            FlaskBox(S1, SH, "Life Flasks");
            FlaskBox(S2, SH, "Mana Flasks");
        }

        Section ("Utility Flasks","Flask")
        {
             QuickUI([0.0, "Leveling-Flasks-Handpicked-Utility", "leveling->flasks->utility;quicksilver"], SDH, ["Utility Flasks", "RarityNM", "Quality", "AreaLevel"], "Quicksilver Flasks");
             QuickUI([0.0, "Leveling-Flasks-Handpicked-Utility-Low", "leveling->flasks->utility;asortedutility"], SDH, ["Utility Flasks", "RarityNM", "Quality", "AreaLevel"], "Handpicked Utility Flasks");
             QuickUI([0.0, "Leveling-Flasks-Utility", "leveling->flasks->utility;any"], SDH, ["Utility Flasks", "RarityNM", "Quality", "AreaLevel"], "Other Utility Flasks");

             Function UtilityFlaskCustomRuleUI ($s, $shd = "SHD", $title)
             {
                QuickUI($s, $sdh, ["Utility Flasks", "RarityNM", "Quality", "AreaLevel"], $title);
             }

             Conditional("?UtilityFlaskCustomRules") { Show; Class "Flask"; };
             ElementAdder_Tier("?UtilityFlaskCustomRules", "UtilityFlaskCustomRuleUI");
        }

        Section("Quality Flasks", "FlaskLife") {
            QuickUI([1.0, "Max Quality leveling flasks", "leveling->flasks->quality;max"], "SD", ["Quality", "AreaLevel"]);
            QuickUI([1.0, "High Quality leveling flasks", "leveling->flasks->quality;high"], "SD", ["Quality", "AreaLevel"]);
            QuickUI([1.0, "Low Quality leveling flasks", "leveling->flasks->quality;any"], "SD", ["Quality", "AreaLevel"]);
        }
    }

    Section("Rare items", "IronRing") {
        Warning("These are SOME of the Campaign rules for rare items. Should you want to edit ALL the rares during the Campaign, we recommend you add a custom show/hide rule.");

        Section("Decorators") {
            Box() { Description("Decorators highlight specific characteristics of an item, by changing the appearance, without deciding whether it is hidden or shown."); }

            QuickUI([1.0, "Leveling rare deco tiny", "decorators->leveling->rare;tinyrares"], "SD", ["ItemLevel", "Height", "Width"]);
            QuickUI([1.0, "Leveling rare deco medium 1", "decorators->leveling->rare;mediumrares1"], "SD", ["ItemLevel", "Height", "Width"]);
            QuickUI([1.0, "Leveling rare deco medium 2", "decorators->leveling->rare;mediumrares2"], "SD", ["ItemLevel", "Height", "Width"]);
            QuickUI([1.0, "Leveling rare deco large", "decorators->leveling->rare;largerares"], "SD", ["ItemLevel", "Height", "Width"]);
        }

        Function ClassBox ($s, $shd = "SDH", $text) { QuickUI($s, $shd, ["ItemLevel", "DropLevel", "AllGearClasses"], $text); }

        Section("Rings, Amulets, Belts") {
            QuickUI([0.0, "Leveling Rare Rustic Sash", "leveling->rare->universal;rusticsash"], "SD", ["ItemLevel"], "", ["Gear", "SO"], "Special jewellery");
            ClassBox([0.0, "Leveling Rare Accessories", "leveling->rare->universal;jewellery"], "SD", "Rare Accessories");
        }

        Section("Armours") {
            QuickUI([0.0, "Leveling rare boots", "leveling->rare->armours;bootsfocus"], "SD", ["ItemType", "ItemLevel", "DropLevel", "Sockets"]);
            QuickUI([0.0, "Leveling small rare armours", "leveling->rare->armours;general"], "SD", ["ItemType", "ItemLevel", "DropLevel", "Sockets", "AllGearClasses"], "Small rare armours");
            QuickUI([0.0, "Leveling rare shields", "leveling->rare->armours;shields"], "SD", ["ItemType", "ItemLevel", "DropLevel", "Height", "Sockets"]);
            QuickUI([0.0, "Leveling rare body armours", "leveling->rare->armours;bodyarmours"], "SD", ["ItemType", "ItemLevel", "DropLevel", "Sockets"]);
        }

        Section("Melee gear") {
            Search S0(0.0, "Leveling Rare Melee Progression 1", "leveling->rare->melee;l1") { }
            Search S0(0.0, "Leveling Rare Melee Progression 2", "leveling->rare->melee;l2") { }
            Search S0(0.0, "Leveling Rare Melee Progression 3", "leveling->rare->melee;l3") { }
            Search S0(0.0, "Leveling Rare Melee Progression 4", "leveling->rare->melee;l4") { }
            Search S0(0.0, "Leveling Rare Melee Progression 5", "leveling->rare->melee;l5") { }
            Search S0(0.0, "Leveling Rare Melee Progression 6", "leveling->rare->melee;l6") { }
            Search S0(0.0, "Leveling Rare Melee Progression 7", "leveling->rare->melee;l7") { }
            Search S0(0.0, "Leveling Rare Melee Progression 8", "leveling->rare->melee;l8") { }

            QuickUI(S0, "SD", ["AllGearClasses", "Sockets", "AreaLevel"], "", [], "These section combines many rules and will show the current top available base-types.");
        }

        Section("Archer gear") {
            Search S0(0.0, "Leveling Rare Bow Progression 1", "leveling->rare->archer;l1") { }
            Search S0(0.0, "Leveling Rare Bow Progression 2", "leveling->rare->archer;l2") { }
            Search S0(0.0, "Leveling Rare Bow Progression 3", "leveling->rare->archer;l3") { }
            Search S0(0.0, "Leveling Rare Bow Progression 4", "leveling->rare->archer;l4") { }
            Search S0(0.0, "Leveling Rare Bow Progression 5", "leveling->rare->archer;l5") { }
            Search S0(0.0, "Leveling Rare Bow Progression 6", "leveling->rare->archer;l6") { }
            Search S0(0.0, "Leveling Rare Bow Progression 7", "leveling->rare->archer;l7") { }
            Search S0(0.0, "Leveling Rare Bow Progression 8", "leveling->rare->archer;l8") { }

            QuickUI(S0, "SD", ["AllGearClasses", "Sockets", "AreaLevel"], "", [], "These section combines many rules and will show the current top available base-types.");
            QuickUI([0.0, "Leveling rare quivers", "leveling->rare->armours;quivers"], "SD", ["ItemLevel", "DropLevel"]);
        }

        Section("Caster gear") {
            QuickUI([0.0, "Leveling rare caster weapons", "leveling->rare->caster;general"], "SD", ["AllGearClasses", "ItemLevel", "DropLevel", "Sockets"]);
            QuickUI([0.0, "Leveling rare caster weapons early", "leveling->rare->caster;earlylevels"], "SD", ["AllGearClasses", "ItemLevel", "DropLevel", "Sockets"]);
        }

        Section("Summoner gear") {
            QuickUI([0.0, "Leveling Rare Summoner Gear", "leveling->rare->minion;general"], "SH", ["ItemLevel", "DropLevel", "Sockets"], null, ["Gear", "OS"]);
        }

        Section("Remaining rares") {
            QuickUI([1.0, "Leveling Rare RGB Chromatic recipe", "leveling->rare->remaining;chromaticrares"], "SD", ["ItemLevel", "Rarity", "Sockets"], "Rare Chromatics");
            QuickUI([0.0, "Remaining leveling rares, high-level", "leveling->rare->remaining;underlevel68"], "SD", ["ItemLevel", "AreaLevel", "AllGearClasses", "Sockets"]);
            QuickUI([0.0, "Remaining leveling rares, mid-level", "leveling->rare->remaining;underlevel42"], "SD", ["ItemLevel", "AreaLevel", "AllGearClasses", "Sockets"]);
            QuickUI([0.0, "Remaining leveling rares, low-level", "leveling->rare->remaining;underlevel24"], "SD", ["ItemLevel", "AreaLevel", "AllGearClasses", "Sockets"]);
            QuickUI([0.0, "Remaining leveling rares, start", "leveling->rare->remaining;underlevel16"], "SD", ["ItemLevel", "AreaLevel", "AllGearClasses"]);
        }
    }

    Section("Act- & Build-specific items", "Ring") {
        Function ClassBox ($s, $shd = "SDH", $text) { QuickUI($s, $shd, ["AllGearClasses", "Rarity", "AreaLevel", "DropLevel", "Sockets"], $text); }
        Function BaseTypeBoxX ($s, $shd = "SDH", $text) { QuickUI($s, $shd, ["Rarity", "AreaLevel"], $text, ["Gear", "SO"]); }

        Section("Act 1 (level 1-13)") {
            Description("Flat damage is king during the first levels, while leveling an archer or melee build. You can also use them in recipes");

            QuickUI([0.0, "Act 1 Caster weapons", "leveling->normalmagic->act1;casterweapons"], "SD", ["AllGearClasses", "Rarity", "Sockets", "LinkedSockets", "AreaLevel"]);
            QuickUI([0.0, "Early Leveling Boots ilvl 12", "leveling->normalmagic->act1;boots"], "SD", ["Rarity", "AreaLevel"], "Magic boots for movement speed");
            BaseTypeBoxX([1.0, "Act 1 Caster rings", "leveling->normalmagic->act1;castercraftrings"], "SD", "");
            BaseTypeBoxX([0.0, "Act 1 Physical accessories", "leveling->normalmagic->act1;physical"], "SD");
            BaseTypeBoxX([2.0, "Act 1 selected jewellery", "leveling->normalmagic->act1;general"], "SD");
            ClassBox([0.0, "Act 1 Jewellery", "leveling->normalmagic->act1;jewellery"], "SD", "Remaining Act 1 jewellery");
        }

        Section("Act 2 & 3 (level 13-33)")
        {
            Description("Act 2 and 3 are fairly lightning heavy. Topaz rings are a good opportunity to boost your defenses, when rushing.");
            BaseTypeBoxX([0.0, "Act 2/3 Rings", "leveling->normalmagic->act2;castercraftrings"], "SD", "LVL 12-32 Top Rings (Norm/Magic)");
            BaseTypeBoxX([0.0, "Act 2/3 Rustic Sash", "leveling->normalmagic->act2;physical"], "SD");
        }

        Section("Act 4, 5 & 6 (level 33-50)") {
            Description("Acts 4-6 contain a lot of deadly fire damage sources. Ruby rings help a lot. After act 5 you want to try to have each of your resistances very high or capped as any damage source can be deadly otherwise.");
            BaseTypeBoxX([1.0, "Act 4-6 Fire-Res Gear", "leveling->normalmagic->otheracts;fireresistgear"], "SD", "");
            BaseTypeBoxX([0.0, "Act 4/5/6 Rings", "leveling->normalmagic->otheracts;generalcrafting"], "SD", "Act 4/5/6 Rings (norm/magic)");
        }

        Section("Quivers") {
            QuickUI([0.0, "Leveling Quivers lvl 1-8", "leveling->normalmagic->act1;quivers"], "SD", ["AreaLevel", "Rarity"], "Early leveling quivers");
            QuickUI([0.0, "Leveling Quivers lvl 24-34", "leveling->normalmagic->otheracts;highphysquivers"], "SD", ["AreaLevel", "Rarity"], "Mid-level quivers", ["Gear", "SO"]);
        }
        
        Section("Summoner gear") {
            // Description("You can sell a Transmutation Orb + Bone Spirit Shield + Life Flask to get a flask with the minion healing mod. This flask can be sold with a magic helmet and an Orb of Alteration to create a helmet with +1 to Level of socketed Minion Gems. Useful for summoner leveling.");
            QuickUI([0.0, "Leveling Summoner Wands", "leveling->normalmagic->minion;miniongear"], "SH", ["AreaLevel", "Rarity"], null, ["Gear", "SO"]);
            QuickUI([0.0, "Leveling Summoner Shields", "leveling->normalmagic->minion;minionshields"], "SD", ["AreaLevel", "Rarity"], null, ["Gear", "OS"]);
        }
    }

    Section("Normal & Magic Item Progression", "Siege Axe") {

        Box() { Description("Item progressions highlight the best available itemtype (such as only 1h Axe or Claw) available on your level. Select up to 3 types below and we'll create your perfect progression in just 1 click."); }

        Function ItemProgUI($s) { QuickUI($s, "", ["Rarity", "Sockets", "LinkedSockets", "AreaLevel", "Corrupted", "Progression"], "Item Progression Editor"); }

        Section("Personal Item Progression #1") {
            DeepSearch S0("skip", "skip", "leveling->rare->caster;earlylevels") { SocketGroup "RGBR"; ItemLevel 20; BaseType "Driftwood Wand"; }
            Conditional("?LvlItemProgression1", [0], "notSimpleBuilder") { Show; Rarity Normal Magic; SetBorderColor 200 0 0; SetFontSize 38; }
            ItemProgUI("?LvlItemProgression1");
        }

        Section("Personal Item Progression #2") {
            DeepSearch S0("skip", "skip", "leveling->rare->caster;earlylevels") { SocketGroup "RGBR"; ItemLevel 20; BaseType "Driftwood Wand"; }
            Conditional("?LvlItemProgression2", [0], "notSimpleBuilder") { Show; Rarity Normal Magic; SetBorderColor 200 0 0; SetFontSize 38; }
            ItemProgUI("?LvlItemProgression2");
        }

        Section("Personal Item Progression #3") {
            DeepSearch S0("skip", "skip", "leveling->rare->caster;earlylevels") { SocketGroup "RGBR"; ItemLevel 20; BaseType "Driftwood Wand"; }
            Conditional("?LvlItemProgression3", [0], "notSimpleBuilder") { Show; Rarity Normal Magic; SetBorderColor 200 0 0; SetFontSize 38; }
            ItemProgUI("?LvlItemProgression3");
        }

        Box() { Description("The fitler comes with a default item progression. Veteran players and racers can adjust or disable this. Most players however, should usually be quite happy with the default settings. If you're using a custom progression, you likely want to disable the default one."); }

        Section ("Default Item Progression")
        {
            Description("You can use this progression to highlight the best available base armours and weapons while leveling for quick crafting. You might want to customize or disable it, especially if you've defined your own progression above.");
            Description("These sections combine over 25 rules and will show the current top available base-types.");
            DeepSearchMulti S0(0.0, "Leveling-Progression-Full", 0, 15) { -BaseType "Gemini Claw"; Class "Claws"; +DropLevel <= 65; !ItemLevel < 65; Rarity Normal; SocketGroup GGG; }
            QuickUI(S0, "SHD", ["Sockets", "LinkedSockets", "Corrupted", "AllGearClasses", "BaseArmour", "BaseEvasion", "BaseEnergyShield"], "Default Item Progression");
        }
    }

    Section("Other Normal and magic Items", "ShabbyJerkin") {
        
        Box() { Description("These are non-noteworthy magic and normal gear pieces. These are useful during your first levels to give you some initial equipment and sockets and during the first acts to sell for transmutation shards."); }

        Section("Magic Item Decorators") {
            Search S0(1.0, "Leveling magic deco medium 1", "decorators->leveling->magic;medium1") {}
            Search S0(1.0, "Leveling magic deco medium 2", "decorators->leveling->magic;medium2") {}

            Box() { Description("Decorators highlight specific characteristics of an item, by changing the appearance, without deciding whether it is hidden or shown."); }

            QuickUI(S0, "SD", ["ItemLevel"], "Leveling magic deco medium (2x2 and 1x3)");
            QuickUI([1.0, "Leveling magic deco tiny", "decorators->leveling->magic;tiny"], "SD", ["ItemLevel", "Width", "Height"]);
            QuickUI([0.0, "Leveling magic deco early", "decorators->leveling->magic;noticeearly"], "SH", ["AreaLevel"]);
        }

        Section("Magic Items: Hide rules") {
            Description("The filter starts hiding magic items at higher levels while leveling, this can be adjusted here");

            QuickUI([2.0, "Large Mid-Level magic items", "leveling->magic->remaining;largemagicblocker"], "SH", ["AreaLevel", "Width", "Height"]);
            QuickUI([2.0, "Mid-Level magic items A", "leveling->magic->remaining;mediummagicblocker"], "SH", ["AreaLevel", "Width", "Height"]);
        }

        Section("Magic Items") {
            Description("Magic gear can be sold early on to get transmutation shards or identified to protect your innards.");

            QuickUI([0.0, "Magic items until mud flats", "leveling->magic->remaining;untilmudflats"], "SH", ["AreaLevel"]);
            QuickUI([1.0, "First levels magic items", "leveling->magic->remaining;firstlevels"], "SH", ["AreaLevel"]);
            QuickUI([1.0, "Act 1 magic items", "leveling->magic->remaining;act1"], "SH", ["AreaLevel"]);
            QuickUI([2.0, "Act 2 magic items", "leveling->magic->remaining;act2"], "SH", ["AreaLevel"]);
            QuickUI([2.0, "Other magic items", "leveling->magic->remaining;rest"], "SH", ["AreaLevel"]);
        }

        Section("Normal Items during first levels") {
            Function ClassBox ($s, $shd = "SDH", $text) { QuickUI($s, $shd, ["AllGearClasses", "Rarity", "AreaLevel", "DropLevel", "Sockets"], $text); }
            Function BaseTypeBoxX ($s, $shd = "SDH", $text) { QuickUI($s, $shd, ["Rarity", "AreaLevel"], $text, ["Gear", "S"]); }
            Description("Just some normal gear for your very first levels. You can equip these for some base stats and initial sockets to level gems.");

            QuickUI([1.0, "Early 3 socketed items", "leveling->firstlevels;threesocketedgear"], "SH", ["Sockets", "Rarity", "AreaLevel", "DropLevel"], "Early 3 socketed items");
            ClassBox([0.0, "Early leveling normal items (body armour)", "leveling->firstlevels;earlybodyarmours"], "SD", "Exception: Body Armours");
            ClassBox([0.0, "Early leveling normal items (other)", "leveling->firstlevels;firstareas"], "SH", "First 4 Levels: Other Items");
        }
    }
}

//===================================================================================================
// MISC ITEMS
//===================================================================================================

Chapter() {

    SectionTitle("Miscellaneous", "last");
    
    Section("Add additional Show/Hide rules", "Firefly") {
    Description("Use this section to add exotic rules and exception. This section is NOT foolproof, you can accidentally hide valuable items by misusing it. With great power comes great responsibility.");
        Function CondShowBase ($s, $shd = "SHD", $title)
        {
            QuickUI($s, $shd, ["CondTargetSelection", "RarityU", "ItemLevel", "Sockets", "Stats_All"], $title, ["rarityItems", "OS"]);
        }

        Function CondShowClass ($s, $shd = "SHD", $title)
        {
            QuickUI($s, $shd, ["CondTargetSelection", "RarityU", "AllRarityClasses", "ItemLevel", "Sockets", "Stats_All"], $title, ["rarityItems", "SOA"]);
        }

        Function CondFilterMod ($s, $shd = "SHD", $title)
        {
            QuickUI($s, $shd, ["CondTargetSelection", "RarityU", "AllRarityClasses", "Identified", "Corrupted", "ItemLevel", "Sockets", "Stats_All", "Mods"], $title, ["rarityItems", "SOA"]);
        }

        Function CondShowArmourType ($s, $shd = "SHD", $title)
        {
            QuickUI($s, $shd, ["CondTargetSelection", "RarityU", "ItemType", "ArmourClasses", "ItemLevel", "Sockets", "Stats_All"], $title);
        }

        Function CondShowMisc ($s, $shd = "SHD", $title)
        {
            QuickUI($s, $shd, ["CondTargetSelection", "Stats_Misc"], $title, ["noRarityItems", "SAO"]);
        }

        Section("Add Basetype-Based Rules", "Firefly")
        {
            Description("Give specific BaseTypes more highlighting here.");
            Conditional("?CUniversalCustomRuleB", ["c1.idmod.all", "c11.leveling.all", "c6.rare.decorator.all", "c0.alpha", "c5.hidelayer.normalmagic", "c12.hide.all"]) { Show; SetBorderColor 200 0 0; SetFontSize 38; ItemLevel >= 68; Rarity Normal Magic; }
            ElementAdder_Tier("?CUniversalCustomRuleB", "CondShowBase");
        }

        Section("Add Class-Based Rules", "Firefly")
        {
            Description("Give specific classes more highlighting here.");
            Conditional("?CUniversalCustomRuleC", ["c1.idmod.all", "c11.leveling.all", "c6.rare.decorator.all", "c0.alpha", "c5.hidelayer.normalmagic", "c12.hide.all"]) { Show; SetBorderColor 200 0 0; SetFontSize 38; ItemLevel >= 68; Rarity Normal Magic; }
            ElementAdder_Tier("?CUniversalCustomRuleC", "CondShowClass");
        }

        Section("Add Mod-Filtering Rule", "Firefly")
        {
            Description("Custom mod filtering. Note that you first need to select the correct classes, then add the mods you need.");
            Conditional("?CUniversalCustomRuleD", ["c1.idmod.all", "c11.leveling.all", "c6.rare.decorator.all", "c0.alpha", "c5.hidelayer.normalmagic", "c12.hide.all"]) { Show; SetBorderColor 220 50 150 255; SetTextColor 220 50 150 255; SetFontSize 45; Identified True; Corrupted False; Rarity Normal Magic Rare; HasExplicitMod "of Crafting"; PlayAlertSound 1 300; PlayEffect Red; MinimapIcon 0 Red Hexagon; }
            ElementAdder_Tier("?CUniversalCustomRuleD", "CondFilterMod");
        }

        Section("Add Armour-Type-Based Rules", "Firefly")
        {
            Conditional("?CUniversalCustomRuleArmourType", ["c1.idmod.all", "c11.leveling.all", "c6.rare.decorator.all", "c0.alpha", "c5.hidelayer.normalmagic", "c12.hide.all"]) { Show; SetBorderColor 200 0 0; SetFontSize 38; ItemLevel >= 68; Rarity Normal Magic; Class == "Body Armours" "Gloves" "Boots" "Helmets" "Shields"; }
            ElementAdder_Tier("?CUniversalCustomRuleArmourType", "CondShowArmourType");
        }

        Section("Add Misc. Rules", "Firefly")
        {
            Conditional("?CUniversalCustomRuleMisc", ["c1.idmod.all", "c11.leveling.all", "c6.rare.decorator.all", "c0.alpha", "c5.hidelayer.normalmagic", "c12.hide.all"]) { Show; SetBorderColor 200 0 0; SetFontSize 38; }
            ElementAdder_Tier("?CUniversalCustomRuleMisc", "CondShowMisc");
        }
    }

    Section("Identified Mod Filtering", "IdentifiedItem") {
        Warning("Note that filtering by mods is only possible for EXPLICIT mods of IDENTIFIED items! This excludes any labyrinth enchantments as those are implicit.");

        Function ModItemUI($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["ItemLevel", "DropLevel", "Corrupted", "AllGearClasses", "Mods"], $text, ["Gear", "SOA"]); }
        Function BasicModItemUI($s, $text) { QuickUI($s, "SD", ["ItemLevel", "DropLevel", "Corrupted", "Mods"], $text); }

        Title("Weapons");

        Section("Physical Weapons") {
            ModItemUI([0.0, "ModFilter: Veiled Phys Weapons", "rareid;weapon_phys"], "SD", "Phys Weapons 1");
            ModItemUI([0.0, "ModFilter: Phys Weapons, 2", "rareid;weapon_physpure"], "SD", "Phys Weapons 2");
        }

        Section("Elemental Weapons") {
            ModItemUI([0.0, "ModFilter: Ele Weapons, 3", "rareid;weapon_ele"], "SD", "Ele Weapons 1");
            ModItemUI([0.0, "ModFilter: Ele Weapons, 4", "rareid;weapon_elepure"], "SD", "Ele Weapons 2");
        }

        Section("Caster Weapons") {
            ModItemUI([0.0, "ModFilter: Ele+Chaos Caster Weapons, fire", "rareid;caster_fireweapont2"], "SD", "Fire caster");
            ModItemUI([0.0, "ModFilter: Ele+Chaos Caster Weapons, cold", "rareid;caster_coldweapont2"], "SD", "Cold caster");
            ModItemUI([0.0, "ModFilter: Ele+Chaos Caster Weapons, light", "rareid;caster_lightweapont2"], "SD", "Lightning caster");
            ModItemUI([0.0, "ModFilter: Ele+Chaos Caster Weapons, chaos", "rareid;caster_chaosweapont2"], "SD", "Chaos caster");
            ModItemUI([0.0, "ModFilter: Physical Caster Weapons", "rareid;caster_physweapont2"], "SD", "Physical caster");
            ModItemUI([0.0, "ModFilter: BladeBlast", "rareid;bladeblast_2core"], "SD", "Blade Blast Daggers");
        }

        Section("Gem Weapons") {
            ModItemUI([0.0, "Mod items B", "rareid;gem_bow"], "SD", "Gem Bow");
            ModItemUI([0.0, "Mod items C", "rareid;gem_caster"], "SD", "Caster Gem Weapons");
            ModItemUI([0.0, "Mod items D", "rareid;gem_staves"], "SD", "Gem Staves");
        }

        Section("Spellslinger Weapons") {
            ModItemUI([0.0, "ModFilter: Spellslinger Weapons, 4", "rareid;caster_slingert2"], "SD", "Spellslinger Weapons");
        }

        Title("Gear");

        Section("Boots") {
            BasicModItemUI([0.0, "ModFiltering: Boots 1", "rareid;boots_life_based"], "Life Boots");
            BasicModItemUI([0.0, "ModFiltering: Boots ES 3", "rareid;boots_es_based"], "ES Boots");
        }

        Section("Gloves") {
            BasicModItemUI([0.0, "ModFiltering: Gloves1", "rareid;gloves_life_based"], "Life Gloves");
            BasicModItemUI([0.0, "ModFiltering: Gloves3", "rareid;gloves_es_based"], "ES Gloves");
        }

        Section("Helmets") {
            BasicModItemUI([0.0, "ModFiltering: Helmets1", "rareid;helmet_life_based"], "Life Helmets");
            BasicModItemUI([0.0, "ModFiltering: Helmets ES 3", "rareid;helmet_es_based"], "ES Helmets");
        }

        Section("Body Armours") {
            BasicModItemUI([0.0, "ModFiltering: Body - Life", "rareid;body_life"], "Life Armours");
            BasicModItemUI([0.0, "ModFiltering: Body - ES", "rareid;body_es"], "ES Armours");
            BasicModItemUI([0.0, "ModFiltering: Body - Defense", "rareid;body_defense"], "Defense Armours");
            BasicModItemUI([0.0, "ModFiltering: Body - Defense Life", "rareid;body_lifedefense"], "Defense Life Armours");
        }

        Section("Shields") {
            BasicModItemUI([0.0, "ModFiltering: Shields1", "rareid;shield_lifefocus"], "Shields Life");
            BasicModItemUI([0.0, "ModFiltering: Shields2", "rareid;shield_esfocus"], "Shields ES");
            BasicModItemUI([0.0, "ModFiltering: Shields5", "rareid;shield_casterfocus"], "Shields Damage Caster");
            BasicModItemUI([0.0, "ModFiltering: Shields Def", "rareid;shield_defensefocus"], "Shields Def");
        }

        Title("Jewellery");

        Section("Belts") {
            BasicModItemUI([0.0, "ModFiltering: Belts1", "rareid;belt_general"], "Belts");
        }

        Section("Rings") {
            BasicModItemUI([0.0, "ModFiltering: Rings1", "rareid;ring_attack"], "Attacks Rings");
            BasicModItemUI([0.0, "ModFiltering: Rings3", "rareid;ring_caster"], "Caster Rings");
        }

        Section("Amulets") {
            BasicModItemUI([0.0, "ModFiltering: Amulets +1 All Gems", "rareid;amu_exalter"], "Amulets with +1 to all skill gems");
            Divider();
            BasicModItemUI([0.0, "ModFiltering: Amulets1", "rareid;amu_1coreattack"], "Attack Amulets");
            BasicModItemUI([0.0, "ModFiltering: Amulets3", "rareid;amu_2coreattack"], "Attack Amulets");
            Divider();
            BasicModItemUI([0.0, "ModFiltering: Amulets4", "rareid;amu_1corecaster"], "Caster Amulets");
            BasicModItemUI([0.0, "ModFiltering: Amulets5", "rareid;amu_2corecaster"], "Caster Amulets");
            Divider();
            BasicModItemUI([0.0, "ModFiltering: Amulets DoT 1", "rareid;amu_1coredot"], "DoT Caster Amulets");
            BasicModItemUI([0.0, "ModFiltering: Amulets DoT 2", "rareid;amu_2coredot"], "DoT Caster Amulets");
        }

        Title("Misc.");

        Section("Quivers") {
            BasicModItemUI([0.0, "ModFiltering: Quiver1", "rareid;quiv_hit"], "Hit Quivers");
            BasicModItemUI([0.0, "ModFiltering: Quiver, DoT", "rareid;quiv_dot"], "DoT Quivers");
        }

        Section("Jewels") {
            BasicModItemUI([0.0, "ModFiltering: Jewels Minion", "rareid;idjewel_minion"], "Minion Jewels");
            BasicModItemUI([0.0, "ModFiltering: Jewels DoT", "rareid;idjewel_dot"], "DoT Jewels");
            BasicModItemUI([0.0, "ModFiltering: Jewels Crit Attack", "rareid;idjewel_critattack"], "Crit Attack Jewels");
            BasicModItemUI([0.0, "ModFiltering: Jewels Crit Spell", "rareid;idjewel_critspell"], "Crit Spell Jewels");
        }

        Section("Abyss Jewels") {
            BasicModItemUI([0.0, "ModFiltering: Abyss Jewels Minion", "rareid;idaj_minion"], "Minion Abyss Jewels");
            BasicModItemUI([0.0, "ModFiltering: Abyss Jewels Caster", "rareid;idaj_caster"], "Caster Abyss Jewels");
            BasicModItemUI([0.0, "ModFiltering: Abyss Jewels Attack", "rareid;idaj_attack"], "Attack Abyss Jewels");
            BasicModItemUI([0.0, "ModFiltering: Abyss Jewels Mixed", "rareid;idaj_mixer"], "Mixed Abyss Jewels");
        }

        Section("Items with Corrupted Implicits") {
            Description("These items are identified, have several good mods and a corrupted implicit. Ideally with luck, these can roll mods like curses on hit, chain and extra projectiles.");
            BasicModItemUI([0.0, "ModFiltering: Corrupted Gloves", "corruptedid;gloves_life_based"], "Corrupted Gloves");
            BasicModItemUI([0.0, "ModFiltering: Corrupted Quivers Hit", "corruptedid;quiv_hit"], "Corrupted Quivers (hit-mix)");
            BasicModItemUI([0.0, "ModFiltering: Corrupted Quivers Dot", "corruptedid;quiv_dot"], "Corrupted Quivers (dot-mix)");
        }

        Section("Magic items") {
//            ModItemUI([0.0, "ModFilter: Magic - Amulets with +1 to all gems", "magicid;allskills"], "SD");
//            ModItemUI([1.0, "ModFilter: Magic - Physical weapons", "magicid;phys"], "SD");
//            ModItemUI([1.0, "ModFilter: Magic - Caster", "magicid;damagemods"], "SD");
//            ModItemUI([1.0, "ModFilter: Magic - 35% Movement speed boots", "magicid;speed"], "SD");

            ModItemUI([0.0, "ModFiltering: Magic - Plus 2 All Minion Skills Helmet", "magicid;t1minionhelm"], "SH");
            ModItemUI([0.0, "ModFiltering: Magic - T1 Caster", "magicid;t1caster"], "SH");
            ModItemUI([0.0, "ModFiltering: Magic - T1 Projectile", "magicid;t1proj"], "SH");
            ModItemUI([0.0, "ModFiltering: Magic - T1 Amulet", "magicid;t1amu"], "SH");
            Divider();
            ModItemUI([0.0, "ModFiltering: Magic - T1 Recombinator Gloves", "magicid;recogloves"], "SH");
            ModItemUI([0.0, "ModFiltering: Magic - T1 Recombinator Boots", "magicid;recoboots"], "SH");
            ModItemUI([0.0, "ModFiltering: Magic - T1 Recombinator Helmets", "magicid;recohelmets"], "SH");
            ModItemUI([0.0, "ModFiltering: Magic - T1 Recombinator Weapons", "magicid;recoweapons"], "SH");
            ModItemUI([0.0, "ModFiltering: Magic - T1 Recombinator Rings", "magicid;recorings"], "SH");
            ModItemUI([0.0, "ModFiltering: Magic - T1 Recombinator Fire Caster", "magicid;recocasterfire"], "SH");
            ModItemUI([0.0, "ModFiltering: Magic - T1 Recombinator Cold Caster", "magicid;recocastercold"], "SH");
            ModItemUI([0.0, "ModFiltering: Magic - T1 Recombinator Lightning Caster", "magicid;recocasterlight"], "SH");
            ModItemUI([0.0, "ModFiltering: Magic - T1 Recombinator Physical Caster", "magicid;recocasterphys"], "SH");
            Divider();
            ModItemUI([0.0, "ModFiltering: Magic - T2 Quiver", "magicid;t2quiver"], "SH");
            ModItemUI([0.0, "ModFiltering: Magic - T2 Caster", "magicid;t2caster"], "SH");
            ModItemUI([0.0, "ModFiltering: Magic - T2 Amulet", "magicid;t2amu"], "SH");
            ModItemUI([0.0, "ModFiltering: Magic - T2 Shield", "magicid;t2shield"], "SH");
            ModItemUI([0.0, "ModFiltering: Magic - T2 Suppression", "magicid;t2suppress"], "SH");
            ModItemUI([0.0, "ModFiltering: Magic - T2 Physical", "magicid;t2purephys"], "SH"]);
            ModItemUI([0.0, "ModFiltering: Magic - T2 DoT Wand", "magicid;t2dotwand"], "SH");
            ModItemUI([0.0, "ModFiltering: Magic - T2 Sceptre", "magicid;t2sceptre"], "SH");
            ModItemUI([0.0, "ModFiltering: Magic - T2 Elemental Weapons", "magicid;t2eleweapons"], "SH");
        }
    }

    Section("Skill Gems", "Empower", "E") {

        Description("Noteworthy gems are highlighted here. Quality based gem highlight - mostly for the GCP recipe - can be found in the 'Vendor Recipes' section.");

        Section("Top Awakened Gems", "TopAwakeGem", "E") {
            QuickUI([0.0, "Top Awakened Support Gems", "gems-exceptional;awat1"], "S", ["GemLevel", "Quality"], "Expensive Awakened Gems", ["Gems", "OD"]);
//            QuickUI([0.0, "Support Gems Divergent", "gems-exceptional;divt1"], "S", ["GemLevel", "Quality"], "Expensive Divergent Gems", ["Gems", "DO"]);
//            QuickUI([0.0, "Support Gems Phantasmal", "gems-exceptional;phat1"], "S", ["GemLevel", "Quality"], "Expensive Phantasmal Gems", ["Gems", "OD"]);
//            QuickUI([0.0, "Support Gems Anomalous", "gems-exceptional;anot1"], "S", ["GemLevel", "Quality"], "Expensive Anomalous Gems", ["Gems", "DO"]);
        }

        Section("Top Gems, high level and quality", "SkillGemRed1", "E") {
            QuickUI([0.0, "Top Gems, lvl 20, 20q", "gems-exceptional;2020z"], "S", ["GemLevel", "Quality"], "", ["Gems", "OD"]);
            QuickUI([0.0, "Top Gems, lvl 21, 20q", "gems-exceptional;2120"], "S", ["GemLevel", "Quality"], "", ["Gems", "OD"]);
            QuickUI([0.0, "Top Gems, lvl 20, 23q", "gems-exceptional;2023"], "SH", ["GemLevel", "Quality"], null, ["Gems", "OD"]]);
            QuickUI([0.0, "Top Gems, lvl 21, 23q", "gems-exceptional;2123any"], "SH", ["GemLevel", "Quality"]);
        }

        Section("Awakened Gems", "AwakeGem", "E") {
            Description("Awakened gems are obtained by slaying conquerors and are a powered up version of normal support gems");
            QuickUI([0.0, "Awakened Support Gems", "gems-exceptional;awaany"], "SH", [], "");
        }

        Section("Exceptional Gems - Special gems", "Empower", "E") {
            QuickUI([0.0, "Portal Gem", "gems-special;exportal"], "SH", ["GemLevel", "Quality"], null, ["Gems", "OD"]]);
            QuickUI([0.0, "Top Gems, 20q, Vaal", "gems-exceptional;vaal20"], "S", ["GemLevel", "Quality"], "Quality Vaal Gems", ["Gems", "OD"], "These Vaal Gems are either expensive already or will be once they reach a high level, so it's worth leveling them.");
            QuickUI([0.0, "Leveled gems (low max level tier 1)", "gems-special;ex6lvlgems"], "SD", ["GemLevel", "Corrupted"], "Leveled gems with low max level", ["Gems", "OD"]);
            Divider();
            QuickUI([0.0, "Special Gems Tier 1", "gems-special;specialworlddrops"], "SH", ["GemLevel", "Quality"], null, ["Gems", "DO"]]);
            QuickUI([1.0, "Gems T1", "gems-special;exspecial"], "SD", ["GemLevel", "Quality", "Corrupted"], "Special Gems Tier 2", ["Gems", "DO"]);
            QuickUI([0.0, "Special Gems with level", "gems-special;exspeciale3"], "SH", ["GemLevel", "Quality"], null, ["Gems", "DO"]]);
        }

        Section("Leveled Gems", "SkillGemGreen2") {
            QuickUI([1.0, "Overleveled 21+ Gems", "gems-generic;lt1"], "SD", ["GemLevel"], "");
            QuickUI([1.0, "Leveled Gems (max lvl)", "gems-generic;lt2"], "SD", ["GemLevel"], "");
            QuickUI([1.0, "Leveled Gems (high lvl)", "gems-generic;lt3"], "SD", ["GemLevel"], "");
            QuickUI([1.0, "Leveled Gems (low lvl)", "gems-generic;lt4"], "SD", ["GemLevel"], "");
        }

        Section("Quality Gems", "SkillGemGreen1") {
            QuickUI([1.0, "Overqualitied 21+ Gems", "gems-generic;qt1"], "SD", ["Quality"], "Overqualitied 23+ Gems");
            Description("Gems with 'normal' qualities can be found in the Vendor Recipe section of the Customizer.");
        }

        Section("Gems during Campaign", "SkillGemRed2") {
            Function LevelSkillGemList($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["AreaLevel", "GemLevel", "Quality", "Corrupted"], $text, ["Gems", "A"]); }

            QuickUI([1.0, "Gems with quality during leveling", "gems-generic;qt4lvl"], "SH", ["Quality", "AreaLevel"]);
            QuickUI([1.0, "Vaal gems during leveling", "gems-generic;levelingvaal"], "SH", ["AreaLevel"]);
            QuickUI([1.0, "First skill gem", "gems-generic;firstzone"], "SH", []);

            QuickUI([1.0, "Gems during leveling", "gems-generic;leveling"], "SH", ["AreaLevel"], "", ["Gems", "AO"]);

            Conditional("?LevelingSkillGemNewTiers") { Show; Class "Gems"; SetBorderColor 0 0 0; SetFontSize 36; }
            ElementAdder_Tier("?LevelingSkillGemNewTiers", "LevelSkillGemList");
        }

        Section("Vaal & Normal Gems", "VaalSparkGem") {
            QuickUI([1.0, "Vaal Gems", "gems-generic;corruptedvaalany"], "SD", ["Quality"], "", ["Gems", "D"]);
            QuickUI([1.0, "Vaal gem deco", "gems-generic;decogemsvaalbgdrop"], "SD");
            QuickUI([1.0, "Gems T3", "gems-generic;any"], "SH", [], "Remaining gems");

            Function SkillGemList($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["GemLevel", "Quality"], $text, ["Gems", "D"]); }
            Conditional("?SkillGemNewTiers") { Show; Class "Gems"; SetBorderColor 0 0 0; SetFontSize 36; }
            ElementAdder_Tier("?SkillGemNewTiers", "SkillGemList");
        }
    }

    Section("Misc. Items", "GoldenKey") {

        Section("Valuable Linked items", "Fusing") {
//            Search S0(0.0, "6 links (height 3)") { Rarity Normal; Class "Body Armours"; SocketGroup "RRGBRR"; }
            Search S4(0.0, "6 links (height 4)") { Rarity Normal; Class "Bows"; SocketGroup "RRGBRR"; }
            QuickUI([0.0, "Top Tier 6 Links", "6l;hightier"], "SH", ["Mirrored", "Corrupted", "ItemLevel", "Rarity"], null, ["gear", "SO"]);
//            QuickUI(S0, "S", ["Corrupted"], "Good 6 links - uncorrupted armors");
            QuickUI(S4, "S", ["Corrupted"], "Other 6 links - corrupted or weapons");
            QuickUI([0.0, "5 linked uniques", "uniques;5link"], "SD");
            QuickUI([0.0, "6 linked uniques", "uniques;ex6link"], "SD");
            QuickUI([0.0, "6 Socket Uniques", "uniques;6s"], "SD");
        }

//        Section("Metamorph Samples", "MetamorphSampleOrganHeart") {
//            Search S2(0.0, "Metamorph Samples", "metamorph;any") { BaseType "Metamorph Heart"; }
//            QuickUI(S2, "SH", ["ItemLevel"]);
//        }

        Section("Unique Exceptions", "Tabula") {
            Search S1("0.0", "Unique Exception: Tabula Rasa") { BaseType "Simple Robe"; SocketGroup "WWWWWW"; Rarity Unique; }
            Search S2("0.0", "Unique Exception: Two Abyss Socket Uniques", "uniques;2xabyss") { BaseType "Steelscale Gauntlets"; SocketGroup "A A"; Rarity Unique; }
            Search S3("0.0", "Unique Exception: Beachhead Pieces") { Rarity Unique; BaseType "Legion Sword Piece"; }

            QuickUI([0.0, "Unique Exception: Kaom's Heart", "uniques;exkaom"], "SH", []);

            QuickUI(S1, "SH", [], "", [], "Because of its always present 6 white, linked sockets, Tabula Rasa is a unique that can always be identified with certainty, even though Thousand Ribbons has the same BaseType.");
            QuickUI(["0.0", "Unique Exception: The Squire", "uniques;exsquire"], "S", [], "", [], "The squire always drops with 3 white sockets and we use that data to identify it!");
            QuickUI(S2, "SD", ["Sockets"], "", ["GearPlusFlasks", "OSA"]);
            QuickUI([0.0, "Unique Exception: 4 White Triad Grip", "uniques;extriadgrip"], "SH", ["Sockets"]);
            QuickUI([0.0, "Unique Exception: Three Abyss Socket Uniques", "uniques;3xabyss"], "SD", ["Sockets"], "", ["GearPlusFlasks", "OSA"], "Specifically detects the Shroud of the lightless unique with 3 abyss sockets that drops very rarely from lich-abyss encounters");
            QuickUI([0.0, "Double corrupted uniques", "uniques;2xcorrupteduniques"], "SD", [], null, ["GearPlusFlasks", "OAS"]);
            QuickUI([0.0, "Uniques with corrupted implicit", "uniques;corrupteduniques"], "SH", ["ItemLevel", "AllGearClasses"]);
            QuickUI(S3, "SH");
            QuickUI([0.0, "Unique Exception: High Level Vinktar", "uniques;highvinktar"], "SD");
            QuickUI([0.0, "Uber Impresence Unique", "uniques;exuberimpresence"], "SD", [], "Double-Curse Impresence", ["GearPlusFlasks", "OAS"], "This rule detects the very rare double-impresence drop that can only happen when fighting the uber-uber-elder. The drop is detected via the influence.");
            QuickUI([0.0, "Unique Exception: Synthesis Rings", "uniques;exsynth"], "SD", ["AllGearClasses"], "Synthesized Rings", ["GearPlusFlasks", "OAS"], "These rings drop from the synthesized memory bosses");
            QuickUI([0.0, "Corrupted Unique Jewels", "uniques;exjewelscorrupted"], "SH", [], "Corruption-Outcome Jewels", ["GearPlusFlasks", "OAS"], "This rule usually detects jewels that turn unique through corruption outcomes. Do note that there is a small chance that a non-corruption specific jewel might get corrupted and displayed via this rule. It's not recommended to hide this rule, especially since some of the corruption outcomes (such as a rain of splinters) can be quite valuable");
            QuickUI([0.0, "Synthesis Jewels", "uniques;exrationaljewel"], "SH", ["AllGearClassesPlusJewel"], "Rational Doctrine Jewel", ["GearPlusFlasks", "OAS"], "This rule detects the synthesised rational doctrine jewel that rarely drops from the uber-cortex encounter.");
            QuickUI([0.0, "Unique Shaper Sword", "uniques;exforgesword"], "SH", [], "Starforge and Voidforge", ["GearPlusFlasks", "OAS"], "These uniques are rare drops from the shaper and uber elder fights. Note that the third sword - the echoforge is not detected by these rules. It's not advised to hide infernal unique swords from filtering.");
            QuickUI([0.0, "Unique with Crucible Tree", "uniques;excrucibleunique"], "SH", [], null, ["GearPlusFlasks", "OAS"]);
        }

        Section("Fishing Rod and Bricked Uniques", "FishingRod") {
            Search S3("0.0", "Fishing Rod") { Class "Fishing Rods"; BaseType "Fishing Rod"; Rarity "Normal"; }
            QuickUI(S3, "SH", [], "", [], ["On the Hook", "YOU'VE BEEN CAPTURED! STUPID EXILE!", "Fishing rods are just incredibly rare. They don't have any secrets or special purposes at all. NeverSink assures that he was not forced to write this message and that the international fishing council of Wraeclast did not impose their supreme will upon him, but merely acted as advisors."]);

            QuickUI([0.0, "Bricked Uniques", "exoticbases;exoticuniquebases"], "SH", ["Rarity", "ItemLevel"], null, ["gear", "OS"]);
        }

        Section("Quest & quest-like items", "GoldenKey") {
            Function QuestList($s, $shd = "SD", $text) { QuickUI($s, $shd, [], $text, ["quest"]); }

            QuickUI([0.0, "Quest Items", "questlikeexception;questitems"], "S", [], "Random Quest Items");
            QuickUI([0.0, "Labyrinth Items", "questlike;labyrinthconsumable"], "S", [], "Labyrinth Items (Keys and Trinkets, NOT Offerings)");
            QuickUI([0.0, "Incursion Item", "questlike;incursionconsumable"], "S", [], "Incursion Stones of Passage");
            QuickUI([0.0, "Heist Target", "heisttarget;any"], "S", [], "Heist Target");
            QuickUI([0.0, "Atlas Voidstones", "artefact->trinkets;any"], "SD", []);

            Conditional("?QuestNewTiers") { Show; Class Quest; SetBorderColor 74 230 58; SetFontSize 45; PlayEffect Green; MinimapIcon 1 Green Hexagon;}
            ElementAdder_Tier("?QuestNewTiers", "QuestList");
        }

        Section("Untiered Items", "StackedDeck")
        {
            Warning("You should never see these items. Either your filter is outdated or there is a problem in your filter.");

            Search S0(1.0, "Untiered Divination Cards", "divination;restex") { }
            Search S0(1.0, "Untiered Currency", "currency;restex") {  }
            Search S0(1.0, "Untiered Uniques", "uniques;restex") { }
            Search S0(1.0, "Untiered Unique maps", "uniques->maps;restex") {  }
            Search S0(1.0, "Untiered Scarabs", "fragments->scarabs;restex") { }
            Search S0(1.0, "Untiered Vials", "vials;restex") { }
            Search S0(1.0, "Untiered Fragments", "fragments;restex") { }
            Search S0(1.0, "Untiered Fossils", "currency->fossil;restex") {  }
            Search S0(1.0, "Untiered Replica Uniques", "uniques->replicas;restex") {  }
            Search S0(1.0, "Untiered Incubators", "currency->incubators;restex") { }
            Search S0(1.0, "Untiered Resonators", "currency->resonator;restex") {  }
            Search S0(1.0, "Untiered Map Items", "maps;restex") {  }
            Search S0(1.0, "Untiered Oils", "currency->oil;restex") { }
            Search S0(1.0, "Untiered Misc Map Items", "miscmapitems;restex") {  }
            Search S0(0.0, "Untiered Tattoos", "currency->trial->tattoo;restex") {  }
            Search S0(0.0, "Untiered Omens", "currency->trial->omen;restex") {  }
            Search S0(1.0, "Untiered Delirium Orbs", "currency->deliriumorbs;restex") {  }
            Search S0(3.0, "Unhandled error items", "anyremaining;restex") {  }
            Search S0(0.0, "Untiered Breachstones", "breachstone;restex") {  }

            QuickUI(S0, "S", [], "Untiered items");
        }

        Section("Misc. Currency", "WisdomScroll") {
            QuickUI([1.0, "Misc. Currency", "currency->others;misc"], "SH");
            QuickUI([1.0, "Untiered Currency B", "currency;untiereditems"], "SHD");
            QuickUI([1.0, "Scroll Fragments", "currency;scrollfragments"], "SH");
        }

        Section("Stacked Divination Cards", "StackedDeck") {
            Function StackedDivCardFunc($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["StackSize"], $text, ["Divination Cards", "OA"]); }

            StackedDivCardFunc([0.0, "Stacked Divination Cards", "divination;exstack"], "SH");

            // new tiers
            Conditional("?StackedDivCardsNewTier") { }
            ElementAdder_Tier("?StackedDivCardsNewTier", "StackedDivCardFunc");
        }
    }

    Section("Heist Follower Equipment", "HeistCrewEquip") {
        Function CrewUI($s, $shd = "SH", $text, $suggestions = "false") { QuickUI($s, $shd, ["Rarity", "ItemLevel", "AreaLevel"], $text, [$suggestions, "DO"]); }

        Function CrewUiNoBase($s, $shd = "SH", $text, $suggestions = "HeistCrewCloaks") { QuickUI($s, $shd, ["Rarity", "ItemLevel", "AreaLevel"], $text); }

        Section("Cloak") {
            Search S0(0.0, "Heist Crew Cloak Equipment T1 Rare") { BaseType "Whisper-woven Cloak"; Rarity Rare; }
            Search S1(0.0, "Heist Crew Cloak Equipment T2 Rare") { BaseType "Hooded Cloak"; Rarity Rare; }
            Search S2(0.0, "Heist Crew Cloak Equipment T3 Rare") { BaseType "Torn Cloak"; Rarity Rare; }
            Search S3(0.0, "Heist Crew Cloak Equipment T1 HighLvl") { BaseType "Whisper-woven Cloak"; Rarity Rare; ItemLevel 86; }

            CrewUI(S3, "SH", "Cloaks T1 HighLvl", "HeistCrewCloaks");
            CrewUI(S0, "SH", "Cloaks T1", "HeistCrewCloaks");
            CrewUI(S1, "SH", "Cloaks T2", "HeistCrewCloaks");
            CrewUiNoBase(S2, "SH", "Cloaks T3 (remaining)", "HeistCrewCloaks");
        }

        Section("Brooch") {
            Search S3(0.0, "Heist Crew Brooch Equipment T1 Rare") { BaseType "Foliate Brooch"; Rarity Rare; }
            Search S4(0.0, "Heist Crew Brooch Equipment T2 Rare") { BaseType "Enamel Brooch"; Rarity Rare; }
            Search S5(0.0, "Heist Crew Brooch Equipment T3 Rare") { BaseType "Silver Brooch"; Rarity Rare; }
            Search S6(0.0, "Heist Crew Brooch Equipment T1 HighLvl") { BaseType "Foliate Brooch"; Rarity Rare; ItemLevel 86; }

            CrewUI(S6, "SH", "Brooches T1 HighLvl", "HeistCrewBrooches");
            CrewUI(S3, "SH", "Brooches T1", "HeistCrewBrooches");
            CrewUI(S4, "SH", "Brooches T2", "HeistCrewBrooches");
            CrewUiNoBase(S5, "SH", "Brooches T3 (remaining)", "HeistCrewBrooches");
        }

        Section("Gear") {
            Search S6(0.0, "Heist Crew Gear Equipment T1 Rare") { BaseType "Burst Band"; Rarity Rare; }
            Search S7(0.0, "Heist Crew Gear Equipment T2 Rare") { BaseType "Aggregator Charm"; Rarity Rare; }
            Search S8(0.0, "Heist Crew Gear Equipment T3 Rare") { BaseType "Focal Stone"; Rarity Rare; }
            Search S9(0.0, "Heist Crew Gear Equipment T1 HighLvl") { BaseType "Burst Band"; Rarity Rare; ItemLevel 86; }

            CrewUI(S9, "SH", "Gear T1 HighLvl", "HeistCrewGear");
            CrewUI(S6, "SH", "Gear T1", "HeistCrewGear");
            CrewUI(S7, "SH", "Gear T2", "HeistCrewGear");
            CrewUiNoBase(S8, "SH", "Gear T3 (remaining)", "HeistCrewGear");
        }

        Section("Tool") {
            Search S9(0.0, "Heist Crew Tool Equipment T1 Rare") { BaseType "Master Lockpick"; Rarity Rare; }
            Search S10(0.0, "Heist Crew Tool Equipment T2 Rare") { BaseType "Fine Lockpick"; Rarity Rare; }
            Search S11(0.0, "Heist Crew Tool Equipment T3 Rare") { BaseType "Crude Ward"; Rarity Rare; }
            Search S12(0.0, "Heist Crew Tool Equipment T1 HighLvl") { BaseType "Master Lockpick"; Rarity Rare; ItemLevel 86; }

            CrewUI(S12, "SH", "Tools T1 HighLvl", "HeistCrewTools");
            CrewUI(S9, "SH", "Tools T1", "HeistCrewTools");
            CrewUI(S10, "SH", "Tools T2", "HeistCrewTools");
            CrewUiNoBase(S11, "SH", "Tools T3 (remaining)", "HeistCrewTools");
        }

        Section("Custom Equipment Rules") {
            Search S0("skip") { BaseType "Whisper-woven Cloak"; Rarity Magic; ItemLevel 86; }

            Function CondShowBase ($s, $shd = "SD", $title) { QuickUI($s, $shd, ["HeistGearClasses", "ItemLevel", "DropLevel", "AreaLevel", "RarityU"], $title, ["HeistCrewEquipment", "SAO"]); }

            Conditional("?CCustomHeistCrewEquipRules", [0]) { Show; SetBorderColor 200 0 0; SetFontSize 38; ItemLevel >= 68; Rarity Rare; }
            ElementAdder_Tier("?CCustomHeistCrewEquipRules", "CondShowBase");
        }
    }

    Section("Optional filter modules", "Animate Weapon") {

        Description("These fairly exotic or build-specific functions are disabled in all filter sub-versions by default. You can use this menu to enable them.");

        Section("Animate weapon mode") {
            Description("This section should only interest Animate Weapon skill-gem users. Please note that if you use Cloak/Spirit Guards, you'll have to activate multiple entries below, not only one. This entry has a lower priority than crafting, chancing, and other valuable normal/magic weapons.");

            QuickUI([0.0, "Animate weapon (normal)", "animatedweapons;normalmelee"], SHD);
            QuickUI([0.0, "Animate weapon (Spirit Guards)", "animatedweapons;normalranged"], SHD);
            QuickUI([0.0, "Animate weapon (Cloak of Tawm'r Isley)", "animatedweapons;magicmelee"], SHD);
            QuickUI([0.0, "Animate weapon (Spirit Guards + Cloak)", "animatedweapons;magicranged"], SHD);
        }
    }
}
