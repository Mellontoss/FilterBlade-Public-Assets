//==================================================================================================
// NeverSink's Filter OptionFile
//==================================================================================================
// AUTHOR:  NeverSink & Zoey
// TYPE:    Default
//===================================================================================================

// Customizer/OptionFile Info
Info_OptionVersion("1.1.4n");
Info_OptionAuthor("NeverSink & Zoey");

//===================================================================================================
// LIVE INTEGRITY TESTS
//===================================================================================================

// Severeness:
// 1 - only used for waypoints
// 2 - only may not be found in the customizer
// 3 - may not be edited
// These are "defensive" searches. They define rules that should never get hit. If we hit those, something is wrong.
DefensiveSearch S10(1, "skip", "hidelayer;final"){ DropLevel 1; ItemLevel 60; Rarity Normal; SocketGroup "R"; };
DefensiveSearch S10(1, "skip", "hidelayer;normalmagicendgame"){ DropLevel 1; ItemLevel 99; Rarity Normal; SocketGroup "R"; };
DefensiveSearch S10(1, "skip", "hidelayer;raresendgame"){ DropLevel 1; ItemLevel 75; Rarity Rare; SocketGroup "R"; };

//===================================================================================================
// VENDOR RECIPES
//===================================================================================================

Chapter() {

    SectionTitle("General");

    Section("Vendor Recipes", "Chromatic") {

        Title("Currency Reward Recipes");

        Description("Disabling recipe item rules will NOT hide uniques, 6links, interesting synthesised items etc. Priorities are handled internally and you don't need to worry about them.");
        Section("Chromatic Orb", "Chromatic") {

            Search S0(1.0, "RGB Chromatic recipe EG small2x2", "endgamergb;rgbsmall1") {}
            Search S1(1.0, "RGB Chromatic recipe EG small1x3", "endgamergb;rgbsmall2") {}
            Search S2(1.0, "RGB Chromatic recipe EG medium", "endgamergb;rgbmedium") {}
            Search S3(1.0, "RGB Chromatic recipe EG large", "endgamergb;rgblarge") {}

            Search S0(1.0, "RGB Chromatic recipe rare small 1", "rr;rgbsmall1") {}
            Search S1(1.0, "RGB Chromatic recipe rare small 2", "rr;rgbsmall2") {}
            Search S2(1.0, "RGB Chromatic recipe rare medium", "rr;rgbmedium") {}
            Search S3(1.0, "RGB Chromatic recipe rare large", "rr;rgblarge") {}

            Title("Endgame Chromatic Recipes");
            Description("1 Chromatic orb - reward for selling an item with a Red-Green-Blue socket group. The 3 colors need to be linked order and other sockets don't matter. Hover over the scroll left for more info.", "'RGB' items", "It's more efficient to pick up small RGB-items. This recipe is mostly useful during the early stages of a league/character progression. Later on the player usually finds enough natural chromatic orbs to sustain their coloring needs, without needing to do recipes.");
            QuickUI(S0, "SH", ["AreaLevel"], "Small Items (2x2)");
            QuickUI(S1, "SH", ["AreaLevel",  "Height"], "Small Items (1x3, 1x4)");
            QuickUI(S2, "SH", ["AreaLevel"], "Medium-sized Items (2x3)");
            QuickUI(S3, "SH", ["AreaLevel"], "Large Items (2x4)");
            Title("Campaign Chromatic Recipes");
            Description("The campaign chromatic recipe can be changed in the 'Campaign -> Colors and Links' section");
        }

        Section("Gemcutter's Prism", "GCP") {
            Description("1 Gemcutter's Prism - reward for selling a single gem with 20% quality gem or multiple gems with a combined total of 40% quality to a vendor.");

            QuickUI([0.0, "Gemcutter recipe high quality gems", "gems-generic;qt2"], "SD", ["Quality", "AreaLevel"], "Max Quality Gems");
            QuickUI([0.0, "Gemcutter recipe mid quality gems", "gems-generic;qt3"], "SD", ["Quality", "AreaLevel"], "Mid Quality Gems");
            QuickUI([0.0, "Gemcutter recipe low quality gems", "gems-generic;qt4"], "SD", ["Quality", "AreaLevel"], "Low Quality Gems");
        }

        Section("Jeweller's Orbs", "Jeweller") {
            Description("7 Jeweller's Orb - reward for selling an item with 6 sockets.");

            QuickUI([0.0, "Jeweller recipe 6 sockets (large)", "socketslinks;6sockets4h"], "SD", ["AreaLevel", "Height"], "6 sockets (large)");
            QuickUI([0.0, "Jeweller recipe 6 sockets", "socketslinks;6sockets"], "SD", ["AreaLevel", "Height"], "6 sockets");
            QuickUI([0.0, "Jeweller recipe 6sock-5links", "socketslinks;5link6sockets"], "SD", ["AreaLevel", "Height"], "6sock-5links");
        }

        Title("Build & Special-Item Recipes");

        Section("Grasping Mail & Loreweave", "BreachRing") {
            Description("Selling a total of 60 Breach Rings together to a vendor will reward you with the Grasping Mail rare item. This item can feature exclusive modifiers, such as the +50% to all defenses. Rerolling the grasping mail will NOT spawn the exclusive mods again.");
            QuickUI([2.0, "Breach Rings High ilvl", "rare->exotic->breachrings;high"], "SH", ["AreaLevel", "ItemLevel"]);
            QuickUI([2.0, "Breach Rings", "rare->exotic->breachrings;any"], "SH", ["AreaLevel", "ItemLevel"]);

            Description("Selling a total of any 60 Unique Rings together to a vendor will reward you with the Loreweave Unique body armour.");
            QuickUI([0.0, "Loreweave Rings", "uniques;recipeuniquerings"], "SD", ["ItemLevel"]);
        }

        Section("+1 Skill Gem Recipes", "SkillGemRed1") {
            Description("By selling a total of 40% quality worth of gems with a specific tag (such as fire) together with a Wand, Sceptre, Rune Dagger or Staff you will be rewarded with a weapon with a +1 GLOBAL level to ALL tagged spell gems. This is a powerful caster weapon early in the endgame.");

            QuickUI([0.0, "+1 Skill Gem Recipe (Cold)", "gems-generic;plusonegemcold"], "SD", ["Quality", "AreaLevel"], "+1 Cold");
            QuickUI([0.0, "+1 Skill Gem Recipe (Fire)", "gems-generic;plusonegemfire"], "SD", ["Quality", "AreaLevel"], "+1 Fire");
            QuickUI([0.0, "+1 Skill Gem Recipe (Lightning)", "gems-generic;plusonegemlight"], "SD", ["Quality", "AreaLevel"], "+1 Lightning");
            QuickUI([0.0, "+1 Skill Gem Recipe (Chaos)", "gems-generic;plusonegemchaos"], "SD", ["Quality", "AreaLevel"], "+1 Chaos");
            QuickUI([0.0, "+1 Skill Gem Recipe (Physical)", "gems-generic;plusonegemphys"], "SD", ["Quality", "AreaLevel"], "+1 Physical");
            QuickUI([0.0, "+1 Skill Gem Recipe (Minion)", "gems-generic;plusonegemminion"], "SD", ["Quality", "AreaLevel"], "+1 Minion");
        }

        Title("Niche and NOT recommended recipes");

        Section("Glassblower's Bauble", "Glassblower") {
            Description("1 Glassblower's Bauble - reward for selling a single 20% quality flask or multiple quality flasks with a total quality of 40%.", "Glassblower Recipe", "It's recommended to at least use the threshold of 14. This allows you to get 1 glassblower per 3 mid quality flasks. Note that glassblowers can also be acquired by buying it for 8 whetstones from vendors and drop naturally, so the recipe is not very efficient. That being said, glassblowers are in high demand at the start of the league, not only for quality, but also to apply instilling orb recipes onto the player flasks.");

            QuickUI([0.0, "Glassblower recipe top quality", "endgameflasks;any20qualflask"], "SD", ["Quality", "AreaLevel", "RarityNM"], "Max quality flasks");
            QuickUI([0.0, "Glassblower recipe mid quality", "endgameflasks;qualityhigh"], "SD", ["Quality", "AreaLevel", "RarityNM"], "Mid Quality flasks");
            QuickUI([0.0, "Glassblower recipe low quality", "endgameflasks;qualitylow"], "SD", ["Quality", "AreaLevel", "RarityNM"], "Low Quality flasks");

            Description("You can find more quality flasks rules in the 'Endgame -> Flasks' and 'Campaign -> Flasks' sections.");
        }

        Section("Cartographer's Chisel", "Chisel") {
            Description("Not recommended as it's considered too slow. A Cartographer's Chisel is the reward for vendoring a 20% quality Gavel, Rock Breaker, or Stone Hammer together with any map.");

            DeepSearch S1(0.0, "Chisel recipe mid quality A", "chiselrecipe;chiselhighqualnormal") { BaseType "Stone Hammer"; Quality 15; Rarity Normal; Corrupted False; }
            DeepSearch S1(0.0, "Chisel recipe mid quality B", "chiselrecipe;chiselhighqualmagic") { BaseType "Stone Hammer"; Quality 18; Rarity Magic; Corrupted False; }
            DeepSearch S2(0.0, "Chisel recipe low quality A", "chiselrecipe;chiselanyqualmagic") { BaseType "Stone Hammer"; Quality 12; Rarity Magic; Corrupted False; }
            DeepSearch S2(0.0, "Chisel recipe low quality B", "chiselrecipe;chiselanyqualnormal") { BaseType "Stone Hammer"; Rarity Normal; Corrupted False; }

            QuickUI([0.0, "Chisel recipe top quality", "chiselrecipe;chisel20"], "SD", ["AreaLevel", "Quality", "Rarity"], "Maximum Quality");
            QuickUI(1, "SD", ["AreaLevel", "Quality", "Rarity"], "Magic Rarity, High Quality");
            QuickUI(0, "SD", ["AreaLevel", "Quality", "Rarity"], "Normal Rarity, High Quality");
            QuickUI(2, "SD", ["AreaLevel", "Quality", "Rarity"], "Magic Rarity, No Quality");
            QuickUI(3, "SD", ["AreaLevel", "Quality", "Rarity"], "Normal Rarity, No Quality");
        }
    }

    //===================================================================================================
    // TIER LISTS
    //===================================================================================================

    Section("Currency - Normal", "Exalted", "E") {

        Title("Main");

        MultiTierThresholdEditor(
            ["Currency God Tier 1", "Currency God Tier 2", "Currency High Tier 1", "Currency High Tier 2", "Currency High Tier 3", "Currency Mid Tier 1", "Currency Mid Tier 2", "Currency Basic Tier 1", "Currency Basic Tier 2", "Currency Basic Tier 3", "Currency Basic Tier 4" ],
            ["Stacked Currency - T1, Huge", "Stacked Currency - T2, Huge", "Stacked Currency - T3, Huge", "Stacked Currency - T4, Huge", "Stacked Currency - T5, Huge", "Stacked Currency - T6, Huge", "Stacked Currency - T7, Huge", "Stacked Currency - T1, Large", "Stacked Currency - T2, Large", "Stacked Currency - T3, Large", "Stacked Currency - T4, Large", "Stacked Currency - T5, Large", "Stacked Currency - T6, Large", "Stacked Currency - T7, Large", "Stacked Currency - High Supply Large", "Stacked Currency - High Supply Medium", "Stacked Currency - High Supply Small", "Stacked Currency - Low Supply Large", "Stacked Currency - Low Supply Medium", "Stacked Currency - Low Supply Small", "Stacked Currency - Portal Large", "Stacked Currency - Portal Medium", "Stacked Currency - Portal Small", "Stacked Currency - Wisdom Large", "Stacked Currency - Wisdom Medium", "Stacked Currency - Wisdom Small"],
            "BaseType",
            "StackSize",
            [],
            [["Currency Basic Tier 1",    "Stacked Currency - High Supply Small", "Stacked Currency - High Supply Large"],
                ["Currency Basic Tier 2", "Stacked Currency - Low Supply Small", "Stacked Currency - Low Supply Large"],
                ["Currency Basic Tier 3", "Stacked Currency - Portal Small", "Stacked Currency - Portal Large"],
                ["Currency Basic Tier 4", "Stacked Currency - Wisdom Small", "Stacked Currency - Wisdom Large"]]);

        Section("General Currency", "Chaos", "E") {
            Function CurrencyList($s, $shd = "SHD", $text) { QuickUI($s, $shd, [], $text, ["normalCurrency", "O"]); }

            TierListToolBar("Currency", [], ["Sacred Crystallised Lifeforce", "Primal Crystallised Lifeforce", "Vivid Crystallised Lifeforce", "Wild Crystallised Lifeforce"]); // ignore lifeforce because it always drops in huge stacks and poeNinja only considers the individual price
            Description("DRAG & DROP items to change the tier. Add new tiers at the bottom or in the toolbar. Hover over the wisdom scroll to receive additional advise for currency management.", "Currency Strategy", "Path of Exile rewards speed. It's an efficient strategy to save time by picking up just the minimum amount of scrolls, scraps, augments and other low currency. You can even completely stop picking them up. Sell transmutation orbs and whetstones for a 1:4 wisdom scroll gain and armorer scraps for 1:2 wisdom scrolls. You can also buy a portal gem to save on portal scrolls. <hr> You can use the 'Stacked Tiering Mode' above to automate behaviour for stacked item drops! <hr> This list is already economy-updated if you're using the SC/HC base filter! <hr> Remember that there are special rules for currency during the campaign and for stacked currency.");

            CurrencyList([3.0, "Currency God Tier 1", "currency;t1exalted"], "S", "S Tier:");
            CurrencyList([3.0, "Currency God Tier 2", "currency;t2divine"], "SH", "A Tier:");
            CurrencyList([3.0, "Currency High Tier 1", "currency;t3annul"], "SH", "B Tier:");
            CurrencyList([3.0, "Currency High Tier 2", "currency;t4chaos"], "SH", "C Tier:");
            CurrencyList([3.0, "Currency High Tier 3", "currency;t5alchemy"], "SH", "D Tier:");
            CurrencyList([3.0, "Currency Mid Tier 1", "currency;t6chrom"], "SH", "E+ Tier:");
            CurrencyList([3.0, "Currency Mid Tier 2", "currency;t7chance"], "SH", "E- Tier:");
            CurrencyList([3.0, "Currency Basic Tier 1", "currency;t8trans"], "SH", "Supplies 1 (Transmutes)");
            CurrencyList([3.0, "Currency Basic Tier 2", "currency;t9armour"], "SH", "Supplies 2 (Armourers)");
            CurrencyList([3.0, "Currency Basic Tier 3", "currency;tportal"], "SH", "Supplies 3 (Portals)");
            CurrencyList([3.0, "Currency Basic Tier 4", "currency;twisdom"], "SH", "Supplies 4 (Wisdoms)");

            Description("Remember that there are special rules for currency during the campaign and for stacked currency.");

            Conditional("?CurrencyNewTiers") { Show; Class Currency; SetTextColor 210 178 135; SetBackgroundColor 0 0 0 255; SetBorderColor 213 159 100 200; SetFontSize 42; }
            ElementAdder_Tier("?CurrencyNewTiers", "CurrencyList");

            Conditional("?CurrencyNewTiersHidden") { }
            ElementAdder_Tier("?CurrencyNewTiersHidden", null, true, "normalCurrency", "OH");
        }

        Title("Stacked Currency Drops (Endgame)");

        Function CurrencyStackList($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["StackSize"], $text, ["Currency", "DO"]); }
        Function CurrencyStackListWithArea($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["StackSize", "AreaLevel"], $text, ["Currency", "DO"]); }

        Section("Large Stacks", "Chaos", "E") {
            Description("These tiers are value based. A single Chaos Orb is in 'C Tier', 3 of them will be in 'B Tier'. Use the 'Custom Stacked Tiering Mode' to auto-Manage this list");
            CurrencyStackList([0.0, "Stacked Currency - T1, Huge", "currency->stackedsix;t1"], "SD", "S Tier (Large Stack)");
            CurrencyStackList([0.0, "Stacked Currency - T2, Huge", "currency->stackedsix;t2"], "SD", "A Tier (Large Stack)");
            CurrencyStackList([0.0, "Stacked Currency - T3, Huge", "currency->stackedsix;t3"], "SD", "B Tier (Large Stack)");
            CurrencyStackList([0.0, "Stacked Currency - T4, Huge", "currency->stackedsix;t4"], "SD", "C Tier (Large Stack)");
            CurrencyStackList([0.0, "Stacked Currency - T5, Huge", "currency->stackedsix;t5"], "SD", "D Tier (Large Stack)");
            CurrencyStackList([0.0, "Stacked Currency - T6, Huge", "currency->stackedsix;t6"], "SD", "E+ Tier (Large Stack)");
            CurrencyStackList([0.0, "Stacked Currency - T7, Huge", "currency->stackedsix;t7"], "SD", "E- Tier (Large Stack)");
        }

        Section("Small Stacks", "GCP", "E") {
            Description("These tiers are value based. A single Chaos Orb is in 'C Tier', 3 of them will be in 'B Tier'. Use the 'Custom Stacked Tiering Mode' to auto-Manage this list");
            CurrencyStackList([0.0, "Stacked Currency - T1, Large", "currency->stackedthree;t1"], "SD", "S Tier (Small Stack)");
            CurrencyStackList([0.0, "Stacked Currency - T2, Large", "currency->stackedthree;t2"], "SD", "A Tier (Small Stack)");
            CurrencyStackList([0.0, "Stacked Currency - T3, Large", "currency->stackedthree;t3"], "SD", "B Tier (Small Stack)");
            CurrencyStackList([0.0, "Stacked Currency - T4, Large", "currency->stackedthree;t4"], "SD", "C Tier (Small Stack)");
            CurrencyStackList([0.0, "Stacked Currency - T5, Large", "currency->stackedthree;t5"], "SD", "D Tier (Small Stack)");
            CurrencyStackList([0.0, "Stacked Currency - T6, Large", "currency->stackedthree;t6"], "SD", "E+ Tier (Small Stack)");
            CurrencyStackList([0.0, "Stacked Currency - T7, Large", "currency->stackedthree;t7"], "SD", "E- Tier (Small Stack)");
        }

        Section("Stacked Supplies: Transmutes, Armourer+", "Transmut") {
            Title("Higher Supplies: Transmutes, Whetstones");
            CurrencyStackListWithArea([0.0, "Stacked Currency - High Supply Large", "currency->stackedsupplieshigh;t1"], "SD", "Higher Supplies: 10+ Stack");
            CurrencyStackListWithArea([0.0, "Stacked Currency - High Supply Medium", "currency->stackedsupplieshigh;t2"], "SD", "Higher Supplies: 5+ Stack");
            CurrencyStackListWithArea([0.0, "Stacked Currency - High Supply Small", "currency->stackedsupplieshigh;t3"], "SD", "Higher Supplies: 3+ Stack");
            Title("Lower Supplies: Armourers, Augments");
            CurrencyStackListWithArea([0.0, "Stacked Currency - Low Supply Large", "currency->stackedsupplieslow;t1"], "SD", "Lower Supplies: 10+ Stack");
            CurrencyStackListWithArea([0.0, "Stacked Currency - Low Supply Medium", "currency->stackedsupplieslow;t2"], "SD", "Lower Supplies: 5+ Stack");
            CurrencyStackListWithArea([0.0, "Stacked Currency - Low Supply Small", "currency->stackedsupplieslow;t3"], "SD", "Lower Supplies: 3+ Stack");
        }

        Section("Stacked Supplies: Wisdoms&Portals", "PortalScroll") {
            Title("Portal Scrolls");
            CurrencyStackListWithArea([0.0, "Stacked Currency - Portal Large", "currency->stackedsuppliesportal;t1"], "SD", "Portal Scrolls: 10+ Stack");
            CurrencyStackListWithArea([0.0, "Stacked Currency - Portal Medium", "currency->stackedsuppliesportal;t2"], "SD", "Portal Scrolls: 5+ Stack");
            CurrencyStackListWithArea([0.0, "Stacked Currency - Portal Small", "currency->stackedsuppliesportal;t3"], "SD", "Portal Scrolls: 3+ Stack");
            Title("Wisdom Scrolls");
            CurrencyStackListWithArea([0.0, "Stacked Currency - Wisdom Large", "currency->stackedsupplieswisdom;t1"], "SD", "Wisdom Scrolls: 10+ Stack");
            CurrencyStackListWithArea([0.0, "Stacked Currency - Wisdom Medium", "currency->stackedsupplieswisdom;t2"], "SD", "Wisdom Scrolls: 5+ Stack");
            CurrencyStackListWithArea([0.0, "Stacked Currency - Wisdom Small", "currency->stackedsupplieswisdom;t3"], "SD", "Wisdom Scrolls: 3+ Stack");
        }

        Title("Currency Drops during the Campaign");

        Section("Campaign Specific - General", "Regret") {
            Function LevelingStackList($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["AreaLevel"], $text, ["Currency", "DO"]); }

            Description("Supplies and specific currencies are much more important during the campaign.");
            LevelingStackList([0.0, "Currency during leveling 0", "currency->leveling;binding"], "SH", "Campaign: Binding Orbs");
            QuickUI([0.0, "Essences while leveling", "currency->leveling;essences"], "SH", ["AreaLevel"], "Campaign: Essences", ["essences"]);
            LevelingStackList([0.0, "Currency during leveling 5", "currency->leveling;chance"], "SH", "Campaign: Chance+");
            LevelingStackList([0.0, "Currency during leveling 1", "currency->leveling;trans"], "SH", "Campaign: Transmutes+");
            LevelingStackList([0.0, "Currency during leveling 2", "currency->leveling;aug"], "SH", "Campaign: Armourers+");
            LevelingStackList([0.0, "Currency during leveling 3", "currency->leveling;portal"], "SH", "Campaign: Portals");
            LevelingStackList([0.0, "Currency during leveling 4", "currency->leveling;wisdom"], "SH", "Campaign: Wisdoms");

            Conditional("?CurrencyLevelingNewTiers") { Show; Class Currency; AreaLevel < 65; SetTextColor 210 178 135; SetBackgroundColor 0 0 0 255; SetBorderColor 213 159 100 200; SetFontSize 42; }
            ElementAdder_Tier("?CurrencyLevelingNewTiers", "LevelingStackList");
        }

        Section("Campaign Specific - Stacked Drops", "Transmut") {
            Function CurrencyLevelingStackList($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["StackSize", "AreaLevel"], $text, ["Currency", "DO"]); }

            CurrencyLevelingStackList([0.0, "Stacked Campaign Chance", "currency->levelingstacked;chance"], "SD", "Campaign: Stacked Chance Orbs+");
            CurrencyLevelingStackList([0.0, "Stacked Campaign Transmutations", "currency->levelingstacked;trans"], "SD", "Campaign: Stacked Transmutes+");
            CurrencyLevelingStackList([0.0, "Stacked Campaign Augmentations", "currency->levelingstacked;aug"], "SD", "Campaign: Stacked Augments+");
            CurrencyLevelingStackList([0.0, "Stacked Campaign Portal Scrolls", "currency->levelingstacked;portal"], "SD", "Campaign: Stacked Portals");
            CurrencyLevelingStackList([0.0, "Stacked Campaign Wisdom Scrolls", "currency->levelingstacked;wisdom"], "SD", "Campaign: Stacked Wisdoms");

            Conditional("?CurrencyLevelingStacksNewTiers") {  }
            ElementAdder_Tier("?CurrencyLevelingStacksNewTiers", "CurrencyLevelingStackList");
        }

        Title("Custom");

        Section("Add Custom Currency Rules", "Firefly") {
            Description("For all your special AreaLevel & StackSize Currency needs!"");

            Conditional("?CurrencyStackNewTiers", ["c9.currency.stacked.all"], "notSimpleBuilder") { Show; Class Currency; StackSize >= 3; SetTextColor 210 178 135; SetBackgroundColor 0 0 0 255; SetBorderColor 213 159 100 200; SetFontSize 42; }
            ElementAdder_Tier("?CurrencyStackNewTiers", "CurrencyStackListWithArea");
        }
    }

    Section("Currency - Special", "Essence", "E") {

        Title("Crafting");

        Section("Essences", "Essence") {
            Search S0(0.0, "Essences T1+2", "currency->essence;t1") { BaseType "Essence of Hysteria"; }

            Conditional("?EssenceHighlight", ["c9.currency.essences.all"]) { Show; Class Currency; SetFontSize 40; PlayAlertSound 2 300; SetBorderColor 0 0 0; SetTextColor 0 0 0; SetBackgroundColor 180 0 230; }
            QuickUI("?EssenceHighlight", "SDH", ["EssenceTypes"], "Highlight Essences by type:");

            QuickUI(S0, "SH", ["AreaLevel"], "LVL7: Defeaning and Exotics", ["essences"]);
            QuickUI([0.0, "Essences T3", "currency->essence;t2"], "SH", ["AreaLevel"], "LVL6: Shrieking and Remnants", ["essences"]);
            QuickUI([0.0, "Essences T4", "currency->essence;t3"], "SH", ["AreaLevel"], "LVL5: Screaming", ["essences"]);
            QuickUI([0.0, "Essences T5", "currency->essence;t4"], "SH", ["AreaLevel"], "LVL4: Wailing", ["essences"]);
            QuickUI([0.0, "Essences T6", "currency->essence;t5"], "SH", ["AreaLevel"], "LVL3: Weeping", ["essences"]);
            QuickUI([0.0, "Essences T7", "currency->essence;t6"], "SH", ["AreaLevel"], "LVL1+2: Muttering&Whispering", ["essences"]);

            QuickUI([0.0, "Remaining essences", "currency->essence;exhide"], "SH", [], "", [], "Remaining essences that were not caught be the rules above due to possible AreaLevel requirements.");
        }

        Section("Delve Resonators", "DelveResonator", "E") {
            Function ResonatorTierFunc($s, $shd = "SHD", $text) { QuickUI($s, $shd, [], $text, ["Resonators", "O"]); }

            TierListToolBar("Resonator", [], []);

            ResonatorTierFunc([0.0, "Delve Socketable Currency Resonators T1", "currency->resonator;t1"], "SH", "A Tier");
            ResonatorTierFunc([0.0, "Delve Socketable Currency Resonators T2", "currency->resonator;t2"], "SH", "B+C Tiers");
            ResonatorTierFunc([0.0, "Delve Socketable Currency Resonators T3", "currency->resonator;t3"], "SH", "D Tier");

            // new tiers
            Conditional("?DelveResonatorNewTier") { Show; Class "Delve Stackable Socketable Currency"; SetTextColor 0 0 0 255; SetBackgroundColor 210 178 135; SetBorderColor 0 0 0 255; SetFontSize 45; PlayAlertSound 2 300; } // removed Class "Delve Stackable Socketable Currency"
            ElementAdder_Tier("?DelveResonatorNewTier", "ResonatorTierFunc");

            Conditional("?ResonatorNewTiersHidden") { }
            ElementAdder_Tier("?ResonatorNewTiersHidden", null, true, "Resonators", "OH");
        }

        Section("Delve Fossils", "DelveFossil", "E") {
            Function FossilTierFunc($s, $shd = "SHD", $text) { QuickUI($s, $shd, [], $text, ["Fossils", "O"]); }

            TierListToolBar("Fossil", [], []);

            FossilTierFunc([0.0, "Delve Currency Fossils T1", "currency->fossil;t1"], "SH", "S Tier");
            FossilTierFunc([0.0, "Delve Currency Fossils T2", "currency->fossil;t2"], "SH", "A Tier");
            FossilTierFunc([0.0, "Delve Currency Fossils T3", "currency->fossil;t3"], "SH", "B Tier");
            FossilTierFunc([0.0, "Delve Currency Fossils T4", "currency->fossil;t4"], "SH", "Others");

            // new tiers
            Conditional("?DelveFossilsNewTier") { }
            ElementAdder_Tier("?DelveFossilsNewTier", "FossilTierFunc");

            Conditional("?FossilNewTiersHidden") { }
            ElementAdder_Tier("?FossilNewTiersHidden", null, true, "Fossils", "OH");
        }

        Section("Delirium Orbs", "Delirium Orb", "E") {
            TierListToolBar("DeliriumOrb", [], []);

            Function DeliriumOrbTierList($s, $shd = "SHD", $text) { QuickUI($s, $shd, [], $text, ["DeliriumOrbs", "O"]); }

            DeliriumOrbTierList([0.0, "Delirium Orbs Tier 1", "currency->deliriumorbs;t1"], "SH", "S Tier");
            QuickUI([0.0, "Delirium Orbs Tier 2", "currency->deliriumorbs;t2"], "SH", [], "A Tier", ["DeliriumOrbs", "O"]);
            QuickUI([0.0, "Delirium Orbs Tier 3", "currency->deliriumorbs;t3"], "SH", [], "Others", ["DeliriumOrbs", "O"]);

            Conditional("?DeliriumOrbNewTier") { }
            ElementAdder_Tier("?DeliriumOrbNewTier", "DeliriumOrbTierList");

            Conditional("?DeliriumOrbNewTiersHidden") { }
            ElementAdder_Tier("?DeliriumOrbNewTiersHidden", null, true, "DeliriumOrbs", "OH");
        }

        Section("Blight Oils", "BlightOil", "E") {
            Function OilTierList($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["AreaLevel", "StackSize"], $text, ["BlightOils", "O"]); }

            TierListToolBar("Oil", [], []);

            OilTierList([0.0, "Blight Oils T1", "currency->oil;t1"], "SH", "S Tier");
            OilTierList([0.0, "Blight Oils T2", "currency->oil;t2"], "SH", "A Tier");
            OilTierList([0.0, "Blight Oils T3", "currency->oil;t3"], "SH", "B Tier");
            OilTierList([0.0, "Blight Oils T4", "currency->oil;t4"], "SH", "C Tier");
            OilTierList([0.0, "Blight Oils T5", "currency->oil;t5"], "SH", "Others");
            QuickUI([0.0, "Remaining Oils", "currency->oil;exhide"], "SH", [], "", false, "Untiered oils, which are not matched by any of the above rules, probably due to unmet AreaLevel requirements.");

            Conditional("?BlightOilNewTier") { Show; Class Currency; SetTextColor 210 178 135; SetBackgroundColor 0 0 0 255; SetBorderColor 213 159 100 200; SetFontSize 42; }
            ElementAdder_Tier("?BlightOilNewTier", "OilTierList");

            Conditional("?BlightOilNewTiersHidden") { }
            ElementAdder_Tier("?BlightOilNewTiersHidden", null, true, "BlightOils", "OH");
        }

        Title("Misc.");

        Section("Heist Rogue's Markers", "HeistCoin") {
            Function CustomCoinFunc($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["StackSize", "AreaLevel"]); }

            Search S1(0.1, "Rogue's Marker (Heist Coins)") { BaseType "Rogue's Marker"; }
            QuickUI([0.0, "Rogue's Marker (Heist Coins) Stack", "currency->heist;highstack"], "SH", ["StackSize", "AreaLevel"], "Large Stacks");
            QuickUI(S1, "SH", ["StackSize", "AreaLevel"], "Others", "");
            QuickUI([0.0, "Remaining Rogue Markers", "currency->heist;exhide"], "SH", [], "", [], "Remaining coins that were not caught due to potential Stack/Area requirements of the rules above.");

            // new tiers
            Conditional("?HeistCustomCoins") { Show; BaseType == "Rogue's Marker"; StackSize > 250; SetTextColor 0 0 0 255; SetBackgroundColor 255 178 135 255; SetBorderColor 0 0 0 255; SetFontSize 45; }
            ElementAdder_Tier("?HeistCustomCoins", "CustomCoinFunc");
        }

        Section("Incubators", "Incubator", "E") {
            Function IncubatorTierList($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["ItemLevel"], $text, ["Incubators", "O"]); }

            TierListToolBar("Incubator", [], []);

            IncubatorTierList([0.0, "Incubators T0", "currency->incubators;t2"], "SH", "A Tier");
            IncubatorTierList([0.0, "Incubators T1.5", "currency->incubators;t3"], "SH", "B Tier");
            IncubatorTierList([0.0, "Incubators T1", "currency->incubators;t4"], "SH", "C Tier");
            IncubatorTierList([0.0, "Incubators T4", "currency->incubators;t5"], "SH", "Others");

            Conditional("?IncubatorNewTiersHidden") { }
            ElementAdder_Tier("?IncubatorNewTiersHidden", null, true, "Incubators", "OH");
            Conditional("?LegionIncubatorsNewTier", ["c9.currency.incubators.all"], "notSimpleBuilder") { Show; Class Incubator; SetTextColor 210 178 135; SetBackgroundColor 0 0 0 255; SetBorderColor 213 159 100 200; SetFontSize 42; }
            ElementAdder_Tier("?LegionIncubatorsNewTier", "IncubatorILvlTierList");


            Divider();

            // high level
            Function IncubatorILvlTierList($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["Incubators", "ItemLevel"], $text); }
            Search SS(0.0, "High Level Incubators", "currency->incubators;leveledex") { BaseType "Thaumaturge's Incubator"; ItemLevel 85; }
            IncubatorILvlTierList(SS, "SD", "High Level Incubators");

            QuickUI([0.0, "Remaining Incubators", "currency->incubators;exhide"], "SH", [], "", [], "Remaining Incubators, which are not matched by any of the above rules, probably due to unmet ItemLevel requirements.");
        }

        Section("Incursion Vials", "IncursionVial", "E") {
            TierListToolBar();
            QuickUI([0.0, "Incursion Vials T1", "vials;t1"], "SH", [], "S Tier", ["IncursionVials", "O"]);
            QuickUI([0.0, "Incursion Vials T2", "vials;t2"], "SH", [], "A Tier", ["IncursionVials", "O"]);
            QuickUI([0.0, "Incursion Vials T3", "vials;t3"], "SH", [], "Others", ["IncursionVials", "O"]);

            // new vial tiers
            Function VialTierList($s, $shd = "SHD", $text) { QuickUI($s, $shd, [], $text, ["IncursionVials", "O"]); }
            Conditional("?IncVialNewTier") { Show; Class Currency; SetTextColor 0 0 0 255; SetBackgroundColor 159 15 213 255; SetBorderColor 0 0 0 255; SetFontSize 45; PlayAlertSound 2 300; }
            ElementAdder_Tier("?IncVialNewTier", "VialTierList");

            Conditional("?VialNewTiersHidden") { }
            ElementAdder_Tier("?VialNewTiersHidden", null, true, "IncursionVials", "OH");
        }

//        Section("Hinekora's Lock", "HinekorasLock") {
//            // crafting prediction items thingy
//            QuickUI([0.0, "Hinekora's Lock", "currency->trial->orblike;t1"], "S", [], null, null, "Hinekor's lock is a valuable reward from the trial. Once applied on an item, you'll foresee the outcome of currency items used on the same item - until you'll actually use one of them.");
//        }

        Section("Omens", "OmenoftheSoulDevourer", "E") {
            Function OmenFunc($s, $shd = "SHD", $title) { QuickUI($s, $shd, [], $title, ["AncTrialOmens", "O"]); }

            TierListToolBar();

            Description("Omens automatically trigger upon a certain condition when placed in your inventory. The omen is then consumed.");
            OmenFunc([0.0, "Omens Tier 1", "currency->trial->omen;t1"], "SH", "S Tier");
            OmenFunc([0.0, "Omens Tier 2", "currency->trial->omen;t2"], "SH", "A Tier");
            OmenFunc([0.0, "Omens Tier 3", "currency->trial->omen;t3"], "SH", "B Tier");
            OmenFunc([0.0, "Omens Tier 4", "currency->trial->omen;t4"], "SH", "Others");

            // new tiers
            Conditional("?AncTrialOmensNewTier") { }
            ElementAdder_Tier("?AncTrialOmensNewTier", "OmenFunc");

            // hide tier
            Conditional("?AncTrialOmensHidden") { }
            ElementAdder_Tier("?AncTrialOmensHidden", null, true, "AncTrialOmens", "OH");
        }

        Section("Tattoos", "HonouredTattoooftheWiseMan", "E") {
            Function TattooFunc($s, $shd = "SHD", $title) { QuickUI($s, $shd, [], $title, ["AncTrialTattoos", "O"]); }

            TierListToolBar();

            Description("Tattoos are rewards from the trials - these are applied to your skill tree and replace stat-granting nodes with other effects!");
            TattooFunc([0.0, "Tattoos Tier 1", "currency->trial->tattoo;t1"], "SH", "S Tier");
            TattooFunc([0.0, "Tattoos Tier 2", "currency->trial->tattoo;t2"], "SH", "A Tier");
            TattooFunc([0.0, "Tattoos Tier 3", "currency->trial->tattoo;t3"], "SH", "B Tier");
            TattooFunc([0.0, "Tattoos Tier 4", "currency->trial->tattoo;t4"], "SH", "Others");

            // new tiers
            Conditional("?AncTrialTattooTier") { }
            ElementAdder_Tier("?AncTrialTattooTier", "TattooFunc");

            // hide tier
            Conditional("?AncTrialTattooHidden") { }
            ElementAdder_Tier("?AncTrialTattooHidden", null, true, "AncTrialTattoos", "OH");
        }
    }

    Section("Unique items", "Unique", "E") {
        Function UniqueList($s, $shd = "SHD", $text, $descr = false) { QuickUI($s, $shd, [], $text, ["GearPlusFlasks", "O"], $descr); }

                // important: the first search we ever reference (NOT declare) here is what determines the position of the hide-rule and new tiers.
                // we want (especially the hide-rule) to be low, so that corrupted uniques, 6 sockets, etc. are still shown, and only the regular normal unique is hidden
                // because of that, we HAVE TO list S10 (boss-drop uniques) first in the exceptionEntries, because that way it's the first referenced entry
                TierListToolBar("Uniques", [S10, S2, SMulti, S7, S8, S11], ["Ruby Flask"]);

                // we meed to keep these searches defined to reference them in the ecoLoader (auto-sort-excluded entries)
                Search S0(8.1, "Uniques Tier 1", "uniques;t1") { Rarity Unique; BaseType "Glorious Plate"; }
                Search S1(8.1, "Uniques Tier 2", "uniques;t2") { Rarity Unique; BaseType "Rotfeather Talisman"; }
                Search S2(8.1, "Uniques (MultiBase)", "uniques;multispecial") { Rarity Unique; BaseType "Gold Amulet"; }
                Search SMulti(8.1, "Uniques (MultiBaseHigh)", "uniques;multispecialhigh") { Rarity Unique; BaseType "Leather Belt"; }
                Search S3(8.1, "Uniques (Remaining)", "uniques;t3") { Rarity Unique; BaseType "Vaal Axe"; }
                Search S6(8.1, "Uniques (Hideable trash)", "uniques;hideable") { Rarity Unique; BaseType "Bone Armour"; }
                Search S7(8.1, "Uniques (early league)", "uniques;earlyleague") { Rarity Unique; BaseType "Deerskin Gloves"; }
                Search S8(8.1, "Unique Jewels", "uniques;exjewels") { Rarity Unique; BaseType "Crimson Jewel"; }
                Search S10(8.1, "Boss-Drop Uniques", "uniques;t3boss") { Rarity Unique; BaseType "Agate Amulet"; }
                Search S11(8.1, "Uniques (Hideable 2)", "uniques;hideable2") { Rarity Unique; BaseType "Iron Hat"; }
        //        Search S12(8.1, "Uniques (fated boss drop)", "uniques;fatedbossdrop") {  }

                Title("Predictable Tiers");
                UniqueList(S0, "S", "S Tier", "Tier 1 uniques are always an expensive and lucky find!");
                UniqueList(S1, "SH", "A Tier", "Tier 2 uniques are always fairly expensive, but can be even more valuable with some lucky rolls");
                UniqueList(S8, "S", "A tier - Jewels", "The filter can't disintinguish between expensive and cheap unique jewels. All of them are treated the same way!");

        //        UniqueList(S12, "SH", "Fated Boss Drop Uniques:", "These can only drop from Atlas Map Bosses. You got to check those yourself because they look the same as a normal unique.");
                UniqueList(S3, "SH", "B+C Tier", "These are highly roll dependent. Keep your filter updated, especially if you want to hide this section!");
                UniqueList(S7, "SDH", "D Tier - Early league Uniques:", "Expensive or interesting at the start of the new league, but lose value VERY fast! This tier stays empty, after the first days of the new league");
                UniqueList(S11, "SH", "D Tier - Low Value+NonDrops:", "These uniques have an expensive version that is ONLY obtained through special means, such as vendor recipes.");
                UniqueList(S6, "SH", "D Tier - Low Value:", "These uniques are worth very little. Keep your filter updated, if you want to hide this section! Hiding this section at the start of new leagues and in SSF is a bad idea.");

                Title("High Variety Tiers");

                UniqueList(SMulti, "S", "High Variety - Top Multi-Bases:", "Multiple uniques share the same base: very valuable uniques AND cheap uniques. The filter can't say which one dropped. Always check these! There's a VERY small chance for these to be VERY expensive");
                UniqueList(S2, "SH", "High Variety - Multi-Bases:", "Multiple uniques share the same base: very valuable uniques AND cheap uniques. The filter can't say which one dropped. Always check these! There's a small chance for these to be expensive");
                UniqueList(S10, "SH", "High Variety - Boss-Drops:", "A potentially expensive unique version of this item drops ONLY from bosses! The world drop unique is fairly cheap! You can hide this tier, BUT remember to check the hidden items dropped by bosses!");

                Conditional("?UniqueNewTiers") { Show; Rarity Unique; SetTextColor 175 96 37 255; SetBackgroundColor 0 0 0 255; SetBorderColor 175 96 37 255; SetFontSize 42; PlayAlertSound 3 300; }
                ElementAdder_Tier("?UniqueNewTiers", "UniqueList");

                Conditional("?UniquesNewTiersHidden") { }
                ElementAdder_Tier("?UniquesNewTiersHidden", null, true, "GearPlusFlasks", "OH");
    }

    Section("Divination Cards", "StackedDeck", "E") {
        Section("Divination Card Tierlist", "StackedDeck", "E"){
        Function DivCardList($s, $shd = "SHD", $text) { QuickUI($s, $shd, [], $text, ["Divination Cards", "O"]); }

        TierListToolBar("DivinationCard", [S5, S6], []);

        Search S0(5.1, "Divination Cards T1", "divination;t1") { BaseType "House of Mirrors"; }
        Search S1(5.1, "Divination Cards T2", "divination;t2") { BaseType "The Hoarder"; }
        Search S2(5.1, "Divination Cards T3", "divination;t3") { BaseType "The Dapper Prodigy"; }
        Search S3(5.1, "Divination Cards T4", "divination;t4") { Class "Divination Cards"; }
        Search S4(5.1, "Divination Cards T5", "divination;t5") { BaseType "The Carrion Crow"; }
        Search S5(5.1, "Divination Cards T5C", "divination;t5c") { BaseType "Rain of Chaos"; }
        Search S6(5.1, "Divination Cards T4C", "divination;t4c") { BaseType "Emperor's Luck"; }
        Search S7(5.1, "Divination Cards New", "divination;tnew") { BaseType "The Tumbleweed"; }

        DivCardList(0, "S", "S Tier");
        DivCardList(1, "SH", "A Tier");
        DivCardList(2, "SH", "B Tier");
        DivCardList(6, "SH", "C+D Tier (Currency Rewards)");
        DivCardList(3, "SH", "C+D Tier");
        DivCardList(5, "SH", "E Tier (Currency Rewards):");
        DivCardList(4, "SH", "E+F Tier");
        DivCardList(S7, "SDH", "Tier X - New, Unknown cards:");

        Conditional("?DivCardsNewTiers") { Show; Class "Divination"; SetTextColor 0 0 0 255; SetBackgroundColor 145 215 230 225; SetBorderColor 0 100 150 255; SetFontSize 40; PlayAlertSound 2 300; }
        ElementAdder_Tier("?DivCardsNewTiers", "DivCardList");

        Conditional("?DivCardsNewTiersHidden") { }
        ElementAdder_Tier("?DivCardsNewTiersHidden", null, true, "Divination Cards","OH");
        }

        Section("Exotics: Stacked Card Drops", "StackedDeck") {

        Description("Card added here will receive a higher highlight if dropped in a stack!");
            QuickUI([0.0, "Stacked High Tier Div Cards", "divination;excustomstack"], $shd, ["StackSize"], null, ["Divination Cards", "OS"]);

            Function StackedDivCardFunc($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["StackSize"], $text, ["Divination Cards", "OA"]); }

            Description("Designed to highlight T4 and T5 divination cards if they drop in a stack. Useful, if you want to see the cards only if they're stacked.");
            StackedDivCardFunc([0.0, "Stacked Divination Cards", "divination;exstack"], "SH", "Stacked Low Tier Div Cards");
            // new tiers
            Conditional("?StackedDivCardsNewTier") { }
            ElementAdder_Tier("?StackedDivCardsNewTier", "StackedDivCardFunc");
        }
    }

//===================================================================================================
// CURRENT LEAGUE
//===================================================================================================

    Section("Current League: Settlers of Kalguur", "SettlersSunRune") {

        Section("Gold") {
            Description("Gold is auto-picked-up! You will even pick up the gold if the rules are disabled.");
            QuickUI([0.0, "Settlers Gold - Huge Stack", "gold;stack3"], "SH", ["StackSize", "AreaLevel"], "Goldpile: Massive");
            QuickUI([0.0, "Settlers Gold - Medium Stack", "gold;stack2"], "SH", ["StackSize", "AreaLevel"], "Goldpile: Huge");
            QuickUI([0.0, "Settlers Gold - Small Stack", "gold;stack1"], "SH", ["StackSize", "AreaLevel"], "Goldpile: Large");
            QuickUI([0.0, "Settlers Gold - Tiny Stack", "gold;stacklvl1"], "SH", ["StackSize", "AreaLevel"], "Goldpile: Large (leveling only)");
            QuickUI([0.0, "Settlers Gold - No Stack", "gold;anyother"], "SH", ["StackSize", "AreaLevel"], "Goldpile: Any");
        }

        Section("Runes") {
            // generated via manualUtil_GenerateOptFileTierListCode(); util function!
            Function SettlerRunesFunc($s, $shd = "SHD", $text) { QuickUI($s, $shd, [], $text, ["B: Rune;C:Stackable Currency", "O"]); }
            TierListToolBar();

            SettlerRunesFunc([0.0, "Settlers Runes Tier 1", "runes;t1"], "SH", "S Tier");
            SettlerRunesFunc([0.0, "Settlers Runes Tier 2", "runes;t2"], "SH", "A Tier");
            SettlerRunesFunc([0.0, "Settlers Runes Tier 3", "runes;t3"], "SH", "B Tier");
            SettlerRunesFunc([0.0, "Settlers Runes Tier 4", "runes;t4"], "SH", "C Tier");
            SettlerRunesFunc([0.0, "Settlers Runes Tier 5", "runes;t5"], "SH", "D Tier");

            // new tiers
            Conditional("?SettlerRunesNewTier") { }
            ElementAdder_Tier("?SettlerRunesNewTier", "SettlerRunesFunc");

            // hide tier
            Conditional("?SettlerRunesNewTiersHidden") { }
            ElementAdder_Tier("?SettlerRunesNewTiersHidden", null, true, "B: Rune;C:Stackable Currency", "OH");
        }

        Section("Tinctures") {
            QuickUI([0.0, "High Quality & ItemLevel Tinctures", "endgametinctures;overqual1"], "SH", ["Rarity", "ItemLevel", "Quality", "Tinctures"]);
            QuickUI([0.0, "Quality & High ItemLevel Tinctures", "endgametinctures;overqual2"], "SH", ["Rarity", "ItemLevel", "Quality", "Tinctures"]);
            QuickUI([0.0, "High ItemLevel Tinctures", "endgametinctures;tinc82"], "SH", ["Rarity", "ItemLevel", "Quality", "Tinctures"]);
            QuickUI([0.0, "Remaining Endgame Tinctures", "endgametinctures;any"], "SH", ["Rarity", "ItemLevel", "Quality", "Tinctures"]);
            QuickUI([0.0, "Tinctures during campaign", "leveling->tincture;any"], "SH", ["Rarity", "ItemLevel", "Quality", "Tinctures"]);
        }

        Section("Corpses") {
            // generated via manualUtil_GenerateOptFileTierListCode(); util function!
            Function CorpsesFunc($s, $shd = "SHD", $text) { QuickUI($s, $shd, [], $text, ["C:Corpses", "O"]); }
            TierListToolBar();

            CorpsesFunc([0.0, "Corpses Tier 1", "corpses;t1"], "SH", "S Tier");
            CorpsesFunc([0.0, "Corpses Tier 2", "corpses;t2"], "SH", "A Tier");
            CorpsesFunc([0.0, "Corpses Tier 3", "corpses;t3"], "SH", "B Tier");
            CorpsesFunc([0.0, "Corpses Tier 4", "corpses;t4"], "SH", "C Tier");
            CorpsesFunc([0.0, "Corpses Tier 5", "corpses;t5"], "SH", "D Tier");

            // new tiers
            Conditional("?CorpsesNewTier") { }
            ElementAdder_Tier("?CorpsesNewTier", "CorpsesFunc");

            // hide tier
            Conditional("?CorpsesNewTiersHidden") { }
            ElementAdder_Tier("?CorpsesNewTiersHidden", null, true, "C:Corpses", "OH");
        }

        Section("New Bases, Chisels, Mist") {
            Description("These new items have been integrated into existing tierlists.");
        }
    }

    Section("Highlight specific bases", "Firefly") {

        Description("Quickly highlight bases by adding a custom rule! If you need more power and options, there's a lot more custom rules lower in the customizer");

        Function CondShowBaseQuick ($s, $shd = "SD", $title)
        {
            QuickUI($s, $shd, ["RarityU", "ItemLevel", "Corrupted", "Stats_All"], $title, ["rarityItems", "OS"]);
        }

        Conditional("?CQuickEndgameCustomRule1", ["c3.gear.crafting-decorators"]) { Show; BaseType == "Imbued Wand"; SetBorderColor 200 0 0; SetBackgroundColor 60 0 0; SetFontSize 40; ItemLevel >= 68; Rarity Normal; Corrupted False; Mirrored False; }
        ElementAdder_Tier("?CQuickEndgameCustomRule1", "CondShowBaseQuick");
    }
}

//===================================================================================================
// MAPS
//===================================================================================================
Chapter() {
    SectionTitle("Maps, Fragments and Map-like Items");

    Section("Maps - Highlight and Hide", "Firefly") {

        Section("Highlight & Hide based on Map Properties", "Map") {
            Description("This does NOT affect shaped, elder, guardian, unique and other special maps.");

            Conditional("?HideALLMapsByTier", ["c9.maps.generic.t16"]) { Hide; Class Maps; HasInfluence None; MapTier < 8; }
            QuickUI([0.0, "Hide corrupted non-rare maps", "maphiders;corruptedmaphider"], "HD", ["Rarity", "MapTier"]);
            QuickUI([0.0, "Hide corrupted mirrored maps", "maphiders;mirroredmaphider"], "HD", ["Rarity", "MapTier"], "Hide Mirrored non-rare maps");
            QuickUI("?HideALLMapsByTier", "HD", ["MapTier", "AreaLevel"], "Hide by tier");

            Conditional("?CShowMapsQuality", ["c9.maps.decorators.all"]) { Show; Class Maps; Quality >= 20; SetFontSize 40; SetBackgroundColor 180 70 50 220; PlayAlertSound 5 300; SetTextColor 0 0 0; MinimapIcon 2 Brown Square; PlayEffect Brown; }
            Conditional("?CShowMapsRareRarity", ["c9.maps.decorators.all"]) { Show; Class Maps; Rarity Rare; SetFontSize 40; SetBackgroundColor 180 70 50 220; PlayAlertSound 5 300; SetTextColor 0 0 0; MinimapIcon 2 Brown Square; PlayEffect Brown; }
            Conditional("?CShowMapsMagicRarity", ["c9.maps.decorators.all"]) { Show; Class Maps; Rarity Magic; SetFontSize 40; SetBackgroundColor 180 70 50 220; PlayAlertSound 5 300; SetTextColor 0 0 0; MinimapIcon 2 Brown Square; PlayEffect Brown; }
            Conditional("?CShowMapsCorrupted", ["c9.maps.decorators.all"]) { Show; Class Maps; Corrupted True; SetFontSize 40; SetBackgroundColor 180 70 50 220; PlayAlertSound 5 300; SetTextColor 0 0 0; MinimapIcon 2 Brown Square; PlayEffect Brown; }

            QuickUI("?CShowMapsQuality", "SDH", ["MapTier", "Quality", "Rarity", "HasInfluence"], "Highlight maps with high quality");
            QuickUI("?CShowMapsRareRarity", "SHD", ["MapTier"], "Highlight rare maps");
            QuickUI("?CShowMapsMagicRarity", "SHD", ["MapTier"], "Highlight magic maps");
            QuickUI("?CShowMapsCorrupted", "SHD", ["MapTier", "Rarity"], "Highlight corrupted maps");


            QuickUI([1.0, "Maps with Implicits (high tier)", "maps->implicitmod;t1"], "SD", ["MapTier"], "maps with implicits (T14+)");
            QuickUI([1.0, "Maps with Implicits", "maps->implicitmod;any"], "SD", ["MapTier"], "Maps with implicits");
            QuickUI([0.0, "High with Corrupted Implicit (high tier)", "maps->corruptedimplicit;t1"], "SD", ["MapTier"], "With corrupted mod (T14+)");
            QuickUI([0.0, "High with Corrupted Implicit", "maps->corruptedimplicit;any"], "SD", ["MapTier"], "With corrupted mod");
        }

        Section("Custom Rule: Highlight specific maps", "Firefly") {
            Function ShowMapBaseTypeTier ($s, $shd = "SD", $title) { QuickUI($s, $shd, ["MapTier", "Quality", "Rarity", "Corrupted", "AreaLevel"], $title, ["Maps", "SO"]); }
            Conditional("?CShowMaps", ["c9.maps.decorators.all"]) { Show; Class Maps; BaseType == "Strand Map"; SetFontSize 44; SetBackgroundColor 180 70 50 220; PlayAlertSound 5 300; SetTextColor 0 0 0; MinimapIcon 2 Brown Square; PlayEffect Brown; }
            ElementAdder_Tier("?CShowMaps", "ShowMapBaseTypeTier");
        }

        Section("Custom Rule: Hide specific maps", "Firefly") {
            Function HideMapBaseTypeTier ($s, $shd = "HD", $title) { QuickUI($s, $shd, ["MapTier", "Quality", "Rarity", "Corrupted", "AreaLevel"], $title, ["Maps", "SO"]); }
            Conditional("?CHideMaps", ["c9.maps.generic.t16"]) { Hide; Class Maps; SetFontSize 18; MapTier <= 14; }
            ElementAdder_Tier("?CHideMaps", "HideMapBaseTypeTier");
        }
    }

    Section("Maps - Normal & Special", "Map") {
        Title("Normal Map Progression and Visuals");

        Section("Decorators") {
            Description("Decorators highlight specific characteristics of an item, by changing the appearance, without deciding whether it is hidden or shown.");

            Search S0(1.0, "Map appearance T16 Gain", "maps;deco_mapup_t16") { }
            Search S0(1.0, "Map appearance T15 Gain", "maps;deco_mapup_t15") { }
            Search S0(1.0, "Map appearance T14 Gain", "maps;deco_mapup_t14") { }
            Search S0(1.0, "Map appearance T13 Gain", "maps;deco_mapup_t13") { }
            Search S0(1.0, "Map appearance T12 Gain", "maps;deco_mapup_t12") { }
            Search S0(1.0, "Map appearance T11 Gain", "maps;deco_mapup_t11") { }
            Search S1(1.0, "Map appearance T10 Gain", "maps;deco_mapup_t10") { }
            Search S1(1.0, "Map appearance T9 Gain", "maps;deco_mapup_t9") { }
            Search S1(1.0, "Map appearance T8 Gain", "maps;deco_mapup_t8") { }
            Search S1(1.0, "Map appearance T7 Gain", "maps;deco_mapup_t7") { }
            Search S1(1.0, "Map appearance T6 Gain", "maps;deco_mapup_t6") { }
            Search S2(1.0, "Map appearance T5 Gain", "maps;deco_mapup_t5") { }
            Search S2(1.0, "Map appearance T4 Gain", "maps;deco_mapup_t4") { }
            Search S2(1.0, "Map appearance T3 Gain", "maps;deco_mapup_t3") { }
            Search S2(1.0, "Map appearance T2 Gain", "maps;deco_mapup_t2") { }
            Search S2(1.0, "Map appearance T1 Gain", "maps;deco_mapup_t1") { }

            QuickUI(S0, "SD", [], "Decorator: T14+ Map Tier Upgrade");
            QuickUI(S1, "SD", [], "Decorator: T6+ Map Tier Upgrade");
            QuickUI(S2, "SD", [], "Decorator: T1+ Map Tier Upgrade");
            QuickUI([1.0, "Map decorator high red tier", "maps;deco_zone1general"], "SD", ["MapTier"], "Decorator: T14+ maps");
            QuickUI([1.0, "Map decorator low red tier", "maps;deco_zone2general"], "SD", ["MapTier"], "Decorator: T11+ maps");
            QuickUI([1.0, "Map decorator yellow tier", "maps;deco_zone3general"], "SD", ["MapTier"], "Decorator: T6+ maps");
            QuickUI([1.0, "Map decorator white tier", "maps;deco_zone4general"], "SD", ["MapTier"], "Decorator: T1+ maps");

            QuickUI([0.0, "Decorator: Maps with Implicits", "maps;decor_implicit"], "SH", []);
            QuickUI([0.0, "Decorator: Maps with Corrupts", "maps;deco_corruptedmod"], "SH", []);
        }

        Section("Normal Maps") {
            Search T16(0.1, "Map appearance T16") { MapTier 16; Class Maps; Rarity "Normal"; }
            Search T15(0.1, "Map appearance T15") { MapTier 15; Class Maps; Rarity "Normal"; }
            Search T14(0.1, "Map appearance T14") { MapTier 14; Class Maps; Rarity "Normal"; }
            Search T13(0.1, "Map appearance T13") { MapTier 13; Class Maps; Rarity "Normal"; }
            Search T12(0.1, "Map appearance T12") { MapTier 12; Class Maps; Rarity "Normal"; }
            Search T11(0.1, "Map appearance T11") { MapTier 11; Class Maps; Rarity "Normal"; }
            Search T10(0.1, "Map appearance T10") { MapTier 10; Class Maps; Rarity "Normal"; }

            QuickUI(T16, "SH", [], "T16");
            QuickUI(T15, "SH", [], "T15");
            QuickUI(T14, "SH", [], "T14");
            QuickUI(T13, "SH", [], "T13");
            QuickUI(T12, "SH", [], "T12");
            QuickUI(T11, "SH", [], "T11");
            QuickUI(T10, "SH", [], "T10");
            QuickUI([0.0, "Map appearance T9", "maps;maps_c_t9"], "SH", [], "T9"]);
            QuickUI([0.0, "Map appearance T8", "maps;maps_c_t8"], "SH", [], "T8"]);
            QuickUI([0.0, "Map appearance T7", "maps;maps_c_t7"], "SH", [], "T7"]);
            QuickUI([0.0, "Map appearance T6", "maps;maps_c_t6"], "SH", [], "T6"]);
            QuickUI([0.0, "Map appearance T5", "maps;maps_d_t5"], "SH", [], "T5"]);
            QuickUI([0.0, "Map appearance T4", "maps;maps_d_t4"], "SH", [], "T4"]);
            QuickUI([0.0, "Map appearance T3", "maps;maps_d_t3"], "SH", [], "T3"]);
            QuickUI([0.0, "Map appearance T2", "maps;maps_d_t2"], "SH", [], "T2"]);
            QuickUI([0.0, "Map appearance T1", "maps;maps_d_t1"], "SH", [], "T1"]);
        }

        Title("Exotic Maps");

        Section("Shaper, Elder, T17 and Conqueror Maps") {
            Search ElderMap(0.0, "Map appearance (ElderMap)") { Class Maps; HasInfluence Elder; Rarity Normal; }
            Search ShaperMap(0.0, "Map appearance (ShaperMap)") { Class Maps; HasInfluence Shaper; Rarity Normal; }
            QuickUI([0.0, "Map appearance T17", "maps->t17uber;any"], "SH", [], "T17 PenUltimate Maps");
            QuickUI([0.0, "New Influenced Maps", "maps->influenced;infconquerors"], "SH", [], "Conqueror Maps");
            QuickUI("ShaperMap", "SH", ["MapTier"], "Shaper Maps:");
            QuickUI("ElderMap", "SH", ["MapTier"], "Elder Maps:");
            QuickUI([0.0, "Vaal Temple Map", "maps->vaaltemple;any"], "SH", []);
        }

        Section("Delirium and 8-Mod maps") {
            QuickUI([0.0, "8-Mod Corrupted Maps", "maps->corruptedspecial;mod8"], "SH", ["MapTier"]);
            QuickUI([0.0, "Delirium High Maps", "maps->enchanted;t1"], "SHD", ["MapTier"], "Delirium or Enchanted (T14+)");
            QuickUI([0.0, "Delirium Maps", "maps->enchanted;any"], "SHD", ["MapTier"], "Delirium or Enchanted");
        }

        Section("Blighted Maps") {
            Function BlightedMapTier($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["MapTier"], $text, ["Maps", "ASO"]); }

            QuickUI([0.0, "Uber Blighted Map", "maps->blighted;uber"], "SH", []);

            Search S0(0.0, "Blighted Maps High") { Class Maps; BlightedMap True; Rarity Rare; MapTier 15; }
            Search S2(0.0, "Blighted Maps Low") { Class Maps; BlightedMap True; Rarity Rare; MapTier 4; }

            BlightedMapTier(S0, "SH", "High Blighted Maps");
            BlightedMapTier(S2, "SH", "Low Blighted Maps");

            Conditional("?BlightedMapNewTier") { Show; Class Maps; BlightedMap True; SetTextColor 210 178 135; SetBackgroundColor 0 0 0 255; SetBorderColor 213 159 100 200; SetFontSize 42; }
            ElementAdder_Tier("?BlightedMapNewTier", "BlightedMapTier");
        }

//        Section("Beyond Maps (identified)") {
//            QuickUI([0.0, "ModFiltering: Maps 1", "maps->identified;nemesisbeyond"], "SD", ["MapTier", "Mods"], "Beyond Maps");
//        }
    }

    Section("Maps - Unique", "OlmecsSanctumMap", "E") {
        Function UniqueMaps ($s, $shd = "SHD", $title) { QuickUI($s, $shd, [], $title, ["UniqueMaps", "O"]); }

        TierListToolBar("UniqueMap", [], []);

        UniqueMaps([0.0, "Unique Maps T1", "uniques->maps;t1"], "SH", "S Tier");
        UniqueMaps([0.0, "Unique Maps T3", "uniques->maps;t2"], "SH", "A Tier");
        UniqueMaps([0.0, "Unique Maps T2", "uniques->maps;t3"], "SH", "B Tier");
        UniqueMaps([0.0, "Unique Maps T4", "uniques->maps;t4"], "SH", "Others");

        Conditional("?UniqueMapTier") { Show; Rarity Unique; Class Maps; SetFontSize 45; SetBorderColor 175 96 37 255; PlayAlertSound 4 300; MinimapIcon 2 Brown Square; PlayEffect Brown; }
        ElementAdder_Tier("?UniqueMapTier", "UniqueMaps");

        Conditional("?UniqueMapNewTiersHidden") {  }
        ElementAdder_Tier("?UniqueMapNewTiersHidden", null, true, "UniqueMaps", "HO");
    }

    Section("Scarabs and Fragments", "Scarab", "E") {
        Section("Scarabs", "Scarab", "E") {
            Function ScarabTierList($s, $shd = "SHD", $text) { QuickUI($s, $shd, [], $text, ["Scarabs", "O"]); }

            TierListToolBar("Scarab", [], []);

            ScarabTierList([0.0, "Betrayal Scarabs T1", "fragments->scarabs;t1"], "SH", "S Tier");
            ScarabTierList([0.0, "Betrayal Scarabs T2", "fragments->scarabs;t2"], "SH", "A Tier");
            ScarabTierList([0.0, "Betrayal Scarabs T3", "fragments->scarabs;t3"], "SH", "B Tier");
            ScarabTierList([0.0, "Betrayal Scarabs T4", "fragments->scarabs;t4"], "SH", "C Tier");
            ScarabTierList([0.0, "Betrayal Scarabs T5", "fragments->scarabs;t5"], "SH", "D Tier");
            ScarabTierList([0.0, "Betrayal Scarabs T6", "fragments->scarabs;t6"], "SH", "Others");

            // new tiers
            Conditional("?ScarabNewTiers") { Show; Class "Map Fragments"; SetFontSize 45; SetTextColor 159 15 213 255; SetBorderColor 159 15 213 255; SetBackgroundColor 0 0 0 255; PlayAlertSound 2 300; PlayEffect Yellow; MinimapIcon 2 Yellow Hexagon; }
            ElementAdder_Tier("?ScarabNewTiers", "ScarabTierList");

            Conditional("?ScarabNewTiersHidden") {}
            ElementAdder_Tier("?ScarabNewTiersHidden", null, true, "Scarabs", "OH");
        }

        Section("Stacked T4 Scarabs", "Scarab", "E") {
            Function StackedScarabsFunc($s, $shd = "SD", $title) { QuickUI($s, $shd, [], $title, ["Scarabs", "SO"]); }
            StackedScarabsFunc([1.0, "Stacked Scarabs", "fragments->stackedscarabs;t3"], "SD");
        }

        Section("Map Fragments", "SacrificeAtMidnight", "E") {
            Function FragmentsFunc($s, $shd = "SHD", $title, $descr = false) { QuickUI($s, $shd, [], $title, ["MapFragmentsNoScarabs", "O"], $descr); }

            TierListToolBar("Fragment", [], []);

            FragmentsFunc([1.1, "Map Fragments T1", "fragments;t1"], "SH", "S Tier");
            FragmentsFunc([1.1, "Map Fragments T2", "fragments;t2"], "SH", "A Tier");
            FragmentsFunc([1.1, "Map Fragments T3", "fragments;t3"], "SH", "B Tier");
            FragmentsFunc([1.1, "Map Fragments T4 (remaining)", "fragments;t4"], "SH", "Others");

            Conditional("?MapFragmentNoBreachNewTier") { Show; Class "Map Fragments"; SetFontSize 45; SetBorderColor 0 0 0 255; PlayAlertSound 2 300; MinimapIcon 2 White Triangle; PlayEffect White; SetTextColor 0 0 0 255; SetBackgroundColor 159 15 213 255; }
            ElementAdder_Tier("?MapFragmentNoBreachNewTier", "FragmentsFunc");

            Conditional("?FragmentNoBreachNewTiersHidden") { }
            ElementAdder_Tier("?FragmentNoBreachNewTiersHidden", null, true, "MapFragmentsNoScarabs", "OH");
        }

        Section("Stacked Sacrifice Fragments", "SacrificeAtMidnight") {
            Function FragmentsFunc($s, $shd = "SD", $title, $descr = false) { QuickUI($s, $shd, [], $title, ["MapFragmentsNoScarabs", "SO"], $descr); }
            FragmentsFunc([1.0, "Stacked Map Fragments T3", "fragments->stacked;t3"], "SD", "Stacked Sacrifice Fragments:");
        }
    }

    Section("Invitations, Tomes, Map-Likes", "InscribedUltimatum", "E") {
        Section("Endgame Bossfight Invitation", "MavensOrb", "E") {
            Function MavenInvUI($s, $shd = "SHD", $title) { QuickUI($s, $shd, [], $title, ["AtlasBossInvitations", "O"]); }

            TierListToolBar();
            MavenInvUI([0.0, "Maven's Invitation Boss", "exotic->invitation;t1"], "SH", "S Tier");
            MavenInvUI([0.0, "Maven's Invitation Boss Tier 2", "exotic->invitation;t2"], "SH", "A Tier");
            MavenInvUI([0.0, "Maven's Invitation Area", "exotic->invitation;t3"], "SH", "Others");

            Conditional("?MavenInviteNewTier") { }
            ElementAdder_Tier("?MavenInviteNewTier", "MavenInvUI");
        }

        Section("Ultimatum, Sanctum, Incursion", "InscribedUltimatum") {
            QuickUI([1.0, "Chronicle of Atzoatl (Incursion Temple Map Item)", "miscmapitemsextra;itemizedleagues"], "SH", [], "Incursion and Ultimatum", "", "Note: There's sadly NO way to filter these by reward, health percentage, rooms etc.");

            QuickUI([0.0, "Itemized Sanctum (high level)", "exoticmap->sanctum;ilvl83"], "SH", ["ItemLevel"], "Forbidden Tome (high level)");
            QuickUI([0.0, "Itemized Sanctum", "exoticmap->sanctum;any"], "SH", [], "Forbidden Tome / Sanctum"); // Sanctum Vaults Research -> started run
        }

        Section("Reliquary Keys", "VaalReliquaryKey") {
            QuickUI([1.0, "Special map items", "miscmapitemsextra;relickeys"], "S", [], "Reliquary Keys", ["all", "SO"]);
            QuickUI([0.0, "Other Reliquary Keys", "miscmapitemsextra;relickeyssafe"], "S", []);
        }

        Section("Breachstones", "Breachstone", "E") {
            Function BreachstoneFunc($s, $shd = "SHD", $title, $descr = false) { QuickUI($s, $shd, [], $title, ["Breachstones", "O"], $descr); }

            TierListToolBar();

            BreachstoneFunc([0.0, "Breachstones Tier 1", "breachstone;t1"], "SH", "S Tier");
            BreachstoneFunc([0.0, "Breachstones Tier 2", "breachstone;t2"], "SH", "A Tier");
            BreachstoneFunc([0.0, "Breachstones Tier 3", "breachstone;t3"], "SH", "Others");

            Conditional("?BreachstonesNewTier") { }
            ElementAdder_Tier("?BreachstonesNewTier", "BreachstoneFunc");

            Conditional("?BreachstonesNewTiersHidden") { }
            ElementAdder_Tier("?BreachstonesNewTiersHidden", null, true, "Breachstones", "OH");
        }

        Section("Atlas Memories", "AtlasMemory", "E") {
            Function AtlasMemoryUiFunc($s, $shd = "SHD", $text) { QuickUI($s, $shd, [], $text, ["AtlasMemories", "O"]); }

            QuickUI([0.0, "Atlas Master Memories with good mods", "exoticmap->memory;t1"], "SD", ["Mods"], "S Tier - Atlas Memories", ["AtlasMemories", "OAS"]);

            AtlasMemoryUiFunc([0.0, "Atlas Master Memories Tier 1", "exoticmap->memory;any"], "SH", "Others");

            // new tiers
            Conditional("?AtlasMemoriesNewTier") { }
            ElementAdder_Tier("?AtlasMemoriesNewTier", "AtlasMemoryUiFunc");

            // hide-tier
            Conditional("?AtlasMemoriesNewTierHidden") { }
            ElementAdder_Tier("?AtlasMemoriesNewTierHidden", null, true, "AtlasMemories", "HO");
        }

        Section("Expedition Logbooks") { // ExpeditionLogbookMap
            // Expedition Logbook
            Description("Logbooks lead you to maps which contain one huge Expedition event, similar to Blighted Maps. You can use the upper section to give certain logbooks more highlight.");
            QuickUI([0.0, "Expedition Logbook Maps", "expedition->logbook;any"], "SH", []);
        }
    }

    Section("Splinters", "MergedSplinters", "E")
    {
        Section("Simulacrum Splinters", "DeliriumMapItemSimulacrum") {
            QuickUI([0.0, "Simulacrum Splinter Stacks 4", "currency->splinter->simulacrum;t1"], "SD", ["StackSize"], "Huge Stacks");
            QuickUI([0.0, "Simulacrum Splinter Stacks 3", "currency->splinter->simulacrum;t2"], "SD", ["StackSize"], "Large Stacks");
            QuickUI([0.0, "Simulacrum Splinter Stacks 2", "currency->splinter->simulacrum;t3"], "SD", ["StackSize"], "Medium Stacks");
            QuickUI([0.0, "Simulacrum Splinter Stacks 1", "currency->splinter->simulacrum;t4"], "SD", ["StackSize"], "Small Stacks");
            QuickUI([0.0, "Simulacrum Splinters", "currency->splinter->simulacrum;t5"], "SH", [], "Others");
        }

        Section("Splinters - Single", "MergedSplinters", "E") {
            Function SplinterTierList($s, $shd = "SHD", $text) { QuickUI($s, $shd, [], $text, ["Splinters", "O"]); }

            TierListToolBar();

            SplinterTierList([0.0, "Breach Splinters & Legion Splinters T1", "currency->splinter;t1"], "SH", "Higher Tier");
            SplinterTierList([0.0, "Breach Splinters & Legion Splinters T2", "currency->splinter;t3"], "SH", "Lower Tier");

            Conditional("?LegionSplintersNewTier") { Show; Class Currency; SetTextColor 210 178 135; SetBackgroundColor 0 0 0 255; SetBorderColor 213 159 100 200; SetFontSize 42; }
            ElementAdder_Tier("?LegionSplintersNewTier", "SplinterTierList");

            Conditional("?LegionSplinterNewTiersHidden") {}
            ElementAdder_Tier("?LegionSplinterNewTiersHidden", null, true, "Splinters", "OH");
        }

        Section("Splinters - High Tier (Stacked)", "MergedSplinters", "E") {
            Function SplinterStacksUI($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["StackSize"], $text, ["Splinters", "OS"]); }

            SplinterStacksUI([0.0, "Breach and Legion splinter very large stacks 1", "currency->stackedsplintershigh;t1"], "SD", "High Tier Splinters 10+ Stacks");
            SplinterStacksUI([0.0, "Breach and Legion splinter large stacks 1", "currency->stackedsplintershigh;t2"], "SD", "High Tier Splinters 5+ Stacks");
            SplinterStacksUI([0.0, "Breach and Legion splinter stacks 1", "currency->stackedsplintershigh;t3"], "SD", "High Tier Splinters 2+ Stacks");

            Conditional("?BreachLegionSplinterStacksNewTier") { Show; Class Currency; SetTextColor 210 178 135; SetBackgroundColor 0 0 0 255; SetBorderColor 213 159 100 200; SetFontSize 42; }
            ElementAdder_Tier("?BreachLegionSplinterStacksNewTier", "SplinterStacksUI");
        }

        Section("Splinters - Low Tier (Stacked)", "MergedSplinters", "E") {
            Function SplinterStacksUI($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["StackSize"], $text, ["Splinters", "SO"]); }
            SplinterStacksUI([0.0, "Breach and Legion splinter very large stacks 2 large", "currency->stackedsplinterslow;t1"], "SD", "Low Tier Splinters 10+ Stacks");
            SplinterStacksUI([0.0, "Breach and Legion splinter large stacks 2", "currency->stackedsplinterslow;t2"], "SD", "Low Tier Splinters 5+ Stacks");
            SplinterStacksUI([0.0, "Breach and Legion splinter stacks 2", "currency->stackedsplinterslow;t3"], "SD", "Low Tier Splinters 2+ Stacks");
        }
    }

    Section("Heist Contracts and Blueprints", "HeistGrandBlueprint") {
        Warning("Path of Exile lootfilters can't filter contracts by their required heist jobs or reward value!");

        Title("Basic Contract Rules");
        Section("Contracts", "HeistContract") {
            Function ContractList($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["ItemLevel"], $text, ["HeistContractsNormal", "O"]); }

            ContractList([0.0, "Heist Contract T3", "heist->contract;handpicked"], "SH", "All Contracts (for your tiering)");

//            QuickUI([0.0, "Remaining Contracts", "heist->contract;any"], "SH", [], "", [], "Remaining contracts that were not caught be the rules above due to possible ItemLevel requirements."););

            Conditional("?HeistContractNewTiers") { Show; Class "Contracts"; SetTextColor 210 178 135; SetBackgroundColor 0 0 0 255; SetBorderColor 213 159 100 200; SetFontSize 42; }
            ElementAdder_Tier("?HeistContractNewTiers", "ContractList");

            Conditional("?HeistContractsNewTiersHidden") { }
            ElementAdder_Tier("?HeistContractsNewTiersHidden", null, true, "HeistContractsNormal", "HO");
        }

        Section("Unique Contracts", "HeistContract") {
            Function UniqueHeistContractFunc($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["HeistContractsUnique"], $text); }

            Search S2(0.0, "Unique Heist Contract") { BaseType "Contract: Mansion"; Rarity Unique; }
            UniqueHeistContractFunc(S2, "SH");

            // new tiers
            Conditional("?UniqueContractsNewTier") { }
            ElementAdder_Tier("?UniqueContractsNewTier", "UniqueHeistContractFunc");
        }

        Section("Quest & Other Contracts", "HeistContract") {
            Warning("Quest Contracts Can't Be Hidden!");
            QuickUI([0.0, "Heist Quest Contracts", "questlikeexception;questheist"], "S", []);
            QuickUI([1.0, "Untiered Heist Contracts", "heist->contract;exhide"], "SH");
        }

        Title("Basic Blueprint Rules");
        Section("Blueprints - Grand Heists", "HeistGrandBlueprint") {
            Function ContractList($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["ItemLevel"], $text, ["HeistBlueprints", "O"]); }

            TierListToolBar(null, null, null, null, "Blueprint");

            ContractList([0.0, "Grand Heist Blueprint Tier 1", "heist->blueprint;handpicked"], "SH", "All Blueprints (for your tiering)");

            Search S1(0.0, "Grand Heist Blueprint Tier 2") { -BaseType "Blueprint: Bunker"; Class "Blueprints"; Rarity Magic; }
            QuickUI(S1, "SH", [], "Remaining Blueprints");

            Conditional("?HeistBlueprintNewTiers") { Show; Class "Blueprints"; SetTextColor 210 178 135; SetBackgroundColor 0 0 0 255; SetBorderColor 213 159 100 200; SetFontSize 42; }
            ElementAdder_Tier("?HeistBlueprintNewTiers", "ContractList");

            Conditional("?HeistBlueprintNewTiersHidden") { }
            ElementAdder_Tier("?HeistBlueprintNewTiersHidden", null, true, "HeistBlueprints", "HO");
        }

        Title("Custom Rules");

        Section("Custom Contract Rules", "HeistContract") {
            Function CondShowBase ($s, $shd = "SHD", $title) { QuickUI($s, $shd, ["ItemLevel", "DropLevel", "AreaLevel", "RarityU", "Corrupted"], $title, ["HeistContractsAll", "SO"]); }
            Conditional("?CCustomHeistContractRules", ["c9.maplike.all"]) { Show; Class Contract; SetBorderColor 200 0 0; SetFontSize 38; ItemLevel >= 68; Rarity Rare; }
            ElementAdder_Tier("?CCustomHeistContractRules", "CondShowBase");
        }

        Section("Custom Blueprint Rules", "HeistGrandBlueprint") {
            Function CondShowBase ($s, $shd = "SD", $title) { QuickUI($s, $shd, ["ItemLevel", "DropLevel", "AreaLevel", "RarityU", "Corrupted"], $title, ["HeistBlueprints", "SO"]); }

            Conditional("?CCustomHeistBlueprintRules", ["c9.maplike.all"]) { Show; Class Blueprint; SetBorderColor 200 0 0; SetFontSize 38; ItemLevel >= 68; Rarity Rare; }
            ElementAdder_Tier("?CCustomHeistBlueprintRules", "CondShowBase");
        }
    }
}

Chapter() { Ad(); }

//===================================================================================================
// RARES
//===================================================================================================

Chapter() {

    SectionTitle("Endgame - Rare Tiering (lvl 68+)", "ImpClaw");

    Section("Add custom Show/Hide rule (EG rares)", "Firefly") {

        Description("Augment the filter with entirely new rules, such as 'hide all belts', 'highlight all gemini claws in a special color', 'hide all evasion type armors, gloves, shields, and boots' or 'show all corrupted rares'.", "Additional Endgame Rules", "This section is designed to be foolproof. It will have no effect on 6 links, leveling items, elder/shaper items, uniques, atlas bases (such as Steel Rings), abyss belts, fishing rods and other special bases. These sections frequently feature the 'strictness' dropdown menu. This tool defines how many rules are overwritten by your custom rules. I recommend playing around with the loot simulator, while switching back and forth to the customizer to get familiar with this section");

        Section("Highlight rares by Base", "Firefly") {
            Function CondShowBase ($s, $shd = "SD", $title)
            {
                QuickUI($s, $shd, ["CondTargetSelection", "ItemLevel", "DropLevel", "Height", "Width", "Sockets", "Stats_RareGear"], $title, ["Gear", "OS"]);
            }

            Description("Give specific BaseTypes more highlighting here.");

            Conditional("?CRareShowBases", ["c6.rare.generic.all", "c3.gear.crafting86.all", "c6.rare.t3.all", "c6.rare.t2.all", "c6.rare.t1.all", "c6.rare.decorator.all"]) { Show; SetBorderColor 200 0 0; SetFontSize 38; ItemLevel >= 68; Rarity Rare; }
            ElementAdder_Tier("?CRareShowBases", "CondShowBase");
        }

        Section("Highlight rares by Armour Type", "Firefly") {
            Description("Highlight gear by their type, like Evasion or Evasion-EnergyShield items.");

            Conditional("?CRareShowItemTypes", ["c6.rare.generic.all", "c3.gear.crafting86.all", "c6.rare.t3.all", "c6.rare.t2.all", "c6.rare.t1.all", "c6.rare.decorator.all"]) { Show; SetBorderColor 200 0 0; SetFontSize 38; ItemLevel >= 68; Rarity Rare; Class == "Body Armours" "Gloves" "Boots" "Helmets" "Shields"; }

            Function CondShowType ($s, $shd = "SD", $title)
            {
                QuickUI($s, $shd, ["CondTargetSelection", "ItemType", "ArmourClasses", "ItemLevel","DropLevel", "LinkedSockets", "Sockets", "Stats_RareGear"], $title);
            }

            ElementAdder_Tier("?CRareShowItemTypes", "CondShowType");
        }

        Section("Highlight rares by item slot", "Firefly") {

            Function CondShowClass ($s, $shd = "SD", $title)
            {
                QuickUI($s, $shd, ["CondTargetSelection", "AllGearClasses", "ItemLevel", "DropLevel", "Height", "Width", "LinkedSockets", "Sockets", "Stats_RareGear"], $title);
            }

            Description("Highlight specific item classes here.");

            Conditional("?CRareShowClasses", ["c6.rare.generic.all", "c3.gear.crafting86.all", "c6.rare.t3.all", "c6.rare.t2.all", "c6.rare.t1.all", "c6.rare.decorator.all"]) { Show; SetBorderColor 200 0 0; SetFontSize 38; ItemLevel >= 68; Rarity Rare; }
            ElementAdder_Tier("?CRareShowClasses", "CondShowClass");
        }

        Section("Highlight chromatic Rares", "Chromatic") {

            Function CondShowClass ($s, $shd = "SD", $title)
            {
                QuickUI($s, $shd, ["CondTargetSelection", "AllGearClasses", "ItemLevel", "DropLevel", "Height", "Width", "LinkedSockets", "Sockets", "Stats_RareGear"], $title);
            }

            Description("By default rares have a higher evaluation priority than chromatic recipes. This can be changed here.");

            Conditional("?CRareShowRGB", ["c6.rare.generic.all", "c3.gear.crafting86.all", "c6.rare.t3.all", "c6.rare.t2.all", "c6.rare.t1.all", "c6.rare.decorator.all"]) { Show; SetBorderColor 0 0 0; SetBackgroundColor 150 150 150; SetFontSize 40; ItemLevel >= 68; Rarity Rare; SocketGroup RGB; }
            ElementAdder_Tier("?CRareShowRGB", "CondShowClass");
        }

        Section("Hide rares by Base", "Annulment") {
            Function CondHideBase ($s, $shd = "HD", $title)
            {
                QuickUI($s, $shd, ["CondTargetSelection", "ItemLevel", "DropLevel", "Height", "Width", "LinkedSockets", "Sockets", "Stats_RareGear"], $title, ["Gear", "OS"]);
            }

            Conditional("?CRareHideBases", ["c6.rare.generic.all", "c3.gear.crafting86.all", "c6.rare.t3.all", "c6.rare.t2.all", "c6.rare.t1.all", "c6.rare.decorator.all"]) { Hide; SetFontSize 18; ItemLevel >= 68; Rarity Rare; }
            ElementAdder_Tier("?CRareHideBases", "CondHideBase");
        }

        Section("Hide rares by Armour Type", "Annulment") {
            Conditional("?CRareHideItemTypes", ["c6.rare.generic.all", "c3.gear.crafting86.all", "c6.rare.t3.all", "c6.rare.t2.all", "c6.rare.t1.all", "c6.rare.decorator.all"]) { Hide; ItemLevel >= 68; Rarity Rare; Class == "Body Armours" "Gloves" "Boots" "Helmets" "Shields"; }

            Function CondHideType ($s, $shd = "HD", $title)
            {
                QuickUI($s, $shd, ["CondTargetSelection", "ItemType", "ArmourClasses", "ItemLevel", "DropLevel", "LinkedSockets", "Sockets", "Stats_RareGear"], $title);
            }

            ElementAdder_Tier("?CRareHideItemTypes", "CondHideType");
        }

        Section("Hide rares by item slot", "Annulment") {
            Function CondHideClass ($s, $shd = "HD", $title)
            {
                // todo: a LOT of these are VERY damn similar -> remove e.g. height & width, so that they will appear in AddAttribute?
                QuickUI($s, $shd, ["CondTargetSelection", "AllGearClasses", "ItemLevel", "DropLevel", "Height", "Width", "LinkedSockets", "Sockets", "Stats_RareGear"], $title);
            }

            Description("Hide uninteresting items, such as bows for melee characters or melee weapons for casters.");

            Conditional("?CRareHideClasses", ["c6.rare.generic.all", "c3.gear.crafting86.all", "c6.rare.t3.all", "c6.rare.t2.all", "c6.rare.t1.all", "c6.rare.decorator.all"]) { Hide; SetFontSize 18; ItemLevel >= 68; Rarity Rare; }
            ElementAdder_Tier("?CRareHideClasses", "CondHideClass");
        }

        Section("Hide rares by Tier", "Annulment") {
            Description("Note: The section 'hide and highlight rares by type' section can be used to achieve the same result, while also having control over classes and levels.");
            Conditional("?CRareSimpleHide", ["c6.rare.generic.all", "c3.gear.crafting86.all", "c6.rare.t3.all", "c6.rare.t2.all", "c6.rare.t1.all", "c6.rare.decorator.all"]) { Hide; Class "Helmets" "Gloves" "Boots" "Body Armours" "Shields" "Quivers" "Wands" "Rune Dagger" "Warstaves" "Daggers" "Sceptres" "Bows" "Claws" "One Hand Swords" "One Hand Axes" "One Hand Maces" "Staves" "Two Hand Swords" "Two Hand Axes" "Two Hand Maces"; SetFontSize 18; ItemLevel >= 68; Rarity Rare; }
            QuickUI("?CRareSimpleHide", "HD", ["CondTargetSelection", "LinkedSockets", "ItemLevel", "Sockets"], "Hide Rares By Tier");
        }

        Section("Corrupted Rares Custom Rules", "VaalOrb")
        {
        Conditional("?CorruptedRares", ["c6.rare.generic.all", "c3.gear.crafting86.all", "c6.rare.t3.all", "c6.rare.t2.all", "c6.rare.t1.all", "c6.rare.decorator.all"]) { Show; Corrupted True; Rarity Rare; ItemLevel >= 68; SetFontSize 28; SetBorderColor 180 70 0; }
        QuickUI("?CorruptedRares", "SD", ["AllGearClasses", "ItemLevel", "DropLevel", "Height", "Width", "CorruptedMods", "Sockets", "CondTargetSelection"], "Corrupted Rares");
        }
    }

    Section("Hide Corrupted, Outleveled, [...] Rares", "WisdomScroll") {
        Description("These rules are enabled in higher strictness. They hide lower rares if they drop in high level zones.");
        QuickUI([0.0, "Hide Lower Rares in High Maps 1", "hidelayer;rrihide1"], "HD", ["ItemLevel", "AreaLevel", "DropLevel", "AllGearClasses"], "Hide <75 in 82+ Zones: Very-Strict", []);
        QuickUI([0.0, "Hide Lower Rares in High Maps 2", "hidelayer;rrihide2"], "HD", ["ItemLevel", "AreaLevel", "DropLevel", "AllGearClasses"], "Hide <60 in 82+ Zones: Strict", []);
        QuickUI([0.0, "Hide Lower Rares in High Maps 3", "hidelayer;rrihide3"], "HD", ["ItemLevel", "AreaLevel", "DropLevel", "AllGearClasses"], "Hide <50 in 78+ Zones: Strict", []);
        QuickUI([0.0, "Hide Lower Rares in High Maps 4", "hidelayer;rrihide4"], "HD", ["ItemLevel", "AreaLevel", "DropLevel", "AllGearClasses"], "Hide <40 in 73+ Zones: Semi-Strict", []);

        Description("By default the filter will hide all (unidentified) corrupted/mirrored rares without an implicit. This of course excludes 6-links and all kind of other exotic items");
        QuickUI([0.0, "Unidentified Corrupted rares with 0 custom mods", "hidelayer;corruptedrares"], "SHD", ["AllGearClasses", "ItemLevel", "DropLevel", "Mirrored", "Identified", "Corrupted", "CorruptedMods"], "Unid corrupted rares: no implicit");
        QuickUI([0.0, "Unidentified Mirrored rares with 0  custom mods", "hidelayer;mirroredrares"], "SHD", ["AllGearClasses", "ItemLevel", "DropLevel", "Mirrored", "Identified", "Corrupted", "CorruptedMods"], "Unid mirrorred rares: no implicit");

        Description("The filter comes with a system to check if an identified rare has interesting stat combos. Identified rares drop rarely, but if NO statcombo was detected, you might consider hiding them. This can be done here.");
        QuickUI([1.0, "Identified endgame rares", "rr;identifieditemhandling"], "SHD", ["AllGearClasses", "ItemLevel", "DropLevel", "Mirrored", "Identified", "Corrupted", "CorruptedMods"], "Hide: T3 lower identified rares", [], "The filter will check identified rares for interesting mod combinations and highlight these items. By setting this rule to HIDE all items that have NOT passed the 'interesting identified mods check' will be hidden. This is useful if you're still searching for specific rare combinations, but would like to reduce the number of items visible.");
        QuickUI([1.0, "Hide remaining identified rares", "rareoptional;idhider"], "HD", ["ItemLevel", "DropLevel", "AllGearClasses"], "Hide ALL identified rares", [], "Hide all remaining identified items that were not highlighted by the mod filtering rules.");
    }

    Section("Decorators", "Chromatic") {
            Description("Decorators highlight specific characteristics of an item, by changing the appearance, without deciding whether it is hidden or shown.");

            QuickUI([1.0, "Endgame rare deco tiny", "decorators->rareeg;tinyrares"], "SD", ["Width", "Height"], "Decorator: Tiny");
            QuickUI([1.0, "Endgame rare deco medium 1", "decorators->rareeg;mediumrares1"], "SD", ["Width", "Height"], "Decorator: Medium (1x3)");
            QuickUI([1.0, "Endgame rare deco medium 2", "decorators->rareeg;mediumrares2"], "SD", ["Width", "Height"], "Decorator: Medium (2x2)");
            QuickUI([1.0, "Endgame rare deco large", "decorators->rareeg;largerares"], "SD", ["Width", "Height"], "Decorator: Large");
            QuickUI([1.0, "Endgame rare deco ilvl 86", "decorators->rareeg;ilvl86"], "SD", ["ItemLevel"], "Decorator: ItemLevel 86");
            QuickUI([1.0, "Endgame rare deco ilvl 84", "decorators->rareeg;ilvl84"], "SD", ["ItemLevel"], "Decorator: ItemLevel 84");
            QuickUI([1.0, "Endgame rare deco ilvl 75", "decorators->rareeg;ilvl75"], "SD", ["ItemLevel"], "Decorator: ItemLevel 75");
            QuickUI([1.0, "Endgame rare deco ilvl 68", "decorators->rareeg;ilvl68"], "SD", ["ItemLevel"], "Decorator: ItemLevel 68");
            QuickUI([0.0, "Endgame rare deco Atlas Bases Tier 1", "decorators->rareeg;atlasgear1"], "SH", ["ItemLevel", "AreaLevel"], "Decorator: Atlas Bases S Tier", ["gear", "OS"]);
            QuickUI([0.0, "Endgame rare deco Atlas Bases Tier 2", "decorators->rareeg;atlasgear2"], "SH", ["ItemLevel", "AreaLevel"], "Decorator: Atlas Bases A Tier", ["gear", "OS"]);
            QuickUI([0.0, "Endgame rare deco Atlas Bases Tier 3", "decorators->rareeg;atlasgear3"], "SH", ["ItemLevel", "AreaLevel"], "Decorator: Atlas Bases B Tier", ["gear", "OS"]);
            QuickUI([1.0, "Endgame rare deco corrupted implicit", "decorators->rareeg;corruptedraresimplicit"], "SD", ["Corrupted", "CorruptedMods"], "Decorator: Corrupted Implicit");
            QuickUI([1.0, "Endgame rare deco corrupted", "decorators->rareeg;corruptedrares"], "SD", ["Corrupted", "CorruptedMods"], "Decorator: Corrupted - No implicit");
            QuickUI([1.0, "Endgame rare deco 4 links", "decorators->rareeg;fourlinkedrares"], "SD", ["Corrupted", "CorruptedMods"], "Decorator: 4 Links");
    }

    Section("Jewellery", "Ring") {
        Search S1(1.0, "Rare rings/amulets T1", "rr->amuring;t1"]) { }
        Search S2(1.0, "Rare rings/amulets T2", "rr->amuring;t2"]) { }
        Search S3(1.0, "Rare rings/amulets T3", "rr->amuring;t3"]) { }

        Search B1(1.0, "Rare belts T1", "rr->belts;t1"]) { }
        Search B2(1.0, "Rare belts T2", "rr->belts;t2"]) { }
        Search B3(1.0, "Rare belts T3", "rr->belts;t3"]) { }

            QuickUI(S1, "SD", ["AreaLevel"]);
            QuickUI(B1, "SD", ["AreaLevel"]);
            QuickUI(S2, "SD", ["AreaLevel"]);
            QuickUI(B2, "SD", ["AreaLevel"]);
            QuickUI(S3, "SD", ["AreaLevel"]);
            QuickUI(B3, "SD", ["AreaLevel"]);

        BaseTypeMatrix(false, "Tier 1", S1, B1, "Tier 2", S2, B2, "Tier 3", S3, B3);
    }

    Section("Weapons and Armours", "RoyalBurgonet") {
        Function EgRaresArmours($s) { QuickUI($s, "SH", ["BaseDefencePercentile", "ItemLevel", "Quality"]); }

        Search T1Wep(2.0, "Tier 1 rares", "rr;t1") { }
        Search T2Wep(1.0, "Tier 2 rares", "rr;t2") { }
        Search T3Dagger(1.0, "Tier 3 rares", "rr;t3") { }
        Search T4(0.0, "Endgame Tier 4 Rares", "rr;t4endgamerares") { }

            EgRaresArmours(T1Wep);
            EgRaresArmours(T2Wep);
            EgRaresArmours(T3Dagger);
            EgRaresArmours(T4);

        BaseTypeMatrix(true,
            "Tier 1", T1Wep,
            "Tier 2", T2Wep,
            "Tier 3", T3Dagger
        );
    }
}

//===================================================================================================
// CRAFTING
//===================================================================================================

Chapter() {
    SectionTitle("Endgame - Special Rares & Crafting (lvl 68+)");

    Section("Fractured items", "FracturingOrb") {
        Description("Some itemclasses like 'Jewels' are completely covered through the class-based filtering below and don't need representing through the matrix.");
        Search S0(0.1, "Fractured items, tier 1", "exotic->fractured;fractt1") {}
        Search S1(0.1, "Fractured items, tier 2", "exotic->fractured;fractt2") {}
        Search S2(0.1, "Fractured items, tier 3", "exotic->fractured;fractt3") {}
        QuickUI(S0, "SH", ["AllGearClassesPlusFlaskJewelMapHeist", "ItemLevel", "DropLevel", "Identified", "Quality"], "Tier 1");
        QuickUI(S1, "SH", ["AllGearClassesPlusFlaskJewelMapHeist", "ItemLevel", "DropLevel", "Identified", "Quality"], "Tier 2");
        QuickUI(S2, "SH", ["AllGearClassesPlusFlaskJewelMapHeist", "ItemLevel", "DropLevel", "Identified", "Quality"], "Tier 3");
        QuickUI([0.0, "Fractured items, others", "exotic->fractured;fractothers"], "SH", ["AllGearClassesPlusFlaskJewelMapHeist", "ItemLevel", "DropLevel", "Identified", "Quality"], "Tier 4/Untiered");
        BaseTypeMatrix(true, "Tier 1", S0, "Tier 2", S1, "Tier 3", S2);
    }

    Section("Veiled Items", "VeiledChaosOrb") {
        Function VeilModTierList($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["AllGearClasses", "DropLevel", "ItemLevel", "Quality"], $text, ["Item Mods", "D", "HasExplicitMod"]); }
        Function VeilMods($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["AllGearClasses", "DropLevel", "ItemLevel", "Mods", "Quality", "Height", "Width"], $text); }

        VeilModTierList([0.0, "Betrayal Veiled Mods Tier 1", "exoticmods;t1veil"], "SD", "Veiled - Member-Specific Mods T1");
        VeilModTierList([0.0, "Betrayal Veiled Mods Tier 2", "exoticmods;t2veil"], "SD", "Veiled - Member-Specific Mods T2");

        VeilMods([0.0, "Item with multiple Betrayal Veiled Mods", "exoticmods;duoveil"], "SD", "Veiled - 2 mods 1 item");

        DeepSearch S4(0.0, "Betrayal Veiled Mods Small 1", "exoticmods;smallveil1") { BaseType "Wool Shoes"; Rarity Rare; Width 2; Height 2; }
        DeepSearch S5(0.0, "Betrayal Veiled Mods Small 2", "exoticmods;smallveil2") { BaseType "Driftwood Wand"; Rarity Rare; Width 1; Height 3; }

        VeilMods(S4, "SD", "Veiled - Small Items: 2x2");
        VeilMods(S5, "SD", "Veiled - Small Items: 1x4");

        VeilMods([0.0, "Betrayal Veiled Mods", "exoticmods;veilrest"], "SD", "Veiled - Remaining Items");

        // new tiers
        Conditional("?VeiledModsNewTiers") { Show; Identified True; SetFontSize 45; SetBorderColor 0 240 190 240; PlayEffect White Temp; MinimapIcon 2 White Hexagon; HasExplicitMod "Veil"; }
        ElementAdder_Tier("?VeiledModsNewTiers", "VeilModTierList");
    }

    Section("Linked Items", "Fusing") {
        QuickUI([0.0, "Top Tier 6 Links", "6l;hightier"], "SH", ["Mirrored", "Corrupted", "ItemLevel", "Rarity"], "6-Links: Best", ["gear", "SO"]);
        QuickUI([0.0, "6 links (height 4)", "6l;others"], "DS", ["Corrupted"], "6-Links: Others");
        QuickUI([0.0, "Endgame 5 links b", "socketslinks;5links"], "SD", ["AreaLevel", "SixSocketClasses", "ItemType"], "5-Links: Endgame");
        QuickUI([0.0, "68+ 4 Links", "normalcraft->lowstrict;earlyendgame4link"], "SD", ["AreaLevel", "FourPlusSocketClasses", "Rarity"], "4-Links: Early Endgame ");
    }

    Section("Crafting", "Regalia") {
        Description("High level, specific crafting bases are in high demand early in the league and can be useful in SSF environments. This section handles non-influenced versions of these items.");

        Title("Control IF and HOW a tier is shown");
        Section("Decorators (generic crafting bases)") {
            Description("Decorators highlight specific characteristics of an item, by changing the appearance, without deciding whether it is hidden or shown.");
            QuickUI([1.0, "Endgame crafting deco rare ilvl 86", "decorator->craftingrare;raredecoratorilvl86"], "SD", ["ItemLevel"], "Decorator: ItemLevel 86+ rares");
            QuickUI([1.0, "Endgame crafting deco rare ilvl 84", "decorator->craftingrare;raredecoratorilvl84"], "SD", ["ItemLevel"], "Decorator: ItemLevel 84+ rares");
            QuickUI([1.0, "Endgame crafting deco rare ilvl 75", "decorator->craftingrare;raredecoratorilvl75"], "SD", ["ItemLevel"], "Decorator: ItemLevel 75+ rares");
            QuickUI([1.0, "Endgame crafting deco rare enhancer gear", "decorator->craftingrare;raredecoratorgear"], "SD", ["ItemLevel"], "Decorator: Rare gear");
            QuickUI([1.0, "Endgame crafting deco rare enhancer jewelery", "decorator->craftingrare;raredecoratorjwlry"], "SD", ["ItemLevel"], "Decorator: Rare jewellery");
            QuickUI([1.0, "Endgame crafting deco normal", "decorator->craftingrare;normaldecorator"], "SD", ["ItemLevel"], "Decorator: Normal items");
            QuickUI([1.0, "Endgame crafting deco normal trinkets", "decorator->craftingrare;normaldecoratorjwlry"], "SD", ["ItemLevel"], "Decorator: Normal trinkets");
        }

        Function RarityCraftBox ($s, $text) { QuickUI($s, "SD", ["ItemLevel", "Rarity", "Quality"], $text); }

        DeepSearch T1(3.0, "86 normal crafting bases T1", "normalcraft->i86;t1") { ItemLevel 86; Rarity Normal; BaseType "Steel Ring"; }
        DeepSearch T1(3.0, "84 normal crafting bases T1", "normalcraft->i84;t1") { ItemLevel 84; Rarity Normal; BaseType "Steel Ring"; }
        DeepSearch T1(3.0, "low normal crafting bases T1", "normalcraft->rest;t1") { ItemLevel 80; Rarity Normal; BaseType "Steel Ring"; }

        DeepSearch T2(3.0, "86 normal crafting bases T2", "normalcraft->i86;t2") { ItemLevel 86; Rarity Normal; BaseType "Bone Helmet"; }
        DeepSearch T2(3.0, "84 normal crafting bases T2", "normalcraft->i84;t2") { ItemLevel 84; Rarity Normal; BaseType "Bone Helmet"; }
        DeepSearch T2(3.0, "low normal crafting bases T2", "normalcraft->rest;t2") { ItemLevel 80; Rarity Normal; BaseType "Bone Helmet"; }

        DeepSearch T3(3.0, "86 normal crafting bases T3", "normalcraft->i86;t3") { ItemLevel 86; Rarity Normal; BaseType "Lion Pelt"; }
        DeepSearch T3(3.0, "84 normal crafting bases T3", "normalcraft->i84;t3") { ItemLevel 84; Rarity Normal; BaseType "Lion Pelt"; }
        DeepSearch T3(3.0, "low normal crafting bases T3", "normalcraft->rest;t3") { ItemLevel 80; Rarity Normal; BaseType "Lion Pelt"; }

        Section("Enable&Disable Tiers") {
            RarityCraftBox(T1:0, "T1 - ILVL86+");
            RarityCraftBox(T1:1, "T1 - ILVL84+");
            RarityCraftBox(T1:2, "T1 - ILVL68+");
            RarityCraftBox(T2:0, "T2 - ILVL86+");
            RarityCraftBox(T2:1, "T2 - ILVL84+");
            RarityCraftBox(T2:2, "T2 - ILVL68+");
            RarityCraftBox(T3:0, "T3 - ILVL86+");
            RarityCraftBox(T3:1, "T3 - ILVL84+");
            RarityCraftBox(T3:2, "T3 - ILVL68+");
        }

        Title("Control WHAT items are in what tier:");
        BaseTypeMatrix(true, "Tier 1", T1, "Tier 2", T2, "Tier 3", T3);

        // FYI: only available on beta during development
//        MultiTierThresholdEditor("ItemLevel");
    }

    Section("Overquality, Synthesised and Others", "Lion") {

        Title("Early League Options");

        Section("Early endgame harvest bases") {
            QuickUI([1.0, "Early endgame harvest crafting bases", "normalcraft->extra;any"], "SH", ["ItemLevel", "Rarity", "Quality"], "Early Endgame Crafting Bases", ["Gear", "SO"]);
        }

        Title("Overquality (21+)");

        Section("Overquality Armours") {
            Description("Items can rarely drop uncorrupted with 20-30 quality. These rules look for the right combination of basetype, level and quality.");

            Search Body(0.0, "Overquality Body T1", "crafting->qualityperfection;body1") { }
            Search Boot(0.0, "Overquality Boots T1", "crafting->qualityperfection;boots1") { }
            Search Shield(0.0, "Overquality Shields T1", "crafting->qualityperfection;shields1") { }
            Search Glove(0.0, "Overquality Gloves T1", "crafting->qualityperfection;gloves1") { }
            Search Helm(0.0, "Overquality Helmets T1", "crafting->qualityperfection;helmets1") { }

            Search Body(0.0, "Overquality Body T2", "crafting->qualityperfection;body2") { }
            Search Boot(0.0, "Overquality Boots T2", "crafting->qualityperfection;boots2") { }
            Search Shield(0.0, "Overquality Shields T2", "crafting->qualityperfection;shields2") { }
            Search Glove(0.0, "Overquality Gloves T2", "crafting->qualityperfection;gloves2") { }
            Search Helm(0.0, "Overquality Helmets T2", "crafting->qualityperfection;helmets2") { }

            Search Body(0.0, "Overquality Body T3", "crafting->qualityperfection;body3") { }
            Search Boot(0.0, "Overquality Boots T3", "crafting->qualityperfection;boots3") { }
            Search Shield(0.0, "Overquality Shields T3", "crafting->qualityperfection;shields3") { }
            Search Glove(0.0, "Overquality Gloves T3", "crafting->qualityperfection;gloves3") { }
            Search Helm(0.0, "Overquality Helmets T3", "crafting->qualityperfection;helmets3") { }

            Title("High Quality and Perfection");
            QuickUI(0, "SH", ["Corrupted", "ItemLevel", "BaseDefencePercentile", "Rarity", "Quality"], "Qual: 30, High Base, Type: Body");
            QuickUI(1, "SH", ["Corrupted", "ItemLevel", "BaseDefencePercentile", "Rarity", "Quality"], "Qual: 30, High Base, Type: Boots");
            QuickUI(2, "SH", ["Corrupted", "ItemLevel", "BaseDefencePercentile", "Rarity", "Quality"], "Qual: 30, High Base, Type: Shields");
            QuickUI(3, "SH", ["Corrupted", "ItemLevel", "BaseDefencePercentile", "Rarity", "Quality"], "Qual: 30, High Base, Type: Gloves");
            QuickUI(4, "SH", ["Corrupted", "ItemLevel", "BaseDefencePercentile", "Rarity", "Quality"], "Qual: 30, High Base, Type: Helmets");
            Title("High Quality, no Perfection");
            QuickUI(5, "SH", ["Corrupted", "ItemLevel", "BaseDefencePercentile", "Rarity", "Quality"], "Qual: 29+, Type: Body");
            QuickUI(6, "SH", ["Corrupted", "ItemLevel", "BaseDefencePercentile", "Rarity", "Quality"], "Qual: 29+, Type: Boots");
            QuickUI(7, "SH", ["Corrupted", "ItemLevel", "BaseDefencePercentile", "Rarity", "Quality"], "Qual: 29+, Type: Shields");
            QuickUI(8, "SH", ["Corrupted", "ItemLevel", "BaseDefencePercentile", "Rarity", "Quality"], "Qual: 29+, Type: Gloves");
            QuickUI(9, "SH", ["Corrupted", "ItemLevel", "BaseDefencePercentile", "Rarity", "Quality"], "Qual: 29+, Type: Helmets");
            Title("Quality, no Perfection");
            QuickUI(10, "SH", ["Corrupted", "ItemLevel", "BaseDefencePercentile", "Rarity", "Quality"], "Qual: 24+, Type: Body");
            QuickUI(11, "SH", ["Corrupted", "ItemLevel", "BaseDefencePercentile", "Rarity", "Quality"], "Qual: 24+, Type: Boots");
            QuickUI(12, "SH", ["Corrupted", "ItemLevel", "BaseDefencePercentile", "Rarity", "Quality"], "Qual: 24+, Type: Shields");
            QuickUI(13, "SH", ["Corrupted", "ItemLevel", "BaseDefencePercentile", "Rarity", "Quality"], "Qual: 24+, Type: Gloves");
            QuickUI(14, "SH", ["Corrupted", "ItemLevel", "BaseDefencePercentile", "Rarity", "Quality"], "Qual: 24+, Type: Helmets");

            BaseTypeMatrix(true, "Tier 1", Body, Boot, Shield, Glove, Helm);
        }

        Section("Overquality Weapons") {
            Search T1(0.0, "Perfect weapons tier 1, high quaity", "crafting->qualityperfection;weapont1q1") { }
            Search T2(0.0, "Perfect weapons tier 2, high quaity", "crafting->qualityperfection;weapont2q1") { }
            Search T1(0.0, "Perfect weapons tier 1, low quaity", "crafting->qualityperfection;weapont1q2") { }
            Search T2(0.0, "Perfect weapons tier 2, low quaity", "crafting->qualityperfection;weapont2q2") { }
            QuickUI(0, "SH", ["Corrupted", "ItemLevel", "Rarity", "Quality"], "Tier 1, 29+ Quality");
            QuickUI(1, "SH", ["Corrupted", "ItemLevel", "Rarity", "Quality"], "Tier 2, 29+ Quality");
            QuickUI(2, "SH", ["Corrupted", "ItemLevel", "Rarity", "Quality"], "Tier 1, 24+ Quality");
            QuickUI(3, "SH", ["Corrupted", "ItemLevel", "Rarity", "Quality"], "Tier 2, 24+ Quality");
            BaseTypeMatrix(true, "Tier 1", T1, "Tier 2", T2);
        }

        Title("Special Properties");

        Section("Synthesised items") {
            QuickUI([0.0, "Synthesised items T1", "exotic->synthesised;synthselected"], "SD", ["ItemLevel", "DropLevel", "Identified", "BTM", "Quality"], "Synthesised - Best Bases");
            QuickUI([0.0, "Synthesised items classes", "exotic->synthesised;synthclasses"], "SD", ["AllGearClassesPlusFlaskJewelMap", "ItemLevel", "DropLevel", "Identified", "Quality"], "Synthesises - Important Classes");
            QuickUI([0.0, "Synthesised items", "exotic->synthesised;synthrandom"], "SD", ["AllGearClassesPlusFlaskJewelMap", "ItemLevel", "DropLevel", "Identified", "Quality"], "Synthesised - Others");
        }

        Section("Economy-Based Expensive 86+ bases", null, "E") {
            TierListToolBar();
            Description("This section contains all bases that are currently worth around 10++ chaos, no matter the rarity. Only atlas bases (and some exceptions) are allowed in this section.");
            QuickUI([0.0, "Expensive Crafting Bases", "crafting->expensive;any"], "SH", ["ItemLevel", "Rarity", "Quality"], "", ["Gear", "SO"]);
        }

        Section("Noteworthy Corrupted Items") {
            Description("ItemLevel 80+ quivers can roll valuable chain corruptions. This rule helps detecting these.");
            QuickUI([0.0, "Corrupted rare quivers", "exotic->corruptions;singlecorruptedquivers"], "SD", ["ItemLevel", "Rarity", "AllGearClassesPlusJewel"], "Single corrupted rare quivers");
            QuickUI([0.0, "Double corrupted items", "exotic->corruptions;doublecorruptedjwlry"], "SD", ["ItemLevel", "Rarity", "AllGearClassesPlusJewel"], "2x-Corrupted handpicked items");
            QuickUI([0.0, "Double corrupted big items", "exotic->corruptions;doublecorruptedany"], "SD", ["ItemLevel", "Rarity", "AllGearClassesPlusJewel"], "2x-Corrupted remaining items");
        }

        Title("Others");
        Section("Other Exotic Scenarios") {
            QuickUI([0.0, "3 White sockets", "miscendgamerules;whitesocketweapons1h"], "SD", ["SocketedGearClasses", "ItemLevel", "Corrupted"], null, ["Gear", "SAO"]);
            QuickUI([0.0, "6 White sockets", "socketslinks;whitesocketweapons2h"], "SD", ["SixSocketClasses", "ItemLevel", "Corrupted"], null, ["Gear", "SAO"]);

            Description("This is mostly relevant for heist-based drops");
            QuickUI([0.0, "Enchanted items", "exotic->enchanted;exotic"], "SH", ["Corrupted", "ItemLevel", "DropLevel", "Rarity"]);

            Description("30% Quality items can sometimes be dropped by conversion rares or in heist encounters");
            QuickUI([0.0, "High Quality items", "normalcraft->lowstrict;overquality"], "SHD", ["Quality", "ItemLevel", "DropLevel", "AllGearClasses"]);

            Function VeilMods($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["AllGearClasses", "DropLevel", "ItemLevel", "Mods"], $text); }
            Description("Items that have a fractured and veiled mod. It is NOT garantueed that the veiled mod is the fractured one");
            VeilMods([0.0, "Betrayal Veiled Fractured Mods", "exoticmods;fracturedveiled"], "SH", "Fractured+Veiled Items");
            QuickUI([0.0, "Fractured items, classes", "exotic->fractured;fractspecial"], "SH", ["AllGearClassesPlusFlaskJewelMapHeist", "ItemLevel", "DropLevel", "Identified"], "Fractured Exotic Classes");

            Description("Necropolis items with Necropolis-Exclusive mods are highlighted using this rule");
            QuickUI([0.0, "Identified Mods: Necropolis", "exoticmods;necropoliscraft"], "SH", []);
        }
    }

    Section("League-specific items and mods", "Talisman") {

        Title("Exotic Bases");

        Section("Talismans", "Talisman") {
            Function TalismanUI($s) { QuickUI($s, "SH", ["ItemLevel", "Mods", "Talisman"]); }
            TalismanUI([1.0, "Talismans T1 Attack", "rare->exotic->talisman;t1attacktalisman"]);
            TalismanUI([1.0, "Talismans T1 Caster", "rare->exotic->talisman;t1castertalisman"]);
            TalismanUI([1.0, "Talismans T1 DoT", "rare->exotic->talisman;t1dottalisman"]);
            TalismanUI([1.0, "Talismans T2 Stats", "rare->exotic->talisman;t2stattalisman"]);
            QuickUI([1.0, "Exotic Talisman Bases", "exoticbases;exotictalismanbases"], "SH", ["ItemLevel", "Talisman"]);
            QuickUI([1.0, "Talismans T3 Bases", "rare->exotic->talisman;t3decenttypetalisman"], "SH", ["ItemLevel", "Talisman"]);
            QuickUI([1.0, "Remaining Talismans", "rare->exotic->talisman;any"], "SH", ["ItemLevel"]);
        }

        Section("Expedition Ward-Bases", "ExpeditionArtifact") {
            // Runic Helm, Runic Crest, Runic Crown
            Description("Expedition introduced a new defence mechanic, Ward, in addition to the traditional ones like Armour or Evasion. Ward can only be found on these new BaseTypes:");
            QuickUI([0.0, "Expedition Ward Bases", "exoticbases;exoticexpeditionbases"], "SH", ["ItemLevel", "Rarity", "ExpeditionWardBases"]);
        }

        Section("Breach Grasping Mail", "BreachSplinter") {
            QuickUI([1.0, "Grasping Mail", "exoticbases;exoticbasesmisc"], "SD", ["Rarity", "ItemLevel"]);
        }

        Section("Stygian Vise") {
            QuickUI([0.0, "Stygian Vise, High ItemLevel", "exoticbaseslower;stygian86"], "SH", ["ItemLevel"]);
            QuickUI([0.0, "Stygian Vise", "exoticbaseslower;stygian"], "SH", []);
        }

        Section("Sacrificial Garbs", "SacrificeAtMidnight") {
            QuickUI([0.0, "Exotic Bases", "exoticbaseslower;exoticsacrificial"], "SD", ["ItemLevel", "Rarity", "Corrupted"], null, ["Gear", "OS"]);
        }

        Section("Ritual BaseTypes", "BloodFilledRitualVessel") {
            Search S2(0.0, "Ritual BaseTypes") { BaseType "Nexus Gloves"; Rarity Normal; }
            QuickUI(S2, "SD", ["RitualBases", "Rarity", "ItemLevel"]);
        }

        Section("Heist Experimented BaseType", "HeistExpBase") {
            Function ContractList($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["ItemLevel"], $text, ["HeistExpBases", "O"]); }

            ContractList([0.0, "Experimented BaseTypes Heist T1", "exoticbases;exoticheistbases"], "SD", "Experimented BaseTypes");

            Conditional("?HeistExpBasesNewTiers") { Show; SetTextColor 210 178 135; SetBackgroundColor 0 0 0 255; SetBorderColor 213 159 100 200; SetFontSize 42; }
            ElementAdder_Tier("?HeistExpBasesNewTiers", "ContractList");

            Conditional("?HeistExpBasesNewTiersHidden") { }
            ElementAdder_Tier("?HeistExpBasesNewTiersHidden", null, true, "HeistExpBases", "OH");
        }

        Title("Special Properties");

        Section("Abyss socketed items", "AbyssJewel") {
            Search S0(0.0, "Abyss Socketed Rares") { BaseType "Glorious Plate"; SocketGroup "RA"; Rarity Rare; }
            QuickUI(S0, "SD", ["DropLevel", "ItemLevel", "SocketedGearClasses"]);
        }

        Section("Blight Anointed Items", "BlightOil") {
            QuickUI([0.0, "Blight Annointed Items", "exotic->enchanted;anointedamulets"], "SHD", ["ItemLevel", "DropLevel", "Corrupted", "JewelleryClasses"], "Anointed Amulets");

//            Warning("The rules below ONLY work for annointed rings. As of now PoE filters can't distinguish amulet anointments.");
//            QuickUI([0.0, "Extractable Gold Blight Annointments", "exotic->enchanted;enchantedringsgoldoil"], "SD", "", "Gold Oil Ring Anointments");
//            QuickUI([0.0, "Extractable Silver Blight Annointments", "exotic->enchanted;enchantedringssilveroil"], "SD", "", "Silver Oil Ring Anointments");
            QuickUI([0.0, "Anointed Rings", "exotic->enchanted;anointedrings"], "SD");
        }

        Title("Exotic Identified Mods");

        Section("Identified Mods: Incursion", "IncursionHelmet") {
            Function IncursionModUI($s, $title) { QuickUI($s, "SD", ["AllGearClasses", "Mods", "ItemLevel", "DropLevel"], $title); }
            IncursionModUI([0.0, "Incursion Boots Mods", "exoticmods;incursionspeedtraps"], "Boots Mods");
            IncursionModUI([0.0, "Incursion Body Mods", "exoticmods;incursionlifechest"], "Body Mods");
            IncursionModUI([0.0, "Incursion Caster Mods", "exoticmods;incursioncaster"], "Caster Weapon&Shields");
            IncursionModUI([0.0, "Incursion Summoner Mods", "exoticmods;incursionminion"], "Summoner Weapon");
            IncursionModUI([0.0, "Incursion Weapon Mods A", "exoticmods;incursionelemental"], "Elemental Weapon");
            IncursionModUI([0.0, "Incursion Weapon Mods B", "exoticmods;incursionattack"], "Attack Weapon");
            IncursionModUI([0.0, "Incursion Ring Mods", "exoticmods;incursionjwlry"], "Jewellery Mods");
            IncursionModUI([0.0, "Incursion Glove Mods", "exoticmods;incursionglovehelm"], "Glove&Helmets");
            IncursionModUI([0.0, "Incursion Magic Mods", "exoticmods;incursionmagic"], "Magic Mods (Incursion)");
            IncursionModUI([0.0, "Incursion Mod Item rare", "exoticmods;incursionrandom"], "Other Rare Incursion Items");
        }

        Section("Identified Mods: Delve", "DelveResonator") {
            DeepSearch S2(0.0, "Fractured Delve Mods", "exoticmods;delvefractured") { }
            QuickUI(S2, "SD", ["Mods", "Rarity", "AllGearClasses"], null, ["Gear", "SAO"]]);
            QuickUI([0.0, "Delve mods T1", "exoticmods;delve"], "SD", ["Mods", "Rarity", "AllGearClasses"], null, ["Gear", "ASO"]]);
            QuickUI([0.0, "Delve mods T2", "exoticmods;crafting"], "SD", ["Mods", "Rarity", "AllGearClasses"], null, ["Gear", "OAS"]]);
        }

        Section("Identified Mods: Essence", "Essence") {
            QuickUI([0.0, "Essence Mods", "exoticmods;essence"], "SD", ["ItemLevel", "AllGearClasses", "DropLevel"], "", ["Item Mods", "S", "HasExplicitMod"]);
        }

        Section("Identified Mods: Bestiary", "BestiaryOrb") {
            QuickUI([1.0, "Assorted Bestiary Mod Items", "exoticmods;bestiaryvaluable"], "SD", ["AllGearClasses", "DropLevel", "ItemLevel", "Mods"]);
            QuickUI([0.0, "Bestiary Mod Items", "exoticmods;bestiaryother"], "SD", ["AllGearClasses", "DropLevel", "ItemLevel", "Mods"]);
        }

        Section("Identified Mods: Warband", "Warband")
        {
            Description("Warband bases are magic items rarely dropped by Warbands. These bases drop identified and have a special affix and can only appear on a specific class. Hover over the wisdom scroll to find out more.", "Warband Items", "Redblade (fire) warbands may drop a helmet with the '10% physical damage taken is converted to fire damage'. The Brinerot may drop gloves with the '% increased damage while using a flask' mod and the Mutewind may drop 'Cannot be frozen' boots. Chaos warbands may drop weapons with a single elemental penetration bonus. These items are fairly exotic and may be used for crafting. Please note that if you put the entry on 'Hide', you can click 'alt' to see hidden items, to check if the warband dropped any special magic gear upon their demise. This is convenient, because identified items can also drop due to several sextant and leaguestone effects.");
            QuickUI([0.0, "Warband items", "exoticmods;warband"], "SD", ["ItemLevel", "AllGearClasses", "Mods"]);
        }

        Title("Currently Unobtainable");

        Section("Currently Unobtainable", "JuggernautsUrsineCharmoftheChampion") {
            QuickUI([0.0, "Items with Crucible passive tree", "exotic->crucible;crucibleany"], "SH", ["DropLevel", "Rarity", "ItemLevel"]);
            QuickUI([0.0, "Kalandra Lake exclusive Bases", "exoticbases;exoticlakekala"], "SH", ["Rarity", "ItemLevel"], null, ["Gear", "OS"]);
        }
    }

     Section ("Influenced Items", "Voidorb", "E") {
        Function BaseTypeBox($s, $text, $descr = "") { QuickUI($s, "SD", ["ItemLevel", "Quality"], $text, ["Gear", "DO"], $descr); }

        Description("To add more influenced item rules to the filter, use the 'Add additional Rules' section of the Customizer to do so.");

        Section("Common") {
            Description("These rules have priority over other tier 1 or tier 2 rules respectively.");

            Search T1(0.0, "Common Influenced Rares - Tier 1", "influenced->common;t1_exo") { }
            Search T2(0.0, "Common Influenced Rares - Tier 2", "influenced->common;t2_exo") { }

            QuickUI(T1, "SD", ["ItemLevel", "Quality"], "Top influenced bases", [], "Extremely exclusive drop-restricted bases, such as heist and ritual bases.");
            QuickUI(T2, "SD", ["ItemLevel", "Quality"], "Exclusive atlas bases", []);

            BaseTypeMatrix(true, "Tier 1", T1, "Tier 2", T2);

            Divider();

            QuickUI([0.0, "Common Influenced Rares - Tier 2 High ItemLevel", "influenced->common;t2_86"], "SD", ["ItemLevel", "BTM"], "High level meta bases");
        }

        Section("Searing Exarch") {
            Function EldrInflFunc($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["AllGearClasses", "HasSearingExarchImplicit", "HasEaterOfWorldsImplicit", "Rarity", "ItemLevel", "DropLevel", "Corrupted"], $text, ["Gear", "AOS"]); }

            QuickUI([0.0, "Good Exarch Influence Bases", "rare->exarch;anyhigh"], "SD", ["HasSearingExarchImplicit", "HasEaterOfWorldsImplicit", "Rarity", "ItemLevel", "DropLevel", "Corrupted", "BTM", "Quality"], "T1 - Exarch");
            QuickUI([0.0, "Remaining Exarch Influenced Items", "rare->exarch;any"], "SD", ["AllGearClasses", "HasSearingExarchImplicit", "HasEaterOfWorldsImplicit", "Rarity", "ItemLevel", "DropLevel", "Corrupted", "Quality"], "T2 - Exarch");
            Conditional("?EldrInflNewTiers") { Show; Rarity Normal Magic Rare; SetTextColor 0 0 0 255; SetBackgroundColor 145 215 230 225; SetBorderColor 0 100 150 255; SetFontSize 40; PlayAlertSound 2 300; }
            ElementAdder_Tier("?EldrInflNewTiers", "EldrInflFunc");
        }

        Section("Eater of Worlds") {
            Function EldrInflFunc($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["AllGearClasses", "HasSearingExarchImplicit", "HasEaterOfWorldsImplicit", "Rarity", "ItemLevel", "DropLevel", "Corrupted"], $text, ["Gear", "AOS"]); }

            QuickUI([0.0, "Good Eater of Worlds Influence Bases", "rare->eater;anyhigh"], "SD", ["HasSearingExarchImplicit", "HasEaterOfWorldsImplicit", "Rarity", "ItemLevel", "DropLevel", "Corrupted", "BTM", "Quality"], "T1 - Eater of Worlds");
            QuickUI([0.0, "Remaining Eater of Worlds Influenced Items", "rare->eater;any"], "SD", ["AllGearClasses", "HasSearingExarchImplicit", "HasEaterOfWorldsImplicit", "Rarity", "ItemLevel", "DropLevel", "Corrupted", "Quality"], "T2 - Eater of Worlds");
        }

        Section("Shaper Items", null, "E") {
            BaseTypeBox([0.0, "Shaper items T1 ilvl 82", "rare->shaper;t11"], "Tier 1-1 Shaper");
            BaseTypeBox([0.0, "Shaper items T1 ilvl 84", "rare->shaper;t12"], "Tier 1-2 Shaper");
            BaseTypeBox([0.0, "Shaper items T1 ilvl 85", "rare->shaper;t13"], "Tier 1-3 Shaper");
            BaseTypeBox([0.0, "Shaper items T2 Bases a", "rare->shaper;t21"], "Tier 2-1 Shaper");
            BaseTypeBox([0.0, "Shaper items T2 Bases b", "rare->shaper;t22"], "Tier 2-2 Shaper");
        }

        Section("Elder Items", null, "E") {
            BaseTypeBox([0.0, "Elder items T1 ilvl 82", "rare->elder;t11"], "Tier 1-1 Elder");
            BaseTypeBox([0.0, "Elder items T1 ilvl 84", "rare->elder;t12"], "Tier 1-2 Elder");
            BaseTypeBox([0.0, "Elder items T1 ilvl 85", "rare->elder;t13"], "Tier 1-3 Elder");
            BaseTypeBox([0.0, "Elder items T2 Bases a", "rare->elder;t21"], "Tier 2-1 Elder");
            BaseTypeBox([0.0, "Elder items T2 Bases b", "rare->elder;t22"], "Tier 2-2 Elder");
        }

        Section("Hunter Items", null, "E") {
            BaseTypeBox([0.0, "Hunter - T1-1", "rare->hunter;t11"], "Tier 1-1 Hunter");
            BaseTypeBox([0.0, "Hunter - T1-2", "rare->hunter;t12"], "Tier 1-2 Hunter");
            BaseTypeBox([0.0, "Hunter - T1-3", "rare->hunter;t13"], "Tier 1-3 Hunter");
            BaseTypeBox([0.0, "Hunter - T2-1", "rare->hunter;t21"], "Tier 2-1 Hunter");
            BaseTypeBox([0.0, "Hunter - T2-2", "rare->hunter;t22"], "Tier 2-2 Hunter");
        }

        Section("Crusader Items", null, "E") {
            BaseTypeBox([0.0, "Crusader - T1-1", "rare->crusader;t11"], "Tier 1-1 Crusader");
            BaseTypeBox([0.0, "Crusader - T1-2", "rare->crusader;t12"], "Tier 1-2 Crusader");
            BaseTypeBox([0.0, "Crusader - T1-3", "rare->crusader;t13"], "Tier 1-3 Crusader");
            BaseTypeBox([0.0, "Crusader - T2-1", "rare->crusader;t21"], "Tier 2-1 Crusader");
            BaseTypeBox([0.0, "Crusader - T2-2", "rare->crusader;t22"], "Tier 2-2 Crusader");
        }

        Section("Redeemer Items", null, "E") {
            BaseTypeBox([0.0, "Redeemer - T1-1", "rare->redeemer;t11"], "Tier 1-1 Redeemer");
            BaseTypeBox([0.0, "Redeemer - T1-2", "rare->redeemer;t12"], "Tier 1-2 Redeemer");
            BaseTypeBox([0.0, "Redeemer - T1-3", "rare->redeemer;t13"], "Tier 1-3 Redeemer");
            BaseTypeBox([0.0, "Redeemer - T2-1", "rare->redeemer;t21"], "Tier 2-1 Redeemer");
            BaseTypeBox([0.0, "Redeemer - T2-2", "rare->redeemer;t22"], "Tier 2-2 Redeemer");
        }

        Section("Warlord Items", null, "E") {
            BaseTypeBox([0.0, "Warlord - T1-1", "rare->warlord;t11"], "Tier 1-1 Warlord");
            BaseTypeBox([0.0, "Warlord - T1-2", "rare->warlord;t12"], "Tier 1-2 Warlord");
            BaseTypeBox([0.0, "Warlord - T1-3", "rare->warlord;t13"], "Tier 1-3 Warlord");
            BaseTypeBox([0.0, "Warlord - T2-1", "rare->warlord;t21"], "Tier 2-1 Warlord");
            BaseTypeBox([0.0, "Warlord - T2-2", "rare->warlord;t22"], "Tier 2-2 Warlord");
        }

        Section("Remaining Influenced Items") {
            QuickUI([0.0, "Remaining High Level Influenced Items", "rare->any;anytoplevel"], "SHD", ["HasInfluence", "ItemLevel", "DropLevel", "AllGearClasses", "Quality"], "Remaining High Level Influenced");
            QuickUI([0.0, "Small Influenced Items", "rare->any;anytrinket"], "SDH", ["HasInfluence", "ItemLevel", "DropLevel", "AllGearClasses", "Quality"]);
            QuickUI([0.0, "Remaining new Influenced Items", "rare->any;any"], "SHD", ["HasInfluence", "ItemLevel", "DropLevel", "AllGearClasses", "Quality"], "Remaining Influenced Rares");
        }
    }
}

Chapter() {
    SectionTitle("Other Endgame Gear");

    Section("Chancing Bases", "Skyforth") {
        Description("Chancing is considered to be very inefficient by most PoE players, but some enjoy it a lot. Boss drops, recipe-exclusive or league exclusive drops can not be chanced.");

        QuickUI([0.0, "High Quality Chancing", "crafting->qualityperfection;qualchancing"], "SH", ["AreaLevel", "Quality", "BaseDefencePercentile"], $text, ["gearPlusFlasks", "SO"]);

        Function ChancingList($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["AreaLevel"], $text, ["gearPlusFlasks", "SO"]); }

        ChancingList([1.0, "Chancing bases (normal)", "chancing;t2"], "SD", "Meta-Uniques Chancing Bases:");
        ChancingList([1.0, "Chancing bases (leather belt HH)", "chancing;hh"], "SD", "Lottery-Tier Chancing Targets:");

        Conditional("?ChancingBaseNewTiers") { }
        ElementAdder_Tier("?ChancingBaseNewTiers", "ChancingList");
    }

    Section("Flasks", "Flask") {
        Description("High item level (up to level 85) flasks can roll the highest tier mods.");
        Section("High Level Utility Flasks", "Flask") {
            QuickUI([0.0, "High Level Flasks - iLvl 85", "endgameflasks;utility85"], "SHD", ["Utility Flasks", "ItemLevel", "Quality", "AreaLevel", "RarityNM", "Identified"]);
            QuickUI([0.0, "High Level Flasks - iLvl 84", "endgameflasks;utility84"], "SHD", ["Utility Flasks", "ItemLevel", "Quality", "AreaLevel", "RarityNM", "Identified"]);
            QuickUI([0.0, "High Level Flasks - iLvl 82", "endgameflasks;utility82"], "SHD", ["Utility Flasks", "ItemLevel", "Quality", "AreaLevel", "RarityNM", "Identified"]);
            QuickUI([0.0, "Early mapping ultility flasks", "endgameflasks;earlymappingflasks"], "SHD", ["Utility Flasks", "AreaLevel", "RarityNM", "Identified", "Quality"]);
            QuickUI([0.0, "Endgame utility flasks", "endgameflasks;anyutility"], "SHD", ["Utility Flasks", "AreaLevel", "RarityNM", "Identified"], "Other Endgame Utility Flasks");

            Function EndgameUtilityFlaskCustomRuleUI ($s, $shd = "SHD", $title)
            {
                QuickUI($s, $shd, ["Utility Flasks", "ItemLevel", "Quality", "AreaLevel", "RarityNM", "Identified"], $title);
            }

            Conditional("?EndgameUtilityFlaskCustomRules") { Show; Class "Flask"; Rarity Normal Magic; };
            ElementAdder_Tier("?EndgameUtilityFlaskCustomRules", "EndgameUtilityFlaskCustomRuleUI");
        }

        Section("Endgame Life & Mana Flasks", "FlaskLife") {
            QuickUI([0.0, "High Level Life/Mana Flasks - iLvl 82", "endgameflasks;lifemana82"], "SHD", ["ItemLevel", "Quality", "AreaLevel", "RarityNM", "Identified"], "Perfect Level Life&Mana Flasks", ["Flasks", "SOA"]);

            QuickUI([0.0, "Early mapping life & mana flasks", "endgameflasks;earlymappinglifemana"], "SHD", ["AreaLevel", "RarityNM", "Identified", "Quality"], "Early Endgame Life&Mana Flasks", ["allFlasks", "SO"]);

            Function EndgameLifeManaFlaskCustomRuleUI ($s, $shd = "SHD", $title)
            {
                QuickUI($s, $shd, ["ItemLevel", "Quality", "AreaLevel", "RarityNM", "Identified"], $title, ["allFlasks", "SO"]);
            }

            Conditional("?EndgameLifeManaFlaskCustomRules") { Show; Class "Flask"; Rarity Normal Magic; };
            ElementAdder_Tier("?EndgameLifeManaFlaskCustomRules", "EndgameLifeManaFlaskCustomRuleUI");
        }

        Section("Exceptional Quality Flasks", "Glassblower") {
            QuickUI([0.0, "High Level Flasks - Max Quality Corruption", "endgameflasks;overqualcorrupted"], "SH", ["RarityNM", "Utility Flasks", "ItemLevel", "Quality"], "Over-Quality Corrupted Flasks");

            QuickUI([0.0, "Exceptional Quality Utility Flasks", "endgameflasks;overqualutil1"], "SH", ["ItemLevel", "Quality", "RarityNM", "Utility Flasks"], "Over-Quality Utility Flasks");
            QuickUI([0.0, "High Quality Utility Flasks", "endgameflasks;overqualutil2"], "SH", ["ItemLevel", "Quality", "RarityNM", "Utility Flasks"], "Over-Quality Utility Flasks");

            QuickUI([0.0, "Exceptional Quality Life Flasks", "endgameflasks;overquallife1"], "SH", ["ItemLevel", "Quality", "RarityNM"], "Over-Quality Life&Mana", ["allFlasks", "SO"]);
            QuickUI([0.0, "High Quality Life Flasks", "endgameflasks;overquallife2"], "SH", ["ItemLevel", "Quality", "RarityNM"], "Over-Quality Life&Mana", ["allFlasks", "SO"]);
        }

        // todo: new rule
    }

    Section("Jewels", "CobaltJewel") {

        Section("Cobalt, Viridian, Crimson Jewels") {
            Search S1(0.0, "Rare Jewels") { BaseType "Crimson Jewel"; Rarity Rare; }
            QuickUI([0.0, "Magic Jewels", "jewels->generic;anymagic"], "SH", ["Jewels", "ItemLevel"], "Generic Magic Jewels", [], "Magic jewels for crafting and corrupting.");
            QuickUI(0, "SH", ["Jewels", "ItemLevel"], "Generic Rare Jewels", [], "Rare jewels are solid pickups. They're small and can be very valuable.");

            QuickUI([0.0, "Magic Jewels with corrupted implicit", "jewels->special;any"], "SH", ["ItemLevel", "DropLevel", "Corrupted", "Rarity", "CorruptedMods"], "Magic+Corrupted Mod");
            QuickUI([0.0, "ModFiltering: Jewels 2 Corrupted", "jewels->special;1modcorrupted"], "SH", ["ItemLevel", "DropLevel", "Corrupted", "Mods"], "Rare+Corrupted Mod");
            QuickUI([0.0, "ModFiltering: Jewels 3", "jewels->special;1moduncorrupted"], "SH", ["ItemLevel", "DropLevel", "Corrupted", "Mods"], "Identified With Life or ES Mods");
        }

        Section("Abyss Jewels") {
            Description("There are 4 types of jewels, one for each build archetype:<br>- 'Murderous' for melee<br>- 'Searching' for bows/wanders<br>- 'Hypnotic' for spellcasters<br>- 'Ghastly' for summoners", "Abyss Jewels", "Abyss Jewels have itemlevel depending rolls. If you want to craft abyss jewels, it's highly recommended to use ItemLevel 84 material.");

            QuickUI([0.0, "Corrupted Abyss Jewels", "jewels->abyss;corruptedabyssjewel"], "SD", ["Abyss Jewels", "ItemLevel"], "Corrupted Jewels");
            QuickUI([0.0, "Abyss Jewels rare ilvl 86", "jewels->abyss;veryhighrare"], "SH", ["Abyss Jewels", "ItemLevel"], "ILVL 86+ (Rare)");
            QuickUI([0.0, "Abyss Jewels magic ilvl 86", "jewels->abyss;veryhighmagic"], "SH", ["Abyss Jewels", "ItemLevel"], "ILVL 86+ (Magic)");
            QuickUI([0.0, "Abyss Jewels rare ilvl 82", "jewels->abyss;highrare"], "SH", ["Abyss Jewels", "ItemLevel"], "ILVL 82+ (Rare)");
            QuickUI([0.0, "Abyss Jewels magic ilvl 82", "jewels->abyss;highmagic"], "SH", ["Abyss Jewels", "ItemLevel"], "ILVL 82+ (Magic)");
            QuickUI([0.0, "Abyss Jewels rare", "jewels->abyss;anyrare"], "SH", ["Abyss Jewels", "ItemLevel"], "Any Level (Rare)");
            QuickUI([0.0, "Abyss Jewels magic", "jewels->abyss;anymagic"], "SH", ["Abyss Jewels", "ItemLevel"], "Any Level (Magic)");
        }

        Function ClusterJewelTierList_Ench($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["ClusterJewels", "ItemLevel", "EnchantmentPassiveNum", "Rarity"], null, ["ClusterJewelEnchantments", "D", "EnchantmentPassiveNode"], $text); }
        Function ClusterJewelTierList_NoEnch($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["ClusterJewels", "ItemLevel", "EnchantmentPassiveNum", "Rarity"], $text); }

        Section("Cluster Jewels: Top Enchantments", null, "E") {
            Warning("This section is economy based: it's generated based on poe.ninja economy data. This section is not perfect. Hide the general section on your own risk.");

            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl84, 12 Notes", "jewels->clustereco;n12_i84_t1"], "SDH");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl75, 12 Notes", "jewels->clustereco;n12_i75_t1"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl68, 12 Notes", "jewels->clustereco;n12_i68_t1"], "SHD");
            Divider();
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl84, 11 Notes", "jewels->clustereco;n11_i84_t1"], "SDH");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl75, 11 Notes", "jewels->clustereco;n11_i75_t1"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl68, 11 Notes", "jewels->clustereco;n11_i68_t1"], "SHD");
            Divider();
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl84, 10 Notes", "jewels->clustereco;n10_i84_t1"], "SDH");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl75, 10 Notes", "jewels->clustereco;n10_i75_t1"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl68, 10 Notes", "jewels->clustereco;n10_i68_t1"], "SHD");
            Divider();
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl84, 9 Notes", "jewels->clustereco;n9_i84_t1"], "SDH");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl75, 9 Notes", "jewels->clustereco;n9_i75_t1"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl68, 9 Notes", "jewels->clustereco;n9_i68_t1"], "SHD");
            Divider();
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl84, 8 Notes", "jewels->clustereco;n8_i84_t1"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl75, 8 Notes", "jewels->clustereco;n8_i75_t1"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl68, 8 Notes", "jewels->clustereco;n8_i68_t1"], "SHD");
            Divider();
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl84, 6 Notes", "jewels->clustereco;n6_i84_t1"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl75, 6 Notes", "jewels->clustereco;n6_i75_t1"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl68, 6 Notes", "jewels->clustereco;n6_i68_t1"], "SHD");
            Divider();
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl84, 4 Notes", "jewels->clustereco;n4_i84_t1"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl75, 4 Notes", "jewels->clustereco;n4_i75_t1"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl68, 4 Notes", "jewels->clustereco;n4_i68_t1"], "SHD");
            Divider();
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl84, 3 Notes", "jewels->clustereco;n3_i84_t1"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl75, 3 Notes", "jewels->clustereco;n3_i75_t1"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl68, 3 Notes", "jewels->clustereco;n3_i68_t1"], "SHD");
            Divider();
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl84, 2 Notes", "jewels->clustereco;n2_i84_t1"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl75, 2 Notes", "jewels->clustereco;n2_i75_t1"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T1, iLvl68, 2 Notes", "jewels->clustereco;n2_i68_t1"], "SHD");
        }

        Section("Cluster Jewels: Good Enchantments", null, "E") {
            Warning("This section is economy based: it's generated based on poe.ninja economy data. This section is not perfect. Hide the general section on your own risk.");

            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl84, 12 Notes", "jewels->clustereco;n12_i84_t2"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl75, 12 Notes", "jewels->clustereco;n12_i75_t2"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl68, 12 Notes", "jewels->clustereco;n12_i68_t2"], "SHD");
            Divider();
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl84, 11 Notes", "jewels->clustereco;n11_i84_t2"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl75, 11 Notes", "jewels->clustereco;n11_i75_t2"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl68, 11 Notes", "jewels->clustereco;n11_i68_t2"], "SHD");
            Divider();
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl84, 10 Notes", "jewels->clustereco;n10_i84_t2"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl75, 10 Notes", "jewels->clustereco;n10_i75_t2"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl68, 10 Notes", "jewels->clustereco;n10_i68_t2"], "SHD");
            Divider();
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl84, 9 Notes", "jewels->clustereco;n9_i84_t2"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl75, 9 Notes", "jewels->clustereco;n9_i75_t2"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl68, 9 Notes", "jewels->clustereco;n9_i68_t2"], "SHD");
            Divider();
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl84, 8 Notes", "jewels->clustereco;n8_i84_t2"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl75, 8 Notes", "jewels->clustereco;n8_i75_t2"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl68, 8 Notes", "jewels->clustereco;n8_i68_t2"], "SHD");
            Divider();
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl84, 6 Notes", "jewels->clustereco;n6_i84_t2"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl75, 6 Notes", "jewels->clustereco;n6_i75_t2"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl68, 6 Notes", "jewels->clustereco;n6_i68_t2"], "SHD");
            Divider();
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl84, 4 Notes", "jewels->clustereco;n4_i84_t2"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl75, 4 Notes", "jewels->clustereco;n4_i75_t2"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl68, 4 Notes", "jewels->clustereco;n4_i68_t2"], "SHD");
            Divider();
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl84, 3 Notes", "jewels->clustereco;n3_i84_t2"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl75, 3 Notes", "jewels->clustereco;n3_i75_t2"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl68, 3 Notes", "jewels->clustereco;n3_i68_t2"], "SHD");
            Divider();
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl84, 2 Notes", "jewels->clustereco;n2_i84_t2"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl75, 2 Notes", "jewels->clustereco;n2_i75_t2"], "SHD");
            ClusterJewelTierList_Ench([0.0, "Cluster Jewel: T2, iLvl68, 2 Notes", "jewels->clustereco;n2_i68_t2"], "SHD");
        }

        Section("Cluster Jewels: Any Enchantment") {
            Title("Other Large Cluster Jewels");
            ClusterJewelTierList_NoEnch([0.0, "Good High Level Very Large Cluster Jewels", "jewels->cluster;optimal1highlarge"], "SH", "Size:L, nodes:12, lvl84+");
            ClusterJewelTierList_NoEnch([0.0, "Good High Level Large Cluster Jewels", "jewels->cluster;optimalhighlarge"], "SH", "Size:L, nodes:8, lvl84+");
            ClusterJewelTierList_NoEnch([0.0, "Good Large Cluster Jewels", "jewels->cluster;highlarge"], "SH", "Size:L, nodes:8");
            ClusterJewelTierList_NoEnch([0.0, "Large Cluster Jewels", "jewels->cluster;large"], "SH", "Size:L");
            Title("Other Medium Cluster Jewels");
            ClusterJewelTierList_NoEnch([0.0, "Good High Level Medium Cluster Jewels", "jewels->cluster;optimalhighmedium"], "SH", "Size:M, nodes:5-6, lvl84+");
            ClusterJewelTierList_NoEnch([0.0, "Good Medium Cluster Jewels", "jewels->cluster;highmedium"], "SH", "Size:M, nodes:5-6");
            ClusterJewelTierList_NoEnch([0.0, "Medium Cluster Jewels", "jewels->cluster;medium"], "SH", "Size:M");
            Title("Other Small Cluster Jewels");
            ClusterJewelTierList_NoEnch([0.0, "High Level Small Cluster Jewels", "jewels->cluster;highsmall"], "SH", "Size:S, nodes:2-3, lvl84+");
            ClusterJewelTierList_NoEnch([0.0, "Small Cluster Jewels", "jewels->cluster;small"], "SH", "Size:S");
        }

        Section("Cluster Jewels: Custom Rule") {
            Title("Any Enchantment");
            Search CS0("skip", "skip", "jewels->clustereco;n12_i84_t1") { }
            Conditional("?ClusterJewelNewTier", [0]) { Show; Class Jewel; Rarity Normal Magic Rare; SetTextColor 210 178 135; SetBackgroundColor 0 0 0 255; SetBorderColor 213 159 100 200; SetFontSize 42; }
            ElementAdder_Tier("?ClusterJewelNewTier", "ClusterJewelTierList_NoEnch");

            Divider();

            Title("Enchantment Filtering");
            Function ClusterJewelFunc ($s, $shd = "SHD", $title)
            {
                QuickUI($s, $shd, ["Rarity", "ClusterJewels", "ItemLevel", "AreaLevel", "CorruptedMods", "EnchantmentPassiveNum", "Identified", "Corrupted"], $title, ["ClusterJewelEnchantments", "S", "EnchantmentPassiveNode"]);
            }

            Conditional("?CClusterJewelEnchantRule", [0]) { Show; SetBorderColor 0 240 190 240; SetFontSize 40; Class "Jewels"; AnyEnchantment True; BaseType "Small Cluster Jewel" "Medium Cluster Jewel" "Large Cluster Jewel"; MinimapIcon 2 White Hexagon; PlayEffect White Temp; }
            ElementAdder_Tier("?CClusterJewelEnchantRule", "ClusterJewelFunc");
        }
    }

    Section("Trinkets & Relics", "HeistTrinket")
    {
        Section("Heist Trinkets", "HeistTrinket") {
            // info: these are always corrupted and rare
            Search S0(0.0, "Heist Trinkets") { BaseType "Thief's Trinket"; Class "Trinkets"; Rarity Rare; }
            QuickUI(S0, "SH", ["ItemLevel", "AreaLevel"]);
        }

        Section("Sanctum Relics", "SanctumRelic") {
            Function SanctumRelicsUI($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["Rarity"], $text, ["SanctumRelics", "O"]); }
            Description("Relics drop in the sanctum and provide sanctum-exclusive benefits to your runs.");

            SanctumRelicsUI([0.0, "Forbidden Sanctum Relics Tier 1", "artefact->sanctifiedrelics;selectedrelics"], "SH", "Sanctum Relics");
            QuickUI([0.0, "Remaining Forbidden Sanctum Relics", "artefact->sanctifiedrelics;anyrelic"], "SH", "", "Remaining Relics");

            // new tiers
            Conditional("?SanctumRelicsNewTiers") { }
            ElementAdder_Tier("?SanctumRelicsNewTiers", "SanctumRelicsUI");

            // hide tier
            Conditional("?SanctumRelicsNewTiersHidden") { }
            ElementAdder_Tier("?SanctumRelicsNewTiersHidden", null, true, "SanctumRelics", "OH");
        }
    }
}

Chapter() { Ad(); }

//===================================================================================================
// LEVELING / Campaign
//===================================================================================================

Chapter() {

    SectionTitle("Campaign (below lvl 68)");

    Section("Add custom Show/Hide rules (campaign)", "Firefly") {

        Box() { YTLink("PiSHS8T63ys", "Creating the Perfect Campaign Filter"); }

        Description("Augment the filter with entirely new rules, such as 'only show AR and AR/EV armors', 'highlight all rare axes' and 'hide all wands'", "Additional Campaign Rules", "This section is designed to be foolproof. It will have no effect on 6Llinks, endgame items, elder/shaper items, uniques etc), abyss belts, fishing rods and other special bases. These sections frequently feature the 'strictness' dropdown menu. This tool defines ho w many rules are overwritten by your custom rules. I recommend playing around with the loot simulator, while switching back and forth to the customizer to get familiar with this section");


        Section("Highlight items by Base", "Firefly") {
            Function CondShowBase_Lvl ($s, $shd = "SD", $title)
            {
                QuickUI($s, $shd, ["CondTargetSelection", "Rarity", "SocketGroup", "Stats_RareGear"], $title, ["Gear", "SO"]);
            }

            Conditional("?CLevelShowBases", ["c11.leveling.gear.all", "c11.leveling.firstlevels.all", "c11.leveling.act12.all", "c11.leveling.rares.low", "c11.leveling.all"]) { Show; SetBorderColor 200 0 0; SetFontSize 38; }
            ElementAdder_Tier("?CLevelShowBases", "CondShowBase_Lvl");
        }

        Section("Highlight items by Armour Type", "Firefly") {
            Conditional("?CLevelShowType", ["c11.leveling.gear.all", "c11.leveling.firstlevels.all", "c11.leveling.act12.all", "c11.leveling.rares.low", "c11.leveling.all"]) { Show; SetBorderColor 200 0 0; SetFontSize 38; Class == "Body Armours" "Gloves" "Boots" "Helmets" "Shields"; }
            Function CondShowTypeLVL ($s, $shd = "SD", $title)
            {
                QuickUI($s, $shd, ["CondTargetSelection", "Rarity", "ItemType", "ArmourClasses", "Stats_RareGear"], $title, ["SocketGroup", "SA", "SocketGroup"]);
            }

            ElementAdder_Tier("?CLevelShowType", "CondShowTypeLVL");
        }

        Section("Highlight items by slot", "Firefly") {
            Function CondShowClass_Lvl ($s, $shd = "SD", $title)
            {
                QuickUI($s, $shd, ["CondTargetSelection", "Rarity", "AllGearClasses", "Stats_RareGear"], $title, ["SocketGroup", "AS", "SocketGroup"]);
            }

            Conditional("?CLevelShowClasses", ["c11.leveling.gear.all", "c11.leveling.firstlevels.all", "c11.leveling.act12.all", "c11.leveling.rares.low", "c11.leveling.all"]) { Show; SetBorderColor 200 0 0; SetFontSize 38; }
            ElementAdder_Tier("?CLevelShowClasses", "CondShowClass_Lvl");
        }

        Section("Hide items by Armour Type", "Annulment") {
            Conditional("?CLevelHideType", ["c11.leveling.gear.all", "c11.leveling.firstlevels.all", "c11.leveling.act12.all", "c11.leveling.rares.low", "c11.leveling.all"]) { Hide; Class == "Body Armours" "Gloves" "Boots" "Helmets" "Shields"; }

            Function CondHideTypeLVL ($s, $shd = "HD", $title)
            {
                QuickUI($s, $shd, ["CondTargetSelection", "ItemType", "Rarity", "ArmourClasses", "Stats_RareGear"], $title, ["SocketGroup", "SA", "SocketGroup"]);
            }

            ElementAdder_Tier("?CLevelHideType", "CondHideTypeLVL");
        }

        Section("Hide items by slot", "Annulment") {
            Function CondHideClass_Lvl ($s, $shd = "HD", $title)
            {
                QuickUI($s, $shd, ["CondTargetSelection", "Rarity", "AllGearClasses", "Stats_RareGear"], $title, ["SocketGroup", "SA", "SocketGroup"]);
            }

            Conditional("?CLevelHideClasses", ["c11.leveling.gear.all", "c11.leveling.firstlevels.all", "c11.leveling.act12.all", "c11.leveling.rares.low", "c11.leveling.all"]) { Hide; SetFontSize 18; }
            ElementAdder_Tier("?CLevelHideClasses", "CondHideClass_Lvl");
        }
    }

    Section("Colors and Links", "Fusing") {

        Section("Chromatic Recipe Items", "Chromatic") {
            QuickUI([0.0, "Leveling RGB Chromatic recipe (small 2x2)", "leveling->normalmagic->rgb;rgbsmall1"], "SD", ["AreaLevel", "Rarity", "Width", "Height"], "Small RGB Items: 2x2");
            QuickUI([0.0, "Leveling RGB Chromatic recipe (small 1x3)", "leveling->normalmagic->rgb;rgbsmall2"], "SD", ["AreaLevel", "Rarity", "Width", "Height"], "Small RBG Items: 1x3, 1x4");
            QuickUI([0.0, "Leveling RGB Chromatic recipe (medium)", "leveling->normalmagic->rgb;rgbmedium"], "SD", ["AreaLevel", "Rarity", "Width", "Height"], "Medium RGB Items: 2x3");
            QuickUI([0.0, "Leveling RGB Chromatic recipe (large)", "leveling->normalmagic->rgb;rgblarge"], "SD", ["AreaLevel", "Rarity", "Width", "Height"], "Large RGB Items: 2x4");
        }

        Section("Linked Gear", "Fusing") {
            Description("By adding e.g. 'GG', all 4-links will need to at least have 2 green colors to get highlighted. You can add one or multiple combinations of 'R', 'G' and 'B'. This is very useful to hide uninteresting linked items.");
            QuickUI([0.0, "Leveling 5 links", "socketslinks;5linksleveling"], "SD", ["SixSocketClasses"], "5-Links");
            QuickUI([0.0, "Leveling Rare 4 links", "leveling->rare->socketslinks;4linkrares"], "SD", ["Rarity", "AreaLevel", "FourPlusSocketClasses"], "4-Links: rare", ["SocketGroup", "SA", "SocketGroup"]);
            QuickUI([0.0, "Leveling Magic/Normal 4 links", "leveling->normalmagic->4l;general"], "SD", ["Rarity", "AreaLevel", "FourPlusSocketClasses"], "4-Links: magic/normal", ["SocketGroup", "SA", "SocketGroup"]);
            QuickUI([1.0, "Leveling 3 links lvl 1-24", "leveling->normalmagic->3l;general"], "SD", ["Rarity", "AreaLevel", "SocketedGearClasses"], "3-Links: Act 2-3", ["SocketGroup", "SA", "SocketGroup"]);
            QuickUI([1.0, "Leveling 3 links early", "leveling->normalmagic->3l;earlythreelinks"], "SD", ["Rarity", "AreaLevel", "SocketedGearClasses"], "3-Links: Act 1", ["SocketGroup", "SA", "SocketGroup"]);
        }

        Section("Custom Linked item rules", "Chromatic") {

            Function LinkFunction($s, $shd = "SD", $title) {
                QuickUI($s, $shd, ["SocketedGearClasses", "ItemLevel", "LinkedSockets", "Rarity"], $title, ["SocketGroup", "S", "SocketGroup"]);
            }

            Description("Example: To highlight an item with 3 red sockets that are linked to each other, write RRR into the input field. The order doesn't matter.");
            DeepSearch S0("skip", "skip", "leveling->rare->socketslinks;4linkrares") { SocketGroup "RGBB"; Rarity Normal; BaseType "Iron Gauntlets";}
            Conditional("?CLvlS0", [0]) { Show; SocketGroup "RRR"; SetBorderColor 200 0 0; SetFontSize 38; Class == "Helmets" "Gloves" "Boots" "Body Armours" "Shields"; Rarity Normal Magic; };

            SocketFunction("?CLvlS0", "SD", "Racing Socket Group");
            ElementAdder_Tier("?CLvlS0", "LinkFunction");
        }

        Section("Custom Socket rules", "Chromatic") {

            Function SocketFunction($s, $shd = "SD", $title) {
                QuickUI($s, $shd, ["SocketedGearClasses", "ItemLevel", "ItemType", "LinkedSockets", "Rarity", "Sockets"], $title);
            }

            DeepSearch S0("skip", "skip", "leveling->rare->armours;general") { }
            Conditional("?CLvlSockets", [0]) { Show; Sockets >= "BB"; SetBorderColor 200 0 0; SetFontSize 38; Class == "Helmets" "Gloves" "Boots" "Body Armours" "Shields"; Rarity Normal Magic; };

            SocketFunction("?CLvlSockets", "SD", "Racing Sockets");
            ElementAdder_Tier("?CLvlSockets", "SocketFunction");
        }
    }

    Section("Flasks", "Flask") {

        Section("Flask Progression","FlaskLife")
        {
            Description("This section combines 30 different rules that will highlight the best available life, mana and hybrid flasks, during your Campaign progress.");
            DeepSearchMulti S0(0.0, "Leveling-Flasks-Hybrid-Progression", 1, 6){ +BaseType "Hybrid Flask"; Class == "Hybrid Flasks"; +AreaLevel <= 65; -Quality = 0; Rarity Normal; }
            DeepSearchMulti S1(0.0, "Leveling-Flasks-Life-Progression", 1, 12){ +BaseType "Life Flasks"; Class == "Life Flasks"; +AreaLevel <= 64; -Quality = 0; Rarity Normal; }
            DeepSearchMulti S2(0.0, "Leveling-Flasks-Mana-Progression", 1, 12){ +BaseType "Mana Flasks"; Class == "Mana Flasks"; +AreaLevel <= 64; -Quality = 0; Rarity Normal; }

            Function FlaskBox ($s, $shd = "SDH", $text) { QuickUI($s, $shd, ["RarityNM", "Quality", "ItemLevel"], $text); }
            FlaskBox(S1, SH, "Life Flask Progression");
            FlaskBox(S2, SH, "Mana Flask Progression");
            FlaskBox(S0, SH, "Hybrid Flask Progression");
        }

        Section ("Utility Flasks","Flask")
        {
             QuickUI([0.0, "Leveling-Flasks-Handpicked-Utility", "leveling->flasks->utility;quicksilver"], SDH, ["Utility Flasks", "RarityNM", "Quality", "AreaLevel"], "Campaign Utility: Quicksilver");
             QuickUI([0.0, "Leveling-Flasks-Handpicked-Utility-Low", "leveling->flasks->utility;asortedutility"], SDH, ["Utility Flasks", "RarityNM", "Quality", "AreaLevel"], "Campaign Utility: Handpicked");
             QuickUI([0.0, "Leveling-Flasks-Utility", "leveling->flasks->utility;any"], SDH, ["Utility Flasks", "RarityNM", "Quality", "AreaLevel"], "Campaign Utility: Others");

             Function UtilityFlaskCustomRuleUI ($s, $shd = "SHD", $title)
             {
                QuickUI($s, $sdh, ["Utility Flasks", "RarityNM", "Quality", "AreaLevel"], $title);
             }

             Conditional("?UtilityFlaskCustomRules") { Show; Class "Flask"; };
             ElementAdder_Tier("?UtilityFlaskCustomRules", "UtilityFlaskCustomRuleUI");
        }

        Section("Quality Flasks", "FlaskLife") {
            QuickUI([1.0, "Max Quality leveling flasks", "leveling->flasks->quality;max"], "SD", ["Quality", "AreaLevel"], "Max Quality Flasks");
            QuickUI([1.0, "High Quality leveling flasks", "leveling->flasks->quality;high"], "SD", ["Quality", "AreaLevel"], "High Quality Flasks");
            QuickUI([1.0, "Low Quality leveling flasks", "leveling->flasks->quality;any"], "SD", ["Quality", "AreaLevel"], "Low Quality Flasks");
        }
    }

    Section("Rare items", "IronRing") {

        Section("Decorators") {
             Description("Decorators highlight specific characteristics of an item, by changing the appearance, without deciding whether it is hidden or shown.");

            QuickUI([1.0, "Leveling rare deco tiny", "decorators->leveling->rare;tinyrares"], "SD", ["ItemLevel", "Height", "Width"]);
            QuickUI([1.0, "Leveling rare deco medium 1", "decorators->leveling->rare;mediumrares1"], "SD", ["ItemLevel", "Height", "Width"]);
            QuickUI([1.0, "Leveling rare deco medium 2", "decorators->leveling->rare;mediumrares2"], "SD", ["ItemLevel", "Height", "Width"]);
            QuickUI([1.0, "Leveling rare deco large", "decorators->leveling->rare;largerares"], "SD", ["ItemLevel", "Height", "Width"]);
        }

        Function ClassBox ($s, $shd = "SDH", $text) { QuickUI($s, $shd, ["ItemLevel", "DropLevel", "AllGearClasses"], $text); }

        Section("Jewellery & Armours") {

//            QuickUI([0.0, "Leveling Rare Rustic Sash", "leveling->rare->universal;rusticsash"], "SD", ["ItemLevel"], "", ["Gear", "SO"], "Special jewellery");
            ClassBox([0.0, "Leveling Rare Accessories", "leveling->rare->universal;jewellery"], "SD", "Rare Accessories");
            QuickUI([0.0, "Leveling rare boots", "leveling->rare->armours;bootsfocus"], "SD", ["ItemType", "ItemLevel", "DropLevel", "Sockets", "Quality"], "Boots");
            QuickUI([0.0, "Leveling small rare armours", "leveling->rare->armours;general"], "SD", ["ItemType", "ItemLevel", "DropLevel", "Sockets", "AllGearClasses", "Quality"], "Gloves, Helmets");
            QuickUI([0.0, "Leveling rare shields", "leveling->rare->armours;shields"], "SD", ["ItemType", "ItemLevel", "DropLevel", "Height", "Sockets", "Quality"], "Shields");
            QuickUI([0.0, "Leveling rare body armours", "leveling->rare->armours;bodyarmours"], "SD", ["ItemType", "ItemLevel", "DropLevel", "Sockets", "Quality"], "Body Armours");
        }

        Section("Weapon Highlight") {
            Description("Disabling any of the following sections will only remove the highlight (not hide the items). The rares will be caught under 'Remaining Rares'. It's recommended to only keep the parts on you care about.");

            Search S0(0.0, "Leveling Rare Melee Progression 1", "leveling->rare->melee2h;l1") { }
            Search S0(0.0, "Leveling Rare Melee Progression 2", "leveling->rare->melee2h;l2") { }
            Search S0(0.0, "Leveling Rare Melee Progression 3", "leveling->rare->melee2h;l3") { }
            Search S0(0.0, "Leveling Rare Melee Progression 4", "leveling->rare->melee2h;l4") { }
            Search S0(0.0, "Leveling Rare Melee Progression 5", "leveling->rare->melee2h;l5") { }
            Search S0(0.0, "Leveling Rare Melee Progression 6", "leveling->rare->melee2h;l6") { }
            Search S0(0.0, "Leveling Rare Melee Progression 7", "leveling->rare->melee2h;l7") { }
            Search S0(0.0, "Leveling Rare Melee Progression 8", "leveling->rare->melee2h;l8") { }

            QuickUI(S0, "SD", ["AllGearClasses", "Sockets", "AreaLevel", "Quality"], "Melee 2H (progression)", [], "These section combines many rules and will show the current top available base-types.");

            Search M1H(0.0, "Leveling Rare Melee 1H Progression 1", "leveling->rare->melee1h;l1") { }
            Search M1H(0.0, "Leveling Rare Melee 1H Progression 2", "leveling->rare->melee1h;l2") { }
            Search M1H(0.0, "Leveling Rare Melee 1H Progression 3", "leveling->rare->melee1h;l3") { }
            Search M1H(0.0, "Leveling Rare Melee 1H Progression 4", "leveling->rare->melee1h;l4") { }
            Search M1H(0.0, "Leveling Rare Melee 1H Progression 5", "leveling->rare->melee1h;l5") { }
            Search M1H(0.0, "Leveling Rare Melee 1H Progression 6", "leveling->rare->melee1h;l6") { }
            Search M1H(0.0, "Leveling Rare Melee 1H Progression 7", "leveling->rare->melee1h;l7") { }
            Search M1H(0.0, "Leveling Rare Melee 1H Progression 8", "leveling->rare->melee1h;l8") { }

            QuickUI(M1H, "SD", ["AllGearClasses", "Sockets", "AreaLevel", "Quality"], "Melee 1H (progression)", [], "These section combines many rules and will show the current top available base-types.");

            Search S1(0.0, "Leveling Rare Bow Progression 1", "leveling->rare->archer;l1") { }
            Search S1(0.0, "Leveling Rare Bow Progression 2", "leveling->rare->archer;l2") { }
            Search S1(0.0, "Leveling Rare Bow Progression 3", "leveling->rare->archer;l3") { }
            Search S1(0.0, "Leveling Rare Bow Progression 4", "leveling->rare->archer;l4") { }
            Search S1(0.0, "Leveling Rare Bow Progression 5", "leveling->rare->archer;l5") { }
            Search S1(0.0, "Leveling Rare Bow Progression 6", "leveling->rare->archer;l6") { }
            Search S1(0.0, "Leveling Rare Bow Progression 7", "leveling->rare->archer;l7") { }
            Search S1(0.0, "Leveling Rare Bow Progression 8", "leveling->rare->archer;l8") { }

            QuickUI(S1, "SD", ["AllGearClasses", "Sockets", "AreaLevel", "Quality"], "Bows (progression)", [], "These section combines many rules and will show the current top available base-types.");
            QuickUI([0.0, "Leveling rare quivers", "leveling->rare->armours;quivers"], "SD", ["ItemLevel", "DropLevel"], "Quivers");

            QuickUI([0.0, "Leveling rare caster weapons", "leveling->rare->caster;general"], "SD", ["AllGearClasses", "ItemLevel", "DropLevel", "Sockets"], "Caster");
            QuickUI([0.0, "Leveling rare caster weapons early", "leveling->rare->caster;earlylevels"], "SD", ["AllGearClasses", "ItemLevel", "DropLevel", "Sockets"], "Caster LVL1-16");

            QuickUI([0.0, "Leveling Rare Summoner Gear", "leveling->rare->minion;general"], "SH", ["ItemLevel", "DropLevel", "Sockets"], "Minion Gear", ["Gear", "OS"]);
        }

        Section("Remaining rares") {
            QuickUI([1.0, "Leveling Rare RGB Chromatic recipe", "leveling->rare->remaining;chromaticrares"], "SD", ["ItemLevel", "Rarity", "Sockets"], "Rare Chromatics");
            QuickUI([0.0, "Remaining leveling rares, high-level", "leveling->rare->remaining;underlevel68"], "SD", ["ItemLevel", "AreaLevel", "AllGearClasses", "Sockets", "Quality"], "Level 42-68");
            QuickUI([0.0, "Remaining leveling rares, mid-level", "leveling->rare->remaining;underlevel42"], "SD", ["ItemLevel", "AreaLevel", "AllGearClasses", "Sockets", "Quality"], "Level 24-42");
            QuickUI([0.0, "Remaining leveling rares, low-level", "leveling->rare->remaining;underlevel24"], "SD", ["ItemLevel", "AreaLevel", "AllGearClasses", "Sockets", "Quality"], "Level 16-24");
            QuickUI([0.0, "Remaining leveling rares, start", "leveling->rare->remaining;underlevel16"], "SD", ["ItemLevel", "AreaLevel", "AllGearClasses", "Quality"], "Level 1-16");
        }
    }

    Section("Act- & Build-specific items", "Ring") {
        Function ClassBox ($s, $shd = "SDH", $text) { QuickUI($s, $shd, ["AllGearClasses", "Rarity", "AreaLevel", "DropLevel", "Sockets"], $text); }
        Function BaseTypeBoxX ($s, $shd = "SDH", $text) { QuickUI($s, $shd, ["Rarity", "AreaLevel"], $text, ["Gear", "SO"]); }

        Section("Act 1") {
            QuickUI([0.0, "Act 1 Caster weapons", "leveling->normalmagic->act1;casterweapons"], "SD", ["AllGearClasses", "Rarity", "Sockets", "LinkedSockets", "AreaLevel"], "Magic Caster Weapons");
            QuickUI([0.0, "Early Leveling Boots ilvl 12", "leveling->normalmagic->act1;boots"], "SD", ["Rarity", "AreaLevel"], "Magic boots (for movement speed)");
            BaseTypeBoxX([1.0, "Act 1 Caster rings", "leveling->normalmagic->act1;castercraftrings"], "SD", "");
            BaseTypeBoxX([0.0, "Act 1 Physical accessories", "leveling->normalmagic->act1;physical"], "SD");
            BaseTypeBoxX([2.0, "Act 1 selected jewellery", "leveling->normalmagic->act1;general"], "SD");
            ClassBox([0.0, "Act 1 Jewellery", "leveling->normalmagic->act1;jewellery"], "SD", "Remaining Act 1 jewellery");
        }

        Section("Act 2/3")
        {
            Description("Act 2 and 3 are fairly lightning heavy. Topaz rings are a good opportunity to boost your defenses, when rushing.");
            BaseTypeBoxX([0.0, "Act 2/3 Rings", "leveling->normalmagic->act2;castercraftrings"], "SD", "Act 2/3 Top Rings (Norm/Magic)");
            BaseTypeBoxX([0.0, "Act 2/3 Rustic Sash", "leveling->normalmagic->act2;physical"], "SD", "Act 2/3 Rustic Sash (Norm/Magic)");
        }

        Section("Act 4/5/6") {
            Description("Acts 4-6 contain a lot of deadly fire damage sources. Ruby rings help a lot. After act 5 you want keep your resistances as high as possible. Consider throwing an essence or even an alchemy orb on one of these!");
            BaseTypeBoxX([1.0, "Act 4-6 Fire-Res Gear", "leveling->normalmagic->otheracts;fireresistgear"], "SD", "Act 4/5/6 Fire-Res Gear");
            BaseTypeBoxX([0.0, "Act 4/5/6 Rings", "leveling->normalmagic->otheracts;generalcrafting"], "SD", "Act 4/5/6 Rings (norm/magic)");
        }

        Section("Jewels") {
            Description("The endgame section handles rare jewels for both endgame/campaign.");
            QuickUI([0.0, "Campaign Jewels", "jewels->leveling;generic"], "SH", ["Rarity", "ItemLevel", "Jewels"], "Magic Jewels: Normal Type");
            QuickUI([0.0, "Campaign Abyss Jewels", "jewels->leveling;abyss"], "SH", ["Rarity", "ItemLevel", "Abyss Jewels"], "Magic Jewels: Abyss Type");
        }

        Section("Quivers") {
            Description("These upgrades are built around the moments when the player can get a solid boost out of a new quiver type.");
            QuickUI([0.0, "Leveling Quivers lvl 1-8", "leveling->normalmagic->act1;quivers"], "SD", ["AreaLevel", "Rarity"], "Quivers: Early Act1");
            QuickUI([0.0, "Leveling Quivers lvl 24-34", "leveling->normalmagic->otheracts;highphysquivers"], "SD", ["AreaLevel", "Rarity"], "Quivers: High Phys", ["Gear", "SO"]);
        }

        Section("Summoner gear") {
            // Description("You can sell a Transmutation Orb + Bone Spirit Shield + Life Flask to get a flask with the minion healing mod. This flask can be sold with a magic helmet and an Orb of Alteration to create a helmet with +1 to Level of socketed Minion Gems. Useful for summoner leveling.");
            QuickUI([0.0, "Leveling Summoner Wands", "leveling->normalmagic->minion;miniongear"], "SH", ["AreaLevel", "Rarity"], null, ["Gear", "SO"]);
            QuickUI([0.0, "Leveling Summoner Shields", "leveling->normalmagic->minion;minionshields"], "SD", ["AreaLevel", "Rarity"], null, ["Gear", "OS"]);
        }
    }

    Section("Normal & Magic Item Progression", "Siege Axe") {

        Description("Item progressions highlight the best available class (such as only 1h Axe or Claw) available on your level. Select up to 3 types below and we'll create the progression in just 1 click. The filter also comes with a default item progression. It's less precise than the custom ones, but covers multiple classes.");

        DeepSearchMulti S3(0.0, "Leveling-Progression-Full", 0, 15) { -BaseType "Gemini Claw"; Class "Claws"; +DropLevel <= 65; !ItemLevel < 65; Rarity Normal; SocketGroup GGG; }
        QuickUI(S3, "SHD", ["Sockets", "LinkedSockets", "Corrupted", "AllGearClasses", "BaseArmour", "BaseEvasion", "BaseEnergyShield", "Quality"], "Default Item Progression");

        Function ItemProgUI($s) { QuickUI($s, "", ["Rarity", "Sockets", "LinkedSockets", "AreaLevel", "Corrupted", "Progression", "Quality"], "Item Progression Editor"); }

        DeepSearch S0("skip", "skip", "leveling->rare->caster;earlylevels") { SocketGroup "RGBR"; ItemLevel 20; BaseType "Driftwood Wand"; }
        Conditional("?LvlItemProgression1", [1], "notSimpleBuilder") { Show; Rarity Normal Magic; SetBorderColor 200 0 0; SetFontSize 38; }
        ItemProgUI("?LvlItemProgression1");

        DeepSearch S1("skip", "skip", "leveling->rare->caster;earlylevels") { SocketGroup "RGBR"; ItemLevel 20; BaseType "Driftwood Wand"; }
        Conditional("?LvlItemProgression2", [2], "notSimpleBuilder") { Show; Rarity Normal Magic; SetBorderColor 200 0 0; SetFontSize 38; }
        ItemProgUI("?LvlItemProgression2");

        DeepSearch S2("skip", "skip", "leveling->rare->caster;earlylevels") { SocketGroup "RGBR"; ItemLevel 20; BaseType "Driftwood Wand"; }
        Conditional("?LvlItemProgression3", [3], "notSimpleBuilder") { Show; Rarity Normal Magic; SetBorderColor 200 0 0; SetFontSize 38; }
        ItemProgUI("?LvlItemProgression3");
    }

    Section("Other Normal and magic Items", "ShabbyJerkin") {

        Description("Magic items and normal early on provide sockets, base defenses and magics can be sold for shards. It's not recommended to adjust these unless you know what you're doing");

        Section("Magic Item Decorators") {
            Search S0(1.0, "Leveling magic deco medium 1", "decorators->leveling->magic;medium1") {}
            Search S0(1.0, "Leveling magic deco medium 2", "decorators->leveling->magic;medium2") {}

            Description("Decorators highlight specific characteristics of an item, by changing the appearance, without deciding whether it is hidden or shown.");

            QuickUI([1.0, "Leveling magic deco tiny", "decorators->leveling->magic;tiny"], "SD", ["ItemLevel", "Width", "Height"], "Decorator: Tiny Items (1x1, 1x2)");
            QuickUI(S0, "SD", ["ItemLevel"], "Decorator: Small Items (2x2, 1x3)");
            QuickUI([0.0, "Leveling magic deco early", "decorators->leveling->magic;noticeearly"], "SH", ["AreaLevel"], "Decorator: Level 1-9");
        }

        Section("Magic Items: Hide rules") {
            Description("The filter starts hiding magic items at higher levels while leveling, this can be adjusted here");

            QuickUI([2.0, "Large Mid-Level magic items", "leveling->magic->remaining;largemagicblocker"], "SHD", ["AreaLevel", "Width", "Height"]);
            QuickUI([2.0, "Mid-Level magic items A", "leveling->magic->remaining;mediummagicblocker"], "SHD", ["AreaLevel", "Width", "Height"]);
        }

        Section("Magic Items") {
            Description("Magic gear can be sold early on to get transmutation shards or identified to protect your innards.");

            QuickUI([0.0, "Magic items until mud flats", "leveling->magic->remaining;untilmudflats"], "SH", ["AreaLevel"], "Magics: LVL 1-4");
            QuickUI([1.0, "First levels magic items", "leveling->magic->remaining;firstlevels"], "SH", ["AreaLevel"], "Magics: LVL 1-9");
            QuickUI([1.0, "Act 1 magic items", "leveling->magic->remaining;act1"], "SH", ["AreaLevel"], "Magics: LVL 9-16");
            QuickUI([2.0, "Act 2 magic items", "leveling->magic->remaining;act2"], "SH", ["AreaLevel"], "Magics: LVL 16-24");
            QuickUI([2.0, "Other magic items", "leveling->magic->remaining;rest"], "SH", ["AreaLevel"], "Magics: Other");
        }

        Section("Normal Items during first levels") {
            Function ClassBox ($s, $shd = "SDH", $text) { QuickUI($s, $shd, ["AllGearClasses", "Rarity", "AreaLevel", "DropLevel", "Sockets"], $text); }
            Function BaseTypeBoxX ($s, $shd = "SDH", $text) { QuickUI($s, $shd, ["Rarity", "AreaLevel"], $text, ["Gear", "S"]); }
            Description("Just some normal gear for your very first levels. You can equip these for some base stats and initial sockets to level gems.");

            QuickUI([1.0, "Early 3 socketed items", "leveling->firstlevels;threesocketedgear"], "SH", ["Sockets", "Rarity", "AreaLevel", "DropLevel"], "LVL 1-9: 3-Sockets");
            ClassBox([0.0, "Early leveling normal items (body armour)", "leveling->firstlevels;earlybodyarmours"], "SD", "LVL 2-9: Body Armours");
            ClassBox([0.0, "Early leveling normal items (other)", "leveling->firstlevels;firstareas"], "SH", "LVL 1-4: Any Normal Items");
        }
    }
}

//===================================================================================================
// MISC ITEMS
//===================================================================================================

Chapter() {

    SectionTitle("Miscellaneous", "last");

    Section("Add additional Show/Hide rules", "Firefly") {
    Description("Use this section to add exotic rules and exception. This section is NOT foolproof, you can accidentally hide valuable items by misusing it. With great power comes great responsibility.");
        Function CondShowBase ($s, $shd = "SHD", $title)
        {
            QuickUI($s, $shd, ["CondTargetSelection", "RarityU", "ItemLevel", "Sockets", "Stats_All"], $title, ["rarityItems", "OS"]);
        }

        Function CondShowClass ($s, $shd = "SHD", $title)
        {
            QuickUI($s, $shd, ["CondTargetSelection", "RarityU", "AllRarityClasses", "ItemLevel", "Sockets", "Stats_All"], $title, ["rarityItems", "SOA"]);
        }

        Function CondFilterMod ($s, $shd = "SHD", $title)
        {
            QuickUI($s, $shd, ["CondTargetSelection", "RarityU", "AllRarityClasses", "Identified", "Corrupted", "ItemLevel", "Sockets", "Stats_All", "Mods"], $title, ["rarityItems", "SOA"]);
        }

        Function CondShowArmourType ($s, $shd = "SHD", $title)
        {
            QuickUI($s, $shd, ["CondTargetSelection", "RarityU", "ItemType", "ArmourClasses", "ItemLevel", "Sockets", "Stats_All"], $title);
        }

        Function CondShowMisc ($s, $shd = "SHD", $title)
        {
            QuickUI($s, $shd, ["CondTargetSelection", "Stats_Misc"], $title, ["noRarityItems", "SAO"]);
        }

        Section("Add Basetype-Based Rules", "Firefly")
        {
            Description("Give specific BaseTypes more highlighting here.");
            Conditional("?CUniversalCustomRuleB", ["c1.idmod.all", "c11.leveling.all", "c6.rare.decorator.all", "c0.alpha", "c5.hidelayer.normalmagic", "c12.hide.all"]) { Show; SetBorderColor 200 0 0; SetFontSize 38; ItemLevel >= 68; Rarity Normal Magic; }
            ElementAdder_Tier("?CUniversalCustomRuleB", "CondShowBase");
        }

        Section("Add Class-Based Rules", "Firefly")
        {
            Description("Give specific classes more highlighting here.");
            Conditional("?CUniversalCustomRuleC", ["c1.idmod.all", "c11.leveling.all", "c6.rare.decorator.all", "c0.alpha", "c5.hidelayer.normalmagic", "c12.hide.all"]) { Show; SetBorderColor 200 0 0; SetFontSize 38; ItemLevel >= 68; Rarity Normal Magic; }
            ElementAdder_Tier("?CUniversalCustomRuleC", "CondShowClass");
        }

        Section("Add Mod-Filtering Rule", "Firefly")
        {
            Description("Custom mod filtering. Note that you first need to select the correct classes, then add the mods you need.");
            Conditional("?CUniversalCustomRuleD", ["c1.idmod.all", "c11.leveling.all", "c6.rare.decorator.all", "c0.alpha", "c5.hidelayer.normalmagic", "c12.hide.all"]) { Show; SetBorderColor 220 50 150 255; SetTextColor 220 50 150 255; SetFontSize 45; Identified True; Corrupted False; Rarity Normal Magic Rare; HasExplicitMod "of Crafting"; PlayAlertSound 1 300; PlayEffect Red; MinimapIcon 0 Red Hexagon; }
            ElementAdder_Tier("?CUniversalCustomRuleD", "CondFilterMod");
        }

        Section("Add Armour-Type-Based Rules", "Firefly")
        {
            Conditional("?CUniversalCustomRuleArmourType", ["c1.idmod.all", "c11.leveling.all", "c6.rare.decorator.all", "c0.alpha", "c5.hidelayer.normalmagic", "c12.hide.all"]) { Show; SetBorderColor 200 0 0; SetFontSize 38; ItemLevel >= 68; Rarity Normal Magic; Class == "Body Armours" "Gloves" "Boots" "Helmets" "Shields"; }
            ElementAdder_Tier("?CUniversalCustomRuleArmourType", "CondShowArmourType");
        }

        Section("Add Misc. Rules", "Firefly")
        {
            Conditional("?CUniversalCustomRuleMisc", ["c1.idmod.all", "c11.leveling.all", "c6.rare.decorator.all", "c0.alpha", "c5.hidelayer.normalmagic", "c12.hide.all"]) { Show; SetBorderColor 200 0 0; SetFontSize 38; }
            ElementAdder_Tier("?CUniversalCustomRuleMisc", "CondShowMisc");
        }
    }

    Section("Skill Gems", "Empower", "E") {
        Section("Exceptional & Exotic Gems", "Empower", "E") {

            Title("Awakened Gems");
            QuickUI([0.0, "Top Awakened Support Gems", "gems-exceptional;awat1"], "S", ["GemLevel", "Quality"], "Awakened Gems: Expensive", ["Gems", "OD"]);
            QuickUI([0.0, "Awakened Support Gems", "gems-exceptional;awaany"], "SH", [], "Awakened Gems: Others");

            Title("Empower Class");
            QuickUI([0.0, "Special Gems with high level", "gems-special;exspeciale4"], "SH", ["GemLevel", "Quality", "Corrupted"], "Empower-Class: Very High Level", ["Gems", "DO"]);
            QuickUI([0.0, "Special Gems with level", "gems-special;exspeciale3"], "SH", ["GemLevel", "Quality", "Corrupted"], "Empower-Class: High Level", ["Gems", "DO"]]);
            QuickUI([0.0, "Special Gems Tier 1", "gems-special;specialworlddrops"], "SH", ["GemLevel", "Quality", "Corrupted"], "Empower-Class: High Value", ["Gems", "DO"]]);
            QuickUI([1.0, "Gems T1", "gems-special;exspecial"], "SD", ["GemLevel", "Quality", "Corrupted"], "Empower-Class: Others", ["Gems", "DO"]);

            Title("Other Special Gems");
            QuickUI([0.0, "Transfigured Gems", "gems-exceptional;altany"], "SH", [], "", null, "Since these gems can only be created by using the Divine Font at the end of the Eternal Labyrinth and can't drop naturally in the world, there is no need for any special filtering or highlight.");
            QuickUI([0.0, "Portal Gem", "gems-special;exportal"], "SH", ["GemLevel", "Quality"], null, ["Gems", "OD"]]);
        }

        Section("Top Gems, high level and quality", "SkillGemRed1", "E") {
            Description("These are compiled through economy data!");
            QuickUI([0.0, "Top Gems, lvl 21, 23q", "gems-exceptional;2123any"], "SH", ["GemLevel", "Quality", "Corrupted", "AreaLevel"], "Qual: 23%, LVL: 21 (Any)");
            QuickUI([0.0, "Top Gems, lvl 20, 23q", "gems-exceptional;2023"], "SH", ["GemLevel", "Quality", "Corrupted", "AreaLevel"], "Qual: 23%, LVL: 20", ["Gems", "OD"]]);
            QuickUI([0.0, "Top Gems, lvl 21, 20q", "gems-exceptional;2120"], "S", ["GemLevel", "Quality", "Corrupted", "AreaLevel"], "Qual: 20%, LVL: 21", ["Gems", "OD"]);
            QuickUI([0.0, "Top Gems, lvl 20, 20q", "gems-exceptional;2020z"], "S", ["GemLevel", "Quality", "Corrupted", "AreaLevel"], "Qual: 20%, LVL: 20 Not Corrupted", ["Gems", "OD"]);
            QuickUI([0.0, "Top Gems, 20q, Vaal", "gems-exceptional;vaal20"], "S", ["GemLevel", "Quality", "Corrupted", "AreaLevel"], "Qual: 20%+, Selected Vaal Only", ["Gems", "OD"], "These Vaal Gems are either expensive already or will be once they reach a high level, so it's worth leveling them.");
            QuickUI([1.0, "Overqualitied 21+ Gems", "gems-generic;qt1"], "SD", ["GemLevel", "Quality", "Corrupted", "AreaLevel"], "Qual: 23% (all others)");
        }

        Section("Gems with Gem-Levels", "SkillGemGreen2") {
            Description("These rules have all less priority than the rules in the above sections");
            QuickUI([1.0, "LVL 21+ Gems", "gems-generic;lt1"], "SD", ["GemLevel", "Quality", "Corrupted", "AreaLevel"], "");
            QuickUI([1.0, "Leveled Gems (max lvl)", "gems-generic;lt2"], "SD", ["GemLevel", "Quality", "Corrupted", "AreaLevel"], "LVL 20");
            QuickUI([1.0, "Leveled Gems (high lvl)", "gems-generic;lt3"], "SD", ["GemLevel", "Quality", "Corrupted", "AreaLevel"], "LVL 18-19");
            QuickUI([1.0, "Leveled Gems (low lvl)", "gems-generic;lt4"], "SD", ["GemLevel", "Quality", "Corrupted", "AreaLevel"], "LVL 2-17");
            Title("Exceptions");
            QuickUI([0.0, "Leveled gems (low max level tier 1)", "gems-special;ex6lvlgems"], "SD", ["GemLevel", "Quality", "Corrupted", "AreaLevel"], "Leveled gems with low max level", ["Gems", "OD"]);
        }

        Section("Gems during Campaign", "SkillGemRed2") {
            Function LevelSkillGemList($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["AreaLevel", "GemLevel", "Quality", "Corrupted"], $text, ["Gems", "A"]); }

            QuickUI([1.0, "First skill gem", "gems-generic;firstzone"], "SH", [], "Act 1: First Gems (Twilight Strand)");
            QuickUI([1.0, "Gems with quality during leveling", "gems-generic;qt4lvl"], "SH", ["Quality", "AreaLevel"], "Campaign: Quality Gems");
            QuickUI([1.0, "Vaal gems during leveling", "gems-generic;levelingvaal"], "SH", ["AreaLevel"], "Campaign: Vaal Gems");

            QuickUI([1.0, "Gems during leveling", "gems-generic;leveling"], "SH", ["AreaLevel"], "Campaign: Other Gems", ["Gems", "AO"]);

            Conditional("?LevelingSkillGemNewTiers") { Show; Class "Gems"; SetBorderColor 0 0 0; SetFontSize 36; }
            ElementAdder_Tier("?LevelingSkillGemNewTiers", "LevelSkillGemList");
        }

        Section("Vaal & Normal Gems", "VaalSparkGem") {
            QuickUI([1.0, "Vaal gem deco", "gems-generic;decogemsvaalbgdrop"], "SD", [], "Decorator: Vaal Gems");
            QuickUI([1.0, "Vaal Gems", "gems-generic;corruptedvaalany"], "SD", ["Quality"], "Vaal Gems", ["Gems", "D"]);
            QuickUI([1.0, "Gems T3", "gems-generic;any"], "SH", [], "Endgame: All other gems");

            Function SkillGemList($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["GemLevel", "Quality"], $text, ["Gems", "D"]); }
            Conditional("?SkillGemNewTiers") { Show; Class "Gems"; SetBorderColor 0 0 0; SetFontSize 36; }
            ElementAdder_Tier("?SkillGemNewTiers", "SkillGemList");
        }
    }

    Section("Exotic Unique Rules", "Tabula")
    {
        Section("Exotics: Links&Sockets", "Tabula") {
            Search S1("0.0", "Unique Exception: Tabula Rasa") { BaseType "Simple Robe"; SocketGroup "WWWWWW"; Rarity Unique; }
            Title("Uniques with high Socket/Link Number");
            QuickUI([0.0, "6 linked uniques", "uniques;ex6link"], "SD");
            QuickUI([0.0, "5 linked uniques", "uniques;5link"], "SD");
            QuickUI([0.0, "6 Socket Uniques", "uniques;6s"], "SD");
            Title("Specific Uniques With Exotics Sockets");
            QuickUI(["0.0", "Unique Exception: The Squire", "uniques;exsquire"], "S", [], "The Squire", [], "This rule detects The Squire using the fact that it always drops with 3 white sockets.<br>This rule can occasionally show The Oppressor with 3 white sockets.");
            QuickUI(S1, "SH", [], "Tabula Rasa", [], "This rule detects Tabula Rasa using the fact that it always drops with 6 white linked sockets.<br>This can extremely rarely show Thousand Ribbons with 6 white linked sockets");
            QuickUI([0.0, "Unique Exception: Kaom's Heart", "uniques;exkaom"], "SH", [], "Kaom's Heart", ["GearPlusFlasks", "OAS"], "This rule detects Kaom's Heart using the fact that it has no sockets.<br>You can detect other socketless uniques in this rule by adding their basetypes:<br>Kaom's Roots: Titan Greaves<br>The Grey Spire: Judgement Staff");
        }

        Section("Exotics: Replica Uniques", "HeistReplicaUnique", "E") {
            Function ReplicaUniqueList($s, $shd = "SHD", $text, $descr = false) { QuickUI($s, $shd, [], $text, ["GearPlusFlasks", "O"], $descr); }

            TierListToolBar();

            ReplicaUniqueList([0.0, "Replica Uniques Tier 1", "uniques->replicas;t1"], "S", "S-Tier");
            ReplicaUniqueList([0.0, "Replica Uniques Tier 2", "uniques->replicas;t2"], "S", "A-Tier");
            ReplicaUniqueList([0.0, "Replica Uniques (MultiBase)", "uniques->replicas;multi"], "SH", "Multi-Base Uniques:", "Some BaseTypes have both: very valuable uniques AND cheap ones. The filter can't say which one dropped. These multi-base uniques get more highlight, but play the low-tier unique sound.");
            ReplicaUniqueList([0.0, "Replica Uniques Tier 3", "uniques->replicas;t3"], "SH", "Others");

            Conditional("?ReplicaUniqueNewTiers") { Show; Rarity Unique; SetTextColor 175 96 37 255; SetBackgroundColor 0 0 0 255; SetBorderColor 175 96 37 255; SetFontSize 42; PlayAlertSound 3 300; }
            ElementAdder_Tier("?ReplicaUniqueNewTiers", "ReplicaUniqueList");

            Conditional("?ReplicaUniquesNewTiersHidden") {}
            ElementAdder_Tier("?ReplicaUniquesNewTiersHidden", null, true, "GearPlusFlasks", "OH");
        }

        Section("Exotics: Abyss Sockets") {
            Search S2("0.0", "Unique Exception: Two Abyss Socket Uniques", "uniques;2xabyss") { BaseType "Steelscale Gauntlets"; SocketGroup "A A"; Rarity Unique; }
            QuickUI([0.0, "Unique Exception: Four Abyss Socket Uniques", "uniques;4xabysshelmet"], "SH", ["Sockets"], "Wraithlord (4A)", ["GearPlusFlasks", "OSA"], "This rule detects Wraithlord using the fact that it always has 4 Abyssal Sockets");
            QuickUI([0.0, "Unique Exception: Three Abyss Socket Uniques", "uniques;3xabyss"], "SD", ["Sockets"], "Shroud of the Lightless (3A)", ["GearPlusFlasks", "OSA"], "This rule detects Shroud of the Lightless variation with 3 Abyssal Sockets ");
            QuickUI(S2, "SD", ["Sockets"], "Abyss Uniques (2A Sockets)", ["GearPlusFlasks", "OSA"], "This rule detects 2 Abyssal Socket variations of Tombfist, Command of the Pit, Lightpoacher, Hale Negator and Bubonic Trail.<br>You can also add Carnal Armour to this rule to make it detect 2 Abyssal Socket variation of Shroud of the Lightless");
        }

        Section("Exotics: Influenced&Synthesized") {
            QuickUI([0.0, "Synthesis Jewels", "uniques;exrationaljewel"], "SH", ["AllGearClassesPlusJewel"], "Rational Doctrine Jewel", ["GearPlusFlasks", "OAS"], "This rule detects Rational Doctrine using the fact that it is Synthesised.");
            QuickUI([0.0, "Unique Exception: Synthesis Rings", "uniques;exsynth"], "SD", ["AllGearClasses"], "Synthesized Uniques", ["GearPlusFlasks", "OAS"], "This rule detects Circle of Guilt, Circle of Anguish, Circle of Fear, Circle of Nostalgia and Circle of Regret rings using the fact that they are Synthesised.<br>You can detect other Synthesised uniques in this rule or in Rational Doctrine rule by adding their basetypes:<br>Garb of the Ephemeral: Savant's Robe<br>Mask of the Tribulan: Magistrate Crown<br>Nebulis: Void Sceptre<br>Offering to the Serpent: Legion Gloves");
            QuickUI([0.0, "Uber Impresence Unique", "uniques;exuberimpresence"], "SD", [], "Double-Curse Impresence", ["GearPlusFlasks", "OAS"], "This rule detects the very rare two-curse Impresence that drops from Uber Uber Elder using the fact that it has both Shaper and Elder influence.<br>You can detect other items that have both Shaper and Elder influences in this rule by adding their basetypes:<br>Indigon: Hubris Circlet<br>Voidfletcher: Primal Arrow Quiver<br>Disintegrator: Maelström Staff<br>Call of the Void: Sapphire Ring<br>Eternity Shroud: Blood Raiment<br>Voidforge: Infernal Sword");
            QuickUI([0.0, "Unique Shaper Sword", "uniques;exforgesword"], "SH", [], "Starforge and Voidforge", ["GearPlusFlasks", "OAS"], "This rule detects Starforge and Voidforge using the fact that they have one of the Elder or Shaper influence.<br>Note that this rule does not detect Echoforge so if you disable Infernal Sword it will still hide that.<br>You can detect other items that have either of Shaper or Elder influences in this rule by adding their basetypes:<br>Mark of the Shaper: Opal Ring<br>Soul Ascension: Carnal Mitts<br>Shaper's Touch: Crusader Gloves<br>Voidwalker: Murder Boots<br>Solstice Vigil and Impresence: Onyx Amulet<br>Echoes of Creation: Royal Burgonet<br>The Tides of Time: Vanguard Belt<br>Entropic Devastation and Blasphemer's Grasp: Assassin's Mitts<br>Cyclopean Coil: Leather Belt<br>Hopeshredder: Ranger Bow<br>Shimmeron: Tornado Wand");
            
        }

        Section("Exotics: Corrupted Uniques") {
            QuickUI([0.0, "Unique Exception: 4 White Triad Grip", "uniques;extriadgrip"], "SH", ["Sockets"], "Triad Grip (4White)");
            QuickUI([0.0, "Double corrupted uniques", "uniques;2xcorrupteduniques"], "SD", [], null, ["GearPlusFlasks", "OAS"]);
            QuickUI([0.0, "Corrupted Unique Jewels", "uniques;exjewelscorrupted"], "SH", [], "Corruption-Outcome Jewels", ["GearPlusFlasks", "OAS"], "This rule usually detects jewels that turn unique through corruption outcomes. Do note that there is a small chance that a non-corruption specific jewel might get corrupted and displayed via this rule. It's not recommended to hide this rule, especially since some of the corruption outcomes (such as a rain of splinters) can be quite valuable");
            QuickUI([0.0, "Uniques with corrupted implicit", "uniques;corrupteduniques"], "SH", ["ItemLevel", "AllGearClasses"]);
        }

        Section("Exotics: Others") {
            Search S3("0.0", "Unique Exception: Beachhead Pieces") { Rarity Unique; BaseType "Legion Sword Piece"; }

            QuickUI(S3, "SH", [], "Beachhead Pieces");
            QuickUI([0.0, "Adorned Jewel Pieces", "artefact->piece;vaal"], "SH", [], "Adorned Jewel Pieces");

            QuickUI([0.0, "Unique Exception: High Level Vinktar", "uniques;highvinktar"], "SD", [], "High Level Agnerod Staves");
            QuickUI([0.0, "Unique with Crucible Tree", "uniques;excrucibleunique"], "SH", [], null, ["GearPlusFlasks", "OAS"]);
        }

        Section("Exotics: Unique Maps") {
            QuickUI([0.0, "T16 Harbinger Map", "uniques->maps;exharbinger"], "SD", [], "Tier 16 Harbinger Map");
        }

        Section("Highlight specific unique maps") {
            Function UniqueMaps ($s, $shd = "SHD", $title) { QuickUI($s, $shd, ["MapTier"], $title, ["UniqueMaps", "SOA"]); }
            Conditional("?UniqueMapRule", ["c9.maps.unique.all"]) { Show; Rarity Unique; Class Maps; SetFontSize 45; SetBorderColor 175 96 37 255; PlayAlertSound 4 300; MinimapIcon 2 Brown Square; PlayEffect Brown; }
            ElementAdder_Tier("?UniqueMapRule", "UniqueMaps");
        }
    }

    Section("Heist Follower Equipment", "HeistCrewEquip") {
        Function CrewUI($s, $shd = "SH", $text, $suggestions = "false") { QuickUI($s, $shd, ["Rarity", "ItemLevel", "AreaLevel"], $text, [$suggestions, "DO"]); }

        Function CrewUiNoBase($s, $shd = "SH", $text, $suggestions = "HeistCrewCloaks") { QuickUI($s, $shd, ["Rarity", "ItemLevel", "AreaLevel"], $text); }

        Section("Cloak") {
            Search S0(0.0, "Heist Crew Cloak Equipment T1 Rare") { BaseType "Whisper-woven Cloak"; Rarity Rare; }
            Search S1(0.0, "Heist Crew Cloak Equipment T2 Rare") { BaseType "Hooded Cloak"; Rarity Rare; }
            Search S2(0.0, "Heist Crew Cloak Equipment T3 Rare") { BaseType "Torn Cloak"; Rarity Rare; }
            Search S3(0.0, "Heist Crew Cloak Equipment T1 HighLvl") { BaseType "Whisper-woven Cloak"; Rarity Rare; ItemLevel 86; }

            CrewUI(S3, "SH", "T1 HighLvl", "HeistCrewCloaks");
            CrewUI(S0, "SH", "T1", "HeistCrewCloaks");
            CrewUI(S1, "SH", "T2", "HeistCrewCloaks");
            CrewUiNoBase(S2, "SH", "T3 (remaining)", "HeistCrewCloaks");
        }

        Section("Brooch") {
            Search S3(0.0, "Heist Crew Brooch Equipment T1 Rare") { BaseType "Foliate Brooch"; Rarity Rare; }
            Search S4(0.0, "Heist Crew Brooch Equipment T2 Rare") { BaseType "Enamel Brooch"; Rarity Rare; }
            Search S5(0.0, "Heist Crew Brooch Equipment T3 Rare") { BaseType "Silver Brooch"; Rarity Rare; }
            Search S6(0.0, "Heist Crew Brooch Equipment T1 HighLvl") { BaseType "Foliate Brooch"; Rarity Rare; ItemLevel 86; }

            CrewUI(S6, "SH", "T1 HighLvl", "HeistCrewBrooches");
            CrewUI(S3, "SH", "T1", "HeistCrewBrooches");
            CrewUI(S4, "SH", "T2", "HeistCrewBrooches");
            CrewUiNoBase(S5, "SH", "T3 (remaining)", "HeistCrewBrooches");
        }

        Section("Gear") {
            Search S6(0.0, "Heist Crew Gear Equipment T1 Rare") { BaseType "Burst Band"; Rarity Rare; }
            Search S7(0.0, "Heist Crew Gear Equipment T2 Rare") { BaseType "Aggregator Charm"; Rarity Rare; }
            Search S8(0.0, "Heist Crew Gear Equipment T3 Rare") { BaseType "Focal Stone"; Rarity Rare; }
            Search S9(0.0, "Heist Crew Gear Equipment T1 HighLvl") { BaseType "Burst Band"; Rarity Rare; ItemLevel 86; }

            CrewUI(S9, "SH", "T1 HighLvl", "HeistCrewGear");
            CrewUI(S6, "SH", "T1", "HeistCrewGear");
            CrewUI(S7, "SH", "T2", "HeistCrewGear");
            CrewUiNoBase(S8, "SH", "T3 (remaining)", "HeistCrewGear");
        }

        Section("Tool") {
            Search S9(0.0, "Heist Crew Tool Equipment T1 Rare") { BaseType "Master Lockpick"; Rarity Rare; }
            Search S10(0.0, "Heist Crew Tool Equipment T2 Rare") { BaseType "Fine Lockpick"; Rarity Rare; }
            Search S11(0.0, "Heist Crew Tool Equipment T3 Rare") { BaseType "Crude Ward"; Rarity Rare; }
            Search S12(0.0, "Heist Crew Tool Equipment T1 HighLvl") { BaseType "Master Lockpick"; Rarity Rare; ItemLevel 86; }

            CrewUI(S12, "SH", "T1 HighLvl", "HeistCrewTools");
            CrewUI(S9, "SH", "T1", "HeistCrewTools");
            CrewUI(S10, "SH", "T2", "HeistCrewTools");
            CrewUiNoBase(S11, "SH", "T3 (remaining)", "HeistCrewTools");
        }

        Section("Custom Equipment Rules") {
            Search S0("skip") { BaseType "Whisper-woven Cloak"; Rarity Magic; ItemLevel 86; }

            Function CondShowBase ($s, $shd = "SD", $title) { QuickUI($s, $shd, ["HeistGearClasses", "ItemLevel", "DropLevel", "AreaLevel", "RarityU"], $title, ["HeistCrewEquipment", "SAO"]); }

            Conditional("?CCustomHeistCrewEquipRules", [0]) { Show; SetBorderColor 200 0 0; SetFontSize 38; ItemLevel >= 68; Rarity Rare; }
            ElementAdder_Tier("?CCustomHeistCrewEquipRules", "CondShowBase");
        }
    }

    Section("Identified Mod Filtering", "IdentifiedItem") {
        Warning("Note that filtering by mods is only possible for EXPLICIT mods of IDENTIFIED items! This excludes any labyrinth enchantments as those are implicit.");

        Function ModItemUI($s, $shd = "SHD", $text) { QuickUI($s, $shd, ["ItemLevel", "DropLevel", "Corrupted", "AllGearClasses", "Mods"], $text, ["Gear", "SOA"]); }
        Function BasicModItemUI($s, $text) { QuickUI($s, "SD", ["ItemLevel", "DropLevel", "Corrupted", "Mods"], $text); }

        Title("Weapons");

        Section("Attack Weapons") {
            ModItemUI([0.0, "ModFilter: Veiled Phys Weapons", "rareid;weapon_phys"], "SD", "Phys Weapons 1");
            ModItemUI([0.0, "ModFilter: Phys Weapons, 2", "rareid;weapon_physpure"], "SD", "Phys Weapons 2");
            ModItemUI([0.0, "ModFilter: Ele Weapons, 3", "rareid;weapon_ele"], "SD", "Ele Weapons 1");
            ModItemUI([0.0, "ModFilter: Ele Weapons, 4", "rareid;weapon_elepure"], "SD", "Ele Weapons 2");
        }

        Section("Caster Weapons") {
            ModItemUI([0.0, "ModFilter: Ele+Chaos Caster Weapons, fire", "rareid;caster_fireweapont2"], "SD", "Fire caster");
            ModItemUI([0.0, "ModFilter: Ele+Chaos Caster Weapons, cold", "rareid;caster_coldweapont2"], "SD", "Cold caster");
            ModItemUI([0.0, "ModFilter: Ele+Chaos Caster Weapons, light", "rareid;caster_lightweapont2"], "SD", "Lightning caster");
            ModItemUI([0.0, "ModFilter: Ele+Chaos Caster Weapons, chaos", "rareid;caster_chaosweapont2"], "SD", "Chaos caster");
            ModItemUI([0.0, "ModFilter: Physical Caster Weapons", "rareid;caster_physweapont2"], "SD", "Physical caster");
            ModItemUI([0.0, "ModFilter: BladeBlast", "rareid;bladeblast_2core"], "SD", "Blade Blast Daggers");
            ModItemUI([0.0, "ModFilter: Spellslinger Weapons, 4", "rareid;caster_slingert2"], "SD", "Spellslinger Weapons");
        }

        Section("Gem Weapons") {
            ModItemUI([0.0, "Mod items B", "rareid;gem_bow"], "SD", "Gem Bow");
            ModItemUI([0.0, "Mod items C", "rareid;gem_caster"], "SD", "Caster Gem Weapons");
            ModItemUI([0.0, "Mod items D", "rareid;gem_staves"], "SD", "Gem Staves");
        }

        Section("Quivers") {
            BasicModItemUI([0.0, "ModFiltering: Quiver1", "rareid;quiv_hit"], "Hit Quivers");
            BasicModItemUI([0.0, "ModFiltering: Quiver, DoT", "rareid;quiv_dot"], "DoT Quivers");
        }

        Title("Gear & Jewellery");

        Section("Boots, Gloves, Helmets") {
            BasicModItemUI([0.0, "ModFiltering: Boots 1", "rareid;boots_life_based"], "Life Boots");
            BasicModItemUI([0.0, "ModFiltering: Gloves1", "rareid;gloves_life_based"], "Life Gloves");
            BasicModItemUI([0.0, "ModFiltering: Helmets1", "rareid;helmet_life_based"], "Life Helmets");
            BasicModItemUI([0.0, "ModFiltering: Boots ES 3", "rareid;boots_es_based"], "ES Boots");
            BasicModItemUI([0.0, "ModFiltering: Gloves3", "rareid;gloves_es_based"], "ES Gloves");
            BasicModItemUI([0.0, "ModFiltering: Helmets ES 3", "rareid;helmet_es_based"], "ES Helmets");
        }

        Section("Body Armours") {
            BasicModItemUI([0.0, "ModFiltering: Body - Life", "rareid;body_life"], "Life Armours");
            BasicModItemUI([0.0, "ModFiltering: Body - ES", "rareid;body_es"], "ES Armours");
            BasicModItemUI([0.0, "ModFiltering: Body - Defense", "rareid;body_defense"], "Defense Armours");
            BasicModItemUI([0.0, "ModFiltering: Body - Defense Life", "rareid;body_lifedefense"], "Defense Life Armours");
        }

        Section("Shields") {
            BasicModItemUI([0.0, "ModFiltering: Shields1", "rareid;shield_lifefocus"], "Shields Life");
            BasicModItemUI([0.0, "ModFiltering: Shields2", "rareid;shield_esfocus"], "Shields ES");
            BasicModItemUI([0.0, "ModFiltering: Shields5", "rareid;shield_casterfocus"], "Shields Damage Caster");
            BasicModItemUI([0.0, "ModFiltering: Shields Def", "rareid;shield_defensefocus"], "Shields Def");
        }

        Section("Jewellery") {
            Title("Belts");
            BasicModItemUI([0.0, "ModFiltering: Belts1", "rareid;belt_general"], "Belts");
            Title("Rings");
            BasicModItemUI([0.0, "ModFiltering: Rings1", "rareid;ring_attack"], "Attacks Rings");
            BasicModItemUI([0.0, "ModFiltering: Rings3", "rareid;ring_caster"], "Caster Rings");
            BasicModItemUI([0.0, "ModFiltering: Minion Ring", "rareid;ring_minion"], "Minion Rings");
            Title("Amulets");
            BasicModItemUI([0.0, "ModFiltering: Amulets +1 All Gems", "rareid;amu_exalter"], "Amulets with +1 to all skill gems");
            BasicModItemUI([0.0, "ModFiltering: Amulets1", "rareid;amu_1coreattack"], "Attack Amulets");
            BasicModItemUI([0.0, "ModFiltering: Amulets3", "rareid;amu_2coreattack"], "Attack Amulets");
            BasicModItemUI([0.0, "ModFiltering: Amulets4", "rareid;amu_1corecaster"], "Caster Amulets");
            BasicModItemUI([0.0, "ModFiltering: Amulets5", "rareid;amu_2corecaster"], "Caster Amulets");
            BasicModItemUI([0.0, "ModFiltering: Amulets DoT 1", "rareid;amu_1coredot"], "DoT Caster Amulets");
            BasicModItemUI([0.0, "ModFiltering: Amulets DoT 2", "rareid;amu_2coredot"], "DoT Caster Amulets");
        }

        Section("Jewels") {
            BasicModItemUI([0.0, "ModFiltering: Jewels Minion", "rareid;idjewel_minion"], "Minion Jewels");
            BasicModItemUI([0.0, "ModFiltering: Jewels DoT", "rareid;idjewel_dot"], "DoT Jewels");
            BasicModItemUI([0.0, "ModFiltering: Jewels Crit Attack", "rareid;idjewel_critattack"], "Crit Attack Jewels");
            BasicModItemUI([0.0, "ModFiltering: Jewels Crit Spell", "rareid;idjewel_critspell"], "Crit Spell Jewels");
        }

        Section("Abyss Jewels") {
            BasicModItemUI([0.0, "ModFiltering: Abyss Jewels Minion", "rareid;idaj_minion"], "Minion Abyss Jewels");
            BasicModItemUI([0.0, "ModFiltering: Abyss Jewels Caster", "rareid;idaj_caster"], "Caster Abyss Jewels");
            BasicModItemUI([0.0, "ModFiltering: Abyss Jewels Attack", "rareid;idaj_attack"], "Attack Abyss Jewels");
            BasicModItemUI([0.0, "ModFiltering: Abyss Jewels Mixed", "rareid;idaj_mixer"], "Mixed Abyss Jewels");
        }

        Section("Items with Corrupted Implicits") {
            Description("These items are identified, have several good mods and a corrupted implicit. Ideally with luck, these can roll mods like curses on hit, chain and extra projectiles.");
            BasicModItemUI([0.0, "ModFiltering: Corrupted Gloves", "corruptedid;gloves_life_based"], "Corrupted Gloves");
            BasicModItemUI([0.0, "ModFiltering: Corrupted Quivers Hit", "corruptedid;quiv_hit"], "Corrupted Quivers (hit-mix)");
            BasicModItemUI([0.0, "ModFiltering: Corrupted Quivers Dot", "corruptedid;quiv_dot"], "Corrupted Quivers (dot-mix)");
        }

        Section("Magic items") {
//            ModItemUI([0.0, "ModFilter: Magic - Amulets with +1 to all gems", "magicid;allskills"], "SD");
//            ModItemUI([1.0, "ModFilter: Magic - Physical weapons", "magicid;phys"], "SD");
//            ModItemUI([1.0, "ModFilter: Magic - Caster", "magicid;damagemods"], "SD");
//            ModItemUI([1.0, "ModFilter: Magic - 35% Movement speed boots", "magicid;speed"], "SD");
//            ModItemUI([0.0, "ModFiltering: Magic - T1 Recombinator Gloves", "magicid;recogloves"], "SH");
//            ModItemUI([0.0, "ModFiltering: Magic - T1 Recombinator Boots", "magicid;recoboots"], "SH");
//            ModItemUI([0.0, "ModFiltering: Magic - T1 Recombinator Helmets", "magicid;recohelmets"], "SH");
//            ModItemUI([0.0, "ModFiltering: Magic - T1 Recombinator Weapons", "magicid;recoweapons"], "SH");
//            ModItemUI([0.0, "ModFiltering: Magic - T1 Recombinator Rings", "magicid;recorings"], "SH");
//            ModItemUI([0.0, "ModFiltering: Magic - T1 Recombinator Fire Caster", "magicid;recocasterfire"], "SH");
//            ModItemUI([0.0, "ModFiltering: Magic - T1 Recombinator Cold Caster", "magicid;recocastercold"], "SH");
//            ModItemUI([0.0, "ModFiltering: Magic - T1 Recombinator Lightning Caster", "magicid;recocasterlight"], "SH");
//            ModItemUI([0.0, "ModFiltering: Magic - T1 Recombinator Physical Caster", "magicid;recocasterphys"], "SH");

            ModItemUI([0.0, "ModFiltering: Magic - Plus 2 All Minion Skills Helmet", "magicid;t1minionhelm"], "SH", "+2 MinionGem Helmets");
            ModItemUI([0.0, "ModFiltering: Magic - T1 Caster", "magicid;t1caster"], "SH", "+1 All Spell Weapons");
            ModItemUI([0.0, "ModFiltering: Magic - T1 Projectile", "magicid;t1proj"], "SH", "+2 Proj Bows");
            ModItemUI([0.0, "ModFiltering: Magic - T1 Amulet", "magicid;t1amu"], "SH", "+1 All Skill Amulets");
            ModItemUI([0.0, "ModFiltering: Magic - T2 Quiver", "magicid;t2quiver"], "SH", "+1 Proj Quivers");
            ModItemUI([0.0, "ModFiltering: Magic - T2 Caster", "magicid;t2caster"], "SH", "+1 to Gem Type Weapons");
            ModItemUI([0.0, "ModFiltering: Magic - T2 Amulet", "magicid;t2amu"], "SH", "+1 to Gem Type Amu");
            ModItemUI([0.0, "ModFiltering: Magic - T2 Shield", "magicid;t2shield"], "SH", "+2% Max Resist Shield");
            ModItemUI([0.0, "ModFiltering: Magic - T2 Suppression", "magicid;t2suppress"], "SH", "Top Suppression Items");
            ModItemUI([0.0, "ModFiltering: Magic - T2 Physical", "magicid;t2purephys"], "SH"], "Merciless&Dictator Phys Weapons");
            ModItemUI([0.0, "ModFiltering: Magic - T2 DoT Wand", "magicid;t2dotwand"], "SH", "DoT Wands");
            ModItemUI([0.0, "ModFiltering: Magic - T2 Sceptre", "magicid;t2sceptre"], "SH", "DoT Sceptres");
            ModItemUI([0.0, "ModFiltering: Magic - T2 Elemental Weapons", "magicid;t2eleweapons"], "SH", "Top Elemental Caster Weapons");
        }
    }
    Section("Misc. Items", "GoldenKey") {

//        Section("Metamorph Samples", "MetamorphSampleOrganHeart") {
//            Search S2(0.0, "Metamorph Samples", "metamorph;any") { BaseType "Metamorph Heart"; }
//            QuickUI(S2, "SH", ["ItemLevel"]);
//        }

        Section("Fishing Rod and Bricked Uniques", "FishingRod") {
            Search S3("0.0", "Fishing Rod") { Class "Fishing Rods"; BaseType "Fishing Rod"; Rarity "Normal"; }
            QuickUI(S3, "SH", [], "", [], ["On the Hook", "YOU'VE BEEN CAPTURED! STUPID EXILE!", "Fishing rods are just incredibly rare. They don't have any secrets or special purposes at all. NeverSink assures that he was not forced to write this message and that the international fishing council of Wraeclast did not impose their supreme will upon him, but merely acted as advisors."]);

            QuickUI([0.0, "Bricked Uniques", "exoticbases;exoticuniquebases"], "SH", ["Rarity", "ItemLevel"], null, ["gear", "OS"], "Will highlight exotic bases bricked into a rare, such as 'Kalandra's Touch'. May generate a lifetime supply of salt if that happens. You're welcome.");
        }

        Section("Quest & quest-like items", "GoldenKey") {
            Function QuestList($s, $shd = "SD", $text) { QuickUI($s, $shd, [], $text, ["quest"]); }

            QuickUI([1.0, "Maven's invitations", "questlike;invitations"], "S", [], "Maven's Quest-Only Invitations");
            QuickUI([0.0, "Quest Items", "questlikeexception;questitems"], "S", [], "Random Quest Items");
            QuickUI([0.0, "Labyrinth Items", "questlike;labyrinthconsumable"], "S", [], "Lab-Items (Keys and Trinkets)");
            QuickUI([0.0, "Incursion Item", "questlike;incursionconsumable"], "S", [], "Incursion Stones of Passage");
            QuickUI([0.0, "Heist Target", "heisttarget;any"], "S", [], "Heist Target");
            QuickUI([0.0, "Atlas Voidstones", "artefact->trinkets;any"], "SD", []);

            Conditional("?QuestNewTiers") { Show; Class Quest; SetBorderColor 74 230 58; SetFontSize 45; PlayEffect Green; MinimapIcon 1 Green Hexagon;}
            ElementAdder_Tier("?QuestNewTiers", "QuestList");
        }

        Section("Misc. Currency", "WisdomScroll") {
            Search S1(0.0, "Harvest Currencies", "currency->others;harbinger") { BaseType "Fragmentation Scroll"; }
            QuickUI(S1, "SH", [], "Harbinger Upgrade Tokens", ["all", "SO"]);
            QuickUI([1.0, "Misc. Currency", "currency->others;misc"], "SH", [], "Misc Currency", ["currency", "SO"]);
            QuickUI([1.0, "Untiered Currency B", "currency;untiereditems"], "SHD");
            QuickUI([1.0, "Scroll Fragments", "currency;scrollfragments"], "SH");
        }

        Section("Untiered Items", "StackedDeck")
        {
            Warning("You should never see these items. Either your filter is outdated or there is a problem in your filter.");

            Search S0(1.0, "Untiered Divination Cards", "divination;restex") { }
            Search S0(1.0, "Untiered Currency", "currency;restex") {  }
            Search S0(1.0, "Untiered Uniques", "uniques;restex") { }
            Search S0(1.0, "Untiered Unique maps", "uniques->maps;restex") {  }
            Search S0(1.0, "Untiered Scarabs", "fragments->scarabs;restex") { }
            Search S0(1.0, "Untiered Vials", "vials;restex") { }
            Search S0(1.0, "Untiered Fragments", "fragments;restex") { }
            Search S0(1.0, "Untiered Fossils", "currency->fossil;restex") {  }
            Search S0(1.0, "Untiered Replica Uniques", "uniques->replicas;restex") {  }
            Search S0(1.0, "Untiered Corpses", "corpses;restex") {  }
            Search S0(1.0, "Untiered Incubators", "currency->incubators;restex") { }
            Search S0(1.0, "Untiered Resonators", "currency->resonator;restex") {  }
            Search S0(1.0, "Untiered Map Items", "maps;restex") {  }
            Search S0(1.0, "Untiered Oils", "currency->oil;restex") { }
            Search S0(1.0, "Untiered Misc Map Items", "miscmapitems;restex") {  }
            Search S0(0.0, "Untiered Tattoos", "currency->trial->tattoo;restex") {  }
            Search S0(0.0, "Untiered SettlerRunes", "runes;restex") {  }
            Search S0(0.0, "Untiered Omens", "currency->trial->omen;restex") {  }
            Search S0(1.0, "Untiered Delirium Orbs", "currency->deliriumorbs;restex") {  }
            Search S0(3.0, "Unhandled error items", "anyremaining;restex") {  }
            Search S0(0.0, "Untiered Breachstones", "breachstone;restex") {  }

            QuickUI(S0, "S", [], "Untiered items");
        }

        Description("This rule (attempts) to highlight any item dropped in misc. hideout areas, such as the Bestiary or Azurite mine");
        QuickUI([0.0, "Crafting-Zone Dropped Items", "rare->utility->droppeditems;any"], "SH", [], "Crafting-Zone Dropped Items");
    }

    Section("Optional filter modules", "Animate Weapon") {

        Description("ANIMATE WEAPON: This section should only interest Animate Weapon skill-gem users. Please note that if you use Cloak/Transfigured AW Gems, you'll have to activate multiple entries below, not only one. This entry has a lower priority than crafting, chancing, and other valuable normal/magic weapons.");

        QuickUI([0.0, "Animate weapon (normal)", "animatedweapons;normalmelee"], SHD, [], "AW: Default Mode");
        QuickUI([0.0, "Animate weapon (Spirit Guards)", "animatedweapons;normalranged"], SHD, [], "AW: Ranged Arms");
        QuickUI([0.0, "Animate weapon (Cloak of Tawm'r Isley)", "animatedweapons;magicmelee"], SHD, [], "AW: Cloak");
        QuickUI([0.0, "Animate weapon (Spirit Guards + Cloak)", "animatedweapons;magicranged"], SHD, [], "AW: Cloak + Ranged");
    }
}
